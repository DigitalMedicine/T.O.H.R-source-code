
TOHR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000de34  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000108c  0800dfd8  0800dfd8  0001dfd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f064  0800f064  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f064  0800f064  0001f064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f06c  0800f06c  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f06c  0800f06c  0001f06c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f070  0800f070  0001f070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800f074  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c54  200001f0  0800f264  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e44  0800f264  00021e44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019c19  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c50  00000000  00000000  00039e39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014d0  00000000  00000000  0003da90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001328  00000000  00000000  0003ef60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b7eb  00000000  00000000  00040288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c65b  00000000  00000000  0005ba73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ed9c  00000000  00000000  000780ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00116e6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ba4  00000000  00000000  00116ebc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800dfbc 	.word	0x0800dfbc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	0800dfbc 	.word	0x0800dfbc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800100e:	463b      	mov	r3, r7
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800101a:	4b22      	ldr	r3, [pc, #136]	; (80010a4 <MX_ADC1_Init+0x9c>)
 800101c:	4a22      	ldr	r2, [pc, #136]	; (80010a8 <MX_ADC1_Init+0xa0>)
 800101e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001020:	4b20      	ldr	r3, [pc, #128]	; (80010a4 <MX_ADC1_Init+0x9c>)
 8001022:	2200      	movs	r2, #0
 8001024:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001026:	4b1f      	ldr	r3, [pc, #124]	; (80010a4 <MX_ADC1_Init+0x9c>)
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800102c:	4b1d      	ldr	r3, [pc, #116]	; (80010a4 <MX_ADC1_Init+0x9c>)
 800102e:	2200      	movs	r2, #0
 8001030:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001032:	4b1c      	ldr	r3, [pc, #112]	; (80010a4 <MX_ADC1_Init+0x9c>)
 8001034:	2200      	movs	r2, #0
 8001036:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001038:	4b1a      	ldr	r3, [pc, #104]	; (80010a4 <MX_ADC1_Init+0x9c>)
 800103a:	2200      	movs	r2, #0
 800103c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001040:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <MX_ADC1_Init+0x9c>)
 8001042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001046:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001048:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <MX_ADC1_Init+0x9c>)
 800104a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800104e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001050:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <MX_ADC1_Init+0x9c>)
 8001052:	2200      	movs	r2, #0
 8001054:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001056:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <MX_ADC1_Init+0x9c>)
 8001058:	2201      	movs	r2, #1
 800105a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800105c:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <MX_ADC1_Init+0x9c>)
 800105e:	2201      	movs	r2, #1
 8001060:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001064:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <MX_ADC1_Init+0x9c>)
 8001066:	2200      	movs	r2, #0
 8001068:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800106a:	480e      	ldr	r0, [pc, #56]	; (80010a4 <MX_ADC1_Init+0x9c>)
 800106c:	f002 ff24 	bl	8003eb8 <HAL_ADC_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8001076:	f000 fcab 	bl	80019d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800107a:	2300      	movs	r3, #0
 800107c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800107e:	2301      	movs	r3, #1
 8001080:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001082:	2300      	movs	r3, #0
 8001084:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001086:	463b      	mov	r3, r7
 8001088:	4619      	mov	r1, r3
 800108a:	4806      	ldr	r0, [pc, #24]	; (80010a4 <MX_ADC1_Init+0x9c>)
 800108c:	f003 f976 	bl	800437c <HAL_ADC_ConfigChannel>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001096:	f000 fc9b 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800109a:	bf00      	nop
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	2000020c 	.word	0x2000020c
 80010a8:	40012000 	.word	0x40012000

080010ac <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	; 0x28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a33      	ldr	r2, [pc, #204]	; (8001198 <HAL_ADC_MspInit+0xec>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d15f      	bne.n	800118e <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	613b      	str	r3, [r7, #16]
 80010d2:	4b32      	ldr	r3, [pc, #200]	; (800119c <HAL_ADC_MspInit+0xf0>)
 80010d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d6:	4a31      	ldr	r2, [pc, #196]	; (800119c <HAL_ADC_MspInit+0xf0>)
 80010d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010dc:	6453      	str	r3, [r2, #68]	; 0x44
 80010de:	4b2f      	ldr	r3, [pc, #188]	; (800119c <HAL_ADC_MspInit+0xf0>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010e6:	613b      	str	r3, [r7, #16]
 80010e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	4b2b      	ldr	r3, [pc, #172]	; (800119c <HAL_ADC_MspInit+0xf0>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	4a2a      	ldr	r2, [pc, #168]	; (800119c <HAL_ADC_MspInit+0xf0>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	6313      	str	r3, [r2, #48]	; 0x30
 80010fa:	4b28      	ldr	r3, [pc, #160]	; (800119c <HAL_ADC_MspInit+0xf0>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001106:	2301      	movs	r3, #1
 8001108:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800110a:	2303      	movs	r3, #3
 800110c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001112:	f107 0314 	add.w	r3, r7, #20
 8001116:	4619      	mov	r1, r3
 8001118:	4821      	ldr	r0, [pc, #132]	; (80011a0 <HAL_ADC_MspInit+0xf4>)
 800111a:	f004 f85b 	bl	80051d4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800111e:	4b21      	ldr	r3, [pc, #132]	; (80011a4 <HAL_ADC_MspInit+0xf8>)
 8001120:	4a21      	ldr	r2, [pc, #132]	; (80011a8 <HAL_ADC_MspInit+0xfc>)
 8001122:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001124:	4b1f      	ldr	r3, [pc, #124]	; (80011a4 <HAL_ADC_MspInit+0xf8>)
 8001126:	2200      	movs	r2, #0
 8001128:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800112a:	4b1e      	ldr	r3, [pc, #120]	; (80011a4 <HAL_ADC_MspInit+0xf8>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001130:	4b1c      	ldr	r3, [pc, #112]	; (80011a4 <HAL_ADC_MspInit+0xf8>)
 8001132:	2200      	movs	r2, #0
 8001134:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001136:	4b1b      	ldr	r3, [pc, #108]	; (80011a4 <HAL_ADC_MspInit+0xf8>)
 8001138:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800113c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800113e:	4b19      	ldr	r3, [pc, #100]	; (80011a4 <HAL_ADC_MspInit+0xf8>)
 8001140:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001144:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001146:	4b17      	ldr	r3, [pc, #92]	; (80011a4 <HAL_ADC_MspInit+0xf8>)
 8001148:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800114c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <HAL_ADC_MspInit+0xf8>)
 8001150:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001154:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001156:	4b13      	ldr	r3, [pc, #76]	; (80011a4 <HAL_ADC_MspInit+0xf8>)
 8001158:	2200      	movs	r2, #0
 800115a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800115c:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <HAL_ADC_MspInit+0xf8>)
 800115e:	2200      	movs	r2, #0
 8001160:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001162:	4810      	ldr	r0, [pc, #64]	; (80011a4 <HAL_ADC_MspInit+0xf8>)
 8001164:	f003 fcc6 	bl	8004af4 <HAL_DMA_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800116e:	f000 fc2f 	bl	80019d0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a0b      	ldr	r2, [pc, #44]	; (80011a4 <HAL_ADC_MspInit+0xf8>)
 8001176:	639a      	str	r2, [r3, #56]	; 0x38
 8001178:	4a0a      	ldr	r2, [pc, #40]	; (80011a4 <HAL_ADC_MspInit+0xf8>)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800117e:	2200      	movs	r2, #0
 8001180:	2100      	movs	r1, #0
 8001182:	2012      	movs	r0, #18
 8001184:	f003 fc7f 	bl	8004a86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001188:	2012      	movs	r0, #18
 800118a:	f003 fc98 	bl	8004abe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800118e:	bf00      	nop
 8001190:	3728      	adds	r7, #40	; 0x28
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40012000 	.word	0x40012000
 800119c:	40023800 	.word	0x40023800
 80011a0:	40020000 	.word	0x40020000
 80011a4:	20000254 	.word	0x20000254
 80011a8:	40026410 	.word	0x40026410

080011ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	607b      	str	r3, [r7, #4]
 80011b6:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <MX_DMA_Init+0x3c>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	4a0b      	ldr	r2, [pc, #44]	; (80011e8 <MX_DMA_Init+0x3c>)
 80011bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011c0:	6313      	str	r3, [r2, #48]	; 0x30
 80011c2:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <MX_DMA_Init+0x3c>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2100      	movs	r1, #0
 80011d2:	2038      	movs	r0, #56	; 0x38
 80011d4:	f003 fc57 	bl	8004a86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011d8:	2038      	movs	r0, #56	; 0x38
 80011da:	f003 fc70 	bl	8004abe <HAL_NVIC_EnableIRQ>

}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40023800 	.word	0x40023800

080011ec <bcd2Dec>:
* @brief       Convert BCD to Decimal
* @param[in]   val value to convert from BCD to Decimal
* @return      res Converted value
*/
uint8_t bcd2Dec ( uint8_t val )
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	71fb      	strb	r3, [r7, #7]
    uint8_t res = ((val/16*10) + (val % 16));
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	091b      	lsrs	r3, r3, #4
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	461a      	mov	r2, r3
 80011fe:	0092      	lsls	r2, r2, #2
 8001200:	4413      	add	r3, r2
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	b2da      	uxtb	r2, r3
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	f003 030f 	and.w	r3, r3, #15
 800120c:	b2db      	uxtb	r3, r3
 800120e:	4413      	add	r3, r2
 8001210:	73fb      	strb	r3, [r7, #15]
    return res;
 8001212:	7bfb      	ldrb	r3, [r7, #15]
}
 8001214:	4618      	mov	r0, r3
 8001216:	3714      	adds	r7, #20
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <ds1307rtc_get_date_time>:
    uint8_t res = ((val/10*16) + (val%10));
    return res;
}

int8_t ds1307rtc_get_date_time(date_time_t* datetime)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b088      	sub	sp, #32
 8001224:	af04      	add	r7, sp, #16
 8001226:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef returnValue;
	uint8_t in_buff[DATA_TRANSFER_SIZE];

	//USING Mem_Read function
	//Mem_Read is equivalent for performing Transmit of the MemAddress and Receive												 //DS1307_SECONDS is the first register to be read
	returnValue = HAL_I2C_Mem_Read(&hi2c1, DS1307_ADDRESS, DS1307_SECONDS, ADDRESS_SIZE, in_buff, DATA_TRANSFER_SIZE, HAL_MAX_DELAY);
 8001228:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800122c:	9302      	str	r3, [sp, #8]
 800122e:	2307      	movs	r3, #7
 8001230:	9301      	str	r3, [sp, #4]
 8001232:	f107 0308 	add.w	r3, r7, #8
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	2301      	movs	r3, #1
 800123a:	2200      	movs	r2, #0
 800123c:	21d0      	movs	r1, #208	; 0xd0
 800123e:	4835      	ldr	r0, [pc, #212]	; (8001314 <ds1307rtc_get_date_time+0xf4>)
 8001240:	f004 fee0 	bl	8006004 <HAL_I2C_Mem_Read>
 8001244:	4603      	mov	r3, r0
 8001246:	73fb      	strb	r3, [r7, #15]
	if(returnValue != HAL_OK)
 8001248:	7bfb      	ldrb	r3, [r7, #15]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d002      	beq.n	8001254 <ds1307rtc_get_date_time+0x34>
	{
		return DS1307_IC2_ERR;
 800124e:	f06f 0301 	mvn.w	r3, #1
 8001252:	e05b      	b.n	800130c <ds1307rtc_get_date_time+0xec>
	}

	//USING Master Receive and Transmit functions																  //DS1307_SECONDS is the first register to be read
	returnValue = HAL_I2C_Master_Transmit(&hi2c1, DS1307_ADDRESS, DS1307_SECONDS, ADDRESS_SIZE, HAL_MAX_DELAY);
 8001254:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	2301      	movs	r3, #1
 800125c:	2200      	movs	r2, #0
 800125e:	21d0      	movs	r1, #208	; 0xd0
 8001260:	482c      	ldr	r0, [pc, #176]	; (8001314 <ds1307rtc_get_date_time+0xf4>)
 8001262:	f004 fab1 	bl	80057c8 <HAL_I2C_Master_Transmit>
 8001266:	4603      	mov	r3, r0
 8001268:	73fb      	strb	r3, [r7, #15]
	if(returnValue != HAL_OK)
 800126a:	7bfb      	ldrb	r3, [r7, #15]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d002      	beq.n	8001276 <ds1307rtc_get_date_time+0x56>
	{
		return DS1307_IC2_ERR;
 8001270:	f06f 0301 	mvn.w	r3, #1
 8001274:	e04a      	b.n	800130c <ds1307rtc_get_date_time+0xec>
	}
	returnValue = HAL_I2C_Master_Receive(&hi2c1, DS1307_ADDRESS, in_buff, DATA_TRANSFER_SIZE, HAL_MAX_DELAY);
 8001276:	f107 0208 	add.w	r2, r7, #8
 800127a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	2307      	movs	r3, #7
 8001282:	21d0      	movs	r1, #208	; 0xd0
 8001284:	4823      	ldr	r0, [pc, #140]	; (8001314 <ds1307rtc_get_date_time+0xf4>)
 8001286:	f004 fb9d 	bl	80059c4 <HAL_I2C_Master_Receive>
 800128a:	4603      	mov	r3, r0
 800128c:	73fb      	strb	r3, [r7, #15]
	if(returnValue != HAL_OK)
 800128e:	7bfb      	ldrb	r3, [r7, #15]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d002      	beq.n	800129a <ds1307rtc_get_date_time+0x7a>
	{
		return DS1307_IC2_ERR;
 8001294:	f06f 0301 	mvn.w	r3, #1
 8001298:	e038      	b.n	800130c <ds1307rtc_get_date_time+0xec>
	}
	datetime->seconds = bcd2Dec(in_buff[0]);
 800129a:	7a3b      	ldrb	r3, [r7, #8]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ffa5 	bl	80011ec <bcd2Dec>
 80012a2:	4603      	mov	r3, r0
 80012a4:	461a      	mov	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	701a      	strb	r2, [r3, #0]
	datetime->minutes = bcd2Dec(in_buff[1]);
 80012aa:	7a7b      	ldrb	r3, [r7, #9]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ff9d 	bl	80011ec <bcd2Dec>
 80012b2:	4603      	mov	r3, r0
 80012b4:	461a      	mov	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	705a      	strb	r2, [r3, #1]
	datetime->hours = bcd2Dec(in_buff[2]);
 80012ba:	7abb      	ldrb	r3, [r7, #10]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff ff95 	bl	80011ec <bcd2Dec>
 80012c2:	4603      	mov	r3, r0
 80012c4:	461a      	mov	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	709a      	strb	r2, [r3, #2]
	datetime->day = bcd2Dec(in_buff[3]);
 80012ca:	7afb      	ldrb	r3, [r7, #11]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff ff8d 	bl	80011ec <bcd2Dec>
 80012d2:	4603      	mov	r3, r0
 80012d4:	461a      	mov	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	70da      	strb	r2, [r3, #3]
	datetime->date = bcd2Dec(in_buff[4]);
 80012da:	7b3b      	ldrb	r3, [r7, #12]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff ff85 	bl	80011ec <bcd2Dec>
 80012e2:	4603      	mov	r3, r0
 80012e4:	461a      	mov	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	711a      	strb	r2, [r3, #4]
	datetime->month = bcd2Dec(in_buff[5]);
 80012ea:	7b7b      	ldrb	r3, [r7, #13]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff ff7d 	bl	80011ec <bcd2Dec>
 80012f2:	4603      	mov	r3, r0
 80012f4:	461a      	mov	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	715a      	strb	r2, [r3, #5]
	datetime->year = bcd2Dec(in_buff[6]);
 80012fa:	7bbb      	ldrb	r3, [r7, #14]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff ff75 	bl	80011ec <bcd2Dec>
 8001302:	4603      	mov	r3, r0
 8001304:	b29a      	uxth	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	80da      	strh	r2, [r3, #6]
	return DS1307_OK;
 800130a:	2300      	movs	r3, #0
}
 800130c:	4618      	mov	r0, r3
 800130e:	3710      	adds	r7, #16
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	200002b4 	.word	0x200002b4

08001318 <ds1307rtc_init>:
	}*/
	return DS1307_OK;
}

int8_t ds1307rtc_init()
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef returnValue;
	returnValue = HAL_I2C_IsDeviceReady(&hi2c1, DS1307_ADDRESS, MAX_RETRY, HAL_MAX_DELAY);
 800131e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001322:	2203      	movs	r2, #3
 8001324:	21d0      	movs	r1, #208	; 0xd0
 8001326:	4808      	ldr	r0, [pc, #32]	; (8001348 <ds1307rtc_init+0x30>)
 8001328:	f005 f892 	bl	8006450 <HAL_I2C_IsDeviceReady>
 800132c:	4603      	mov	r3, r0
 800132e:	71fb      	strb	r3, [r7, #7]
	if(returnValue != HAL_OK)
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d002      	beq.n	800133c <ds1307rtc_init+0x24>
	{
		return DS1307_ERR;
 8001336:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800133a:	e000      	b.n	800133e <ds1307rtc_init+0x26>
	}
	return DS1307_OK;
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	200002b4 	.word	0x200002b4

0800134c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b088      	sub	sp, #32
 8001350:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001352:	f107 030c 	add.w	r3, r7, #12
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]
 8001360:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	60bb      	str	r3, [r7, #8]
 8001366:	4b39      	ldr	r3, [pc, #228]	; (800144c <MX_GPIO_Init+0x100>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	4a38      	ldr	r2, [pc, #224]	; (800144c <MX_GPIO_Init+0x100>)
 800136c:	f043 0301 	orr.w	r3, r3, #1
 8001370:	6313      	str	r3, [r2, #48]	; 0x30
 8001372:	4b36      	ldr	r3, [pc, #216]	; (800144c <MX_GPIO_Init+0x100>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	607b      	str	r3, [r7, #4]
 8001382:	4b32      	ldr	r3, [pc, #200]	; (800144c <MX_GPIO_Init+0x100>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	4a31      	ldr	r2, [pc, #196]	; (800144c <MX_GPIO_Init+0x100>)
 8001388:	f043 0302 	orr.w	r3, r3, #2
 800138c:	6313      	str	r3, [r2, #48]	; 0x30
 800138e:	4b2f      	ldr	r3, [pc, #188]	; (800144c <MX_GPIO_Init+0x100>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, green_led_Pin|red_led_Pin, GPIO_PIN_RESET);
 800139a:	2200      	movs	r2, #0
 800139c:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80013a0:	482b      	ldr	r0, [pc, #172]	; (8001450 <MX_GPIO_Init+0x104>)
 80013a2:	f004 f89b 	bl	80054dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, reset_gpio_Pin|mfio_gpio_Pin, GPIO_PIN_RESET);
 80013a6:	2200      	movs	r2, #0
 80013a8:	f44f 7140 	mov.w	r1, #768	; 0x300
 80013ac:	4829      	ldr	r0, [pc, #164]	; (8001454 <MX_GPIO_Init+0x108>)
 80013ae:	f004 f895 	bl	80054dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = max_button_Pin;
 80013b2:	2302      	movs	r3, #2
 80013b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013b6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(max_button_GPIO_Port, &GPIO_InitStruct);
 80013c0:	f107 030c 	add.w	r3, r7, #12
 80013c4:	4619      	mov	r1, r3
 80013c6:	4823      	ldr	r0, [pc, #140]	; (8001454 <MX_GPIO_Init+0x108>)
 80013c8:	f003 ff04 	bl	80051d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = green_led_Pin|red_led_Pin;
 80013cc:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80013d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d2:	2301      	movs	r3, #1
 80013d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013da:	2300      	movs	r3, #0
 80013dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013de:	f107 030c 	add.w	r3, r7, #12
 80013e2:	4619      	mov	r1, r3
 80013e4:	481a      	ldr	r0, [pc, #104]	; (8001450 <MX_GPIO_Init+0x104>)
 80013e6:	f003 fef5 	bl	80051d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = reset_gpio_Pin|mfio_gpio_Pin;
 80013ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f0:	2301      	movs	r3, #1
 80013f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f8:	2300      	movs	r3, #0
 80013fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fc:	f107 030c 	add.w	r3, r7, #12
 8001400:	4619      	mov	r1, r3
 8001402:	4814      	ldr	r0, [pc, #80]	; (8001454 <MX_GPIO_Init+0x108>)
 8001404:	f003 fee6 	bl	80051d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = temp_button_Pin;
 8001408:	2308      	movs	r3, #8
 800140a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800140c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001410:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(temp_button_GPIO_Port, &GPIO_InitStruct);
 8001416:	f107 030c 	add.w	r3, r7, #12
 800141a:	4619      	mov	r1, r3
 800141c:	480c      	ldr	r0, [pc, #48]	; (8001450 <MX_GPIO_Init+0x104>)
 800141e:	f003 fed9 	bl	80051d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001422:	2200      	movs	r2, #0
 8001424:	2100      	movs	r1, #0
 8001426:	2007      	movs	r0, #7
 8001428:	f003 fb2d 	bl	8004a86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800142c:	2007      	movs	r0, #7
 800142e:	f003 fb46 	bl	8004abe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001432:	2200      	movs	r2, #0
 8001434:	2100      	movs	r1, #0
 8001436:	2009      	movs	r0, #9
 8001438:	f003 fb25 	bl	8004a86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800143c:	2009      	movs	r0, #9
 800143e:	f003 fb3e 	bl	8004abe <HAL_NVIC_EnableIRQ>

}
 8001442:	bf00      	nop
 8001444:	3720      	adds	r7, #32
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40023800 	.word	0x40023800
 8001450:	40020400 	.word	0x40020400
 8001454:	40020000 	.word	0x40020000

08001458 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800145c:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <MX_I2C1_Init+0x50>)
 800145e:	4a13      	ldr	r2, [pc, #76]	; (80014ac <MX_I2C1_Init+0x54>)
 8001460:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001462:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <MX_I2C1_Init+0x50>)
 8001464:	4a12      	ldr	r2, [pc, #72]	; (80014b0 <MX_I2C1_Init+0x58>)
 8001466:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001468:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <MX_I2C1_Init+0x50>)
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800146e:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <MX_I2C1_Init+0x50>)
 8001470:	2200      	movs	r2, #0
 8001472:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001474:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <MX_I2C1_Init+0x50>)
 8001476:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800147a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800147c:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <MX_I2C1_Init+0x50>)
 800147e:	2200      	movs	r2, #0
 8001480:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001482:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <MX_I2C1_Init+0x50>)
 8001484:	2200      	movs	r2, #0
 8001486:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001488:	4b07      	ldr	r3, [pc, #28]	; (80014a8 <MX_I2C1_Init+0x50>)
 800148a:	2200      	movs	r2, #0
 800148c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800148e:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <MX_I2C1_Init+0x50>)
 8001490:	2200      	movs	r2, #0
 8001492:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001494:	4804      	ldr	r0, [pc, #16]	; (80014a8 <MX_I2C1_Init+0x50>)
 8001496:	f004 f853 	bl	8005540 <HAL_I2C_Init>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014a0:	f000 fa96 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	200002b4 	.word	0x200002b4
 80014ac:	40005400 	.word	0x40005400
 80014b0:	000186a0 	.word	0x000186a0

080014b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08a      	sub	sp, #40	; 0x28
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a19      	ldr	r2, [pc, #100]	; (8001538 <HAL_I2C_MspInit+0x84>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d12b      	bne.n	800152e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	613b      	str	r3, [r7, #16]
 80014da:	4b18      	ldr	r3, [pc, #96]	; (800153c <HAL_I2C_MspInit+0x88>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	4a17      	ldr	r2, [pc, #92]	; (800153c <HAL_I2C_MspInit+0x88>)
 80014e0:	f043 0302 	orr.w	r3, r3, #2
 80014e4:	6313      	str	r3, [r2, #48]	; 0x30
 80014e6:	4b15      	ldr	r3, [pc, #84]	; (800153c <HAL_I2C_MspInit+0x88>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	613b      	str	r3, [r7, #16]
 80014f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014f2:	23c0      	movs	r3, #192	; 0xc0
 80014f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014f6:	2312      	movs	r3, #18
 80014f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fe:	2303      	movs	r3, #3
 8001500:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001502:	2304      	movs	r3, #4
 8001504:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001506:	f107 0314 	add.w	r3, r7, #20
 800150a:	4619      	mov	r1, r3
 800150c:	480c      	ldr	r0, [pc, #48]	; (8001540 <HAL_I2C_MspInit+0x8c>)
 800150e:	f003 fe61 	bl	80051d4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	4b09      	ldr	r3, [pc, #36]	; (800153c <HAL_I2C_MspInit+0x88>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	4a08      	ldr	r2, [pc, #32]	; (800153c <HAL_I2C_MspInit+0x88>)
 800151c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001520:	6413      	str	r3, [r2, #64]	; 0x40
 8001522:	4b06      	ldr	r3, [pc, #24]	; (800153c <HAL_I2C_MspInit+0x88>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800152e:	bf00      	nop
 8001530:	3728      	adds	r7, #40	; 0x28
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40005400 	.word	0x40005400
 800153c:	40023800 	.word	0x40023800
 8001540:	40020400 	.word	0x40020400

08001544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001548:	f002 fc20 	bl	8003d8c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800154c:	f000 f928 	bl	80017a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001550:	f7ff fefc 	bl	800134c <MX_GPIO_Init>
  MX_DMA_Init();
 8001554:	f7ff fe2a 	bl	80011ac <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001558:	f002 fb7c 	bl	8003c54 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800155c:	f7ff fd54 	bl	8001008 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001560:	f002 f9c0 	bl	80038e4 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001564:	f7ff ff78 	bl	8001458 <MX_I2C1_Init>
  MX_TIM10_Init();
 8001568:	f002 fa82 	bl	8003a70 <MX_TIM10_Init>
  MX_TIM3_Init();
 800156c:	f002 fa08 	bl	8003980 <MX_TIM3_Init>
  MX_TIM11_Init();
 8001570:	f002 faa2 	bl	8003ab8 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */


  /******************************* INIT *******************************/
  ssd1306_Init();
 8001574:	f001 fad2 	bl	8002b1c <ssd1306_Init>
  ds1307rtc_init();
 8001578:	f7ff fece 	bl	8001318 <ds1307rtc_init>
  max_init();
 800157c:	f000 fd30 	bl	8001fe0 <max_init>
  HAL_TIM_Base_Start(&htim2);
 8001580:	487a      	ldr	r0, [pc, #488]	; (800176c <main+0x228>)
 8001582:	f006 fa27 	bl	80079d4 <HAL_TIM_Base_Start>
  temp_init();
 8001586:	f001 fe51 	bl	800322c <temp_init>
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(steinharthart_flag == 1){
 800158a:	4b79      	ldr	r3, [pc, #484]	; (8001770 <main+0x22c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d110      	bne.n	80015b4 <main+0x70>
		  ssd1306_Clear();
 8001592:	f001 fb2d 	bl	8002bf0 <ssd1306_Clear>
		  get_max();
 8001596:	f000 fda5 	bl	80020e4 <get_max>
		  get_clock();
 800159a:	f001 fa2d 	bl	80029f8 <get_clock>
		  get_temp();
 800159e:	f001 fea5 	bl	80032ec <get_temp>
		  print_time();
 80015a2:	f001 fa33 	bl	8002a0c <print_time>
		  print_max();
 80015a6:	f000 ff87 	bl	80024b8 <print_max>
		  print_temp();
 80015aa:	f002 f967 	bl	800387c <print_temp>
		  steinharthart_flag = 0;
 80015ae:	4b70      	ldr	r3, [pc, #448]	; (8001770 <main+0x22c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
	  }

	  if(max_flag == 1){
 80015b4:	4b6f      	ldr	r3, [pc, #444]	; (8001774 <main+0x230>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d171      	bne.n	80016a0 <main+0x15c>
		  HAL_TIM_Base_Stop(&htim2);
 80015bc:	486b      	ldr	r0, [pc, #428]	; (800176c <main+0x228>)
 80015be:	f006 fa63 	bl	8007a88 <HAL_TIM_Base_Stop>
		if(monitoring_flag == 0 && time_elapsed_flag == 0){
 80015c2:	4b6d      	ldr	r3, [pc, #436]	; (8001778 <main+0x234>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d10c      	bne.n	80015e4 <main+0xa0>
 80015ca:	4b6c      	ldr	r3, [pc, #432]	; (800177c <main+0x238>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d108      	bne.n	80015e4 <main+0xa0>
			max_setup();
 80015d2:	f000 fd21 	bl	8002018 <max_setup>
			HAL_TIM_Base_Start_IT(&htim10);
 80015d6:	486a      	ldr	r0, [pc, #424]	; (8001780 <main+0x23c>)
 80015d8:	f006 fa7e 	bl	8007ad8 <HAL_TIM_Base_Start_IT>
			monitoring_flag = 1;
 80015dc:	4b66      	ldr	r3, [pc, #408]	; (8001778 <main+0x234>)
 80015de:	2201      	movs	r2, #1
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	e05d      	b.n	80016a0 <main+0x15c>
		}
		else if (monitoring_flag == 1 && time_elapsed_flag == 0){
 80015e4:	4b64      	ldr	r3, [pc, #400]	; (8001778 <main+0x234>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d106      	bne.n	80015fa <main+0xb6>
 80015ec:	4b63      	ldr	r3, [pc, #396]	; (800177c <main+0x238>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d102      	bne.n	80015fa <main+0xb6>
			max_loop();
 80015f4:	f000 ff0c 	bl	8002410 <max_loop>
 80015f8:	e052      	b.n	80016a0 <main+0x15c>
		}
		else if (time_elapsed_flag == 1){
 80015fa:	4b60      	ldr	r3, [pc, #384]	; (800177c <main+0x238>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d14e      	bne.n	80016a0 <main+0x15c>
			HAL_TIM_Base_Stop_IT(&htim10);
 8001602:	485f      	ldr	r0, [pc, #380]	; (8001780 <main+0x23c>)
 8001604:	f006 faca 	bl	8007b9c <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Start(&htim2);
 8001608:	4858      	ldr	r0, [pc, #352]	; (800176c <main+0x228>)
 800160a:	f006 f9e3 	bl	80079d4 <HAL_TIM_Base_Start>
			hr_status = hr_analysis();
 800160e:	f000 fd7b 	bl	8002108 <hr_analysis>
 8001612:	4603      	mov	r3, r0
 8001614:	4a5b      	ldr	r2, [pc, #364]	; (8001784 <main+0x240>)
 8001616:	6013      	str	r3, [r2, #0]
			print_hr_status(hr_status);
 8001618:	4b5a      	ldr	r3, [pc, #360]	; (8001784 <main+0x240>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4618      	mov	r0, r3
 800161e:	f000 ff99 	bl	8002554 <print_hr_status>
			ox_status = ox_analysis();
 8001622:	f000 fe39 	bl	8002298 <ox_analysis>
 8001626:	4603      	mov	r3, r0
 8001628:	4a57      	ldr	r2, [pc, #348]	; (8001788 <main+0x244>)
 800162a:	6013      	str	r3, [r2, #0]
			print_ox_status(ox_status);
 800162c:	4b56      	ldr	r3, [pc, #344]	; (8001788 <main+0x244>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4618      	mov	r0, r3
 8001632:	f001 f89f 	bl	8002774 <print_ox_status>

			if(hr_status == 1 || ox_status == 1){
 8001636:	4b53      	ldr	r3, [pc, #332]	; (8001784 <main+0x240>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d003      	beq.n	8001646 <main+0x102>
 800163e:	4b52      	ldr	r3, [pc, #328]	; (8001788 <main+0x244>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d117      	bne.n	8001676 <main+0x132>
				print_breathe();
 8001646:	f001 f9a7 	bl	8002998 <print_breathe>
				HAL_TIM_Base_Stop(&htim2);
 800164a:	4848      	ldr	r0, [pc, #288]	; (800176c <main+0x228>)
 800164c:	f006 fa1c 	bl	8007a88 <HAL_TIM_Base_Stop>
				time_elapsed_flag = 0;
 8001650:	4b4a      	ldr	r3, [pc, #296]	; (800177c <main+0x238>)
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
				breathe_flag = 1;
 8001656:	4b4d      	ldr	r3, [pc, #308]	; (800178c <main+0x248>)
 8001658:	2201      	movs	r2, #1
 800165a:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim10);
 800165c:	4848      	ldr	r0, [pc, #288]	; (8001780 <main+0x23c>)
 800165e:	f006 fa3b 	bl	8007ad8 <HAL_TIM_Base_Start_IT>
				HAL_TIM_Base_Start_IT(&htim11);
 8001662:	484b      	ldr	r0, [pc, #300]	; (8001790 <main+0x24c>)
 8001664:	f006 fa38 	bl	8007ad8 <HAL_TIM_Base_Start_IT>
				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001668:	2100      	movs	r1, #0
 800166a:	484a      	ldr	r0, [pc, #296]	; (8001794 <main+0x250>)
 800166c:	f006 fb1e 	bl	8007cac <HAL_TIM_PWM_Start>
				max_flag = 0;
 8001670:	4b40      	ldr	r3, [pc, #256]	; (8001774 <main+0x230>)
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
			}
			if(hr_status == 2 || ox_status == 2){
 8001676:	4b43      	ldr	r3, [pc, #268]	; (8001784 <main+0x240>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2b02      	cmp	r3, #2
 800167c:	d003      	beq.n	8001686 <main+0x142>
 800167e:	4b42      	ldr	r3, [pc, #264]	; (8001788 <main+0x244>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2b02      	cmp	r3, #2
 8001684:	d109      	bne.n	800169a <main+0x156>
				max_flag = 1;
 8001686:	4b3b      	ldr	r3, [pc, #236]	; (8001774 <main+0x230>)
 8001688:	2201      	movs	r2, #1
 800168a:	601a      	str	r2, [r3, #0]
				monitoring_flag = 0;
 800168c:	4b3a      	ldr	r3, [pc, #232]	; (8001778 <main+0x234>)
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
				time_elapsed_flag = 0;
 8001692:	4b3a      	ldr	r3, [pc, #232]	; (800177c <main+0x238>)
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	e002      	b.n	80016a0 <main+0x15c>
			}
			else{
				max_flag = 0;
 800169a:	4b36      	ldr	r3, [pc, #216]	; (8001774 <main+0x230>)
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
			}
		}
	  }

	  if(temp_flag == 1) {
 80016a0:	4b3d      	ldr	r3, [pc, #244]	; (8001798 <main+0x254>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d13d      	bne.n	8001724 <main+0x1e0>

		  if(monitoring_flag == 0 && time_elapsed_flag == 0){
 80016a8:	4b33      	ldr	r3, [pc, #204]	; (8001778 <main+0x234>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d10c      	bne.n	80016ca <main+0x186>
 80016b0:	4b32      	ldr	r3, [pc, #200]	; (800177c <main+0x238>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d108      	bne.n	80016ca <main+0x186>
			  temp_setup();
 80016b8:	f001 fdc6 	bl	8003248 <temp_setup>
			  HAL_TIM_Base_Start_IT(&htim10);
 80016bc:	4830      	ldr	r0, [pc, #192]	; (8001780 <main+0x23c>)
 80016be:	f006 fa0b 	bl	8007ad8 <HAL_TIM_Base_Start_IT>
			  monitoring_flag = 1;
 80016c2:	4b2d      	ldr	r3, [pc, #180]	; (8001778 <main+0x234>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	e02c      	b.n	8001724 <main+0x1e0>
		  }
		  else if (monitoring_flag == 1 && time_elapsed_flag == 0){
 80016ca:	4b2b      	ldr	r3, [pc, #172]	; (8001778 <main+0x234>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d106      	bne.n	80016e0 <main+0x19c>
 80016d2:	4b2a      	ldr	r3, [pc, #168]	; (800177c <main+0x238>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d102      	bne.n	80016e0 <main+0x19c>
			  temp_loop();
 80016da:	f001 ff89 	bl	80035f0 <temp_loop>
 80016de:	e021      	b.n	8001724 <main+0x1e0>
		  }
		  else if (time_elapsed_flag == 1){
 80016e0:	4b26      	ldr	r3, [pc, #152]	; (800177c <main+0x238>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d11d      	bne.n	8001724 <main+0x1e0>
			  HAL_TIM_Base_Stop_IT(&htim10);
 80016e8:	4825      	ldr	r0, [pc, #148]	; (8001780 <main+0x23c>)
 80016ea:	f006 fa57 	bl	8007b9c <HAL_TIM_Base_Stop_IT>
			  temp_status = temp_analysis();
 80016ee:	f001 feb1 	bl	8003454 <temp_analysis>
 80016f2:	4603      	mov	r3, r0
 80016f4:	4a29      	ldr	r2, [pc, #164]	; (800179c <main+0x258>)
 80016f6:	6013      	str	r3, [r2, #0]
			  print_temp_status(temp_status);
 80016f8:	4b28      	ldr	r3, [pc, #160]	; (800179c <main+0x258>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f001 ff93 	bl	8003628 <print_temp_status>
			  if(temp_status == 2){
 8001702:	4b26      	ldr	r3, [pc, #152]	; (800179c <main+0x258>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2b02      	cmp	r3, #2
 8001708:	d109      	bne.n	800171e <main+0x1da>
					monitoring_flag = 0;
 800170a:	4b1b      	ldr	r3, [pc, #108]	; (8001778 <main+0x234>)
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
					time_elapsed_flag = 0;
 8001710:	4b1a      	ldr	r3, [pc, #104]	; (800177c <main+0x238>)
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
					temp_flag = 1;
 8001716:	4b20      	ldr	r3, [pc, #128]	; (8001798 <main+0x254>)
 8001718:	2201      	movs	r2, #1
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	e002      	b.n	8001724 <main+0x1e0>
			  }
			  else{
					temp_flag = 0;
 800171e:	4b1e      	ldr	r3, [pc, #120]	; (8001798 <main+0x254>)
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
			  }
		  }
	  }
	  if(breathe_flag == 1){
 8001724:	4b19      	ldr	r3, [pc, #100]	; (800178c <main+0x248>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2b01      	cmp	r3, #1
 800172a:	f47f af2e 	bne.w	800158a <main+0x46>
		  if(time_elapsed_flag == 1){
 800172e:	4b13      	ldr	r3, [pc, #76]	; (800177c <main+0x238>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2b01      	cmp	r3, #1
 8001734:	f47f af29 	bne.w	800158a <main+0x46>
				HAL_TIM_Base_Stop_IT(&htim10);
 8001738:	4811      	ldr	r0, [pc, #68]	; (8001780 <main+0x23c>)
 800173a:	f006 fa2f 	bl	8007b9c <HAL_TIM_Base_Stop_IT>
				HAL_TIM_Base_Stop_IT(&htim11);
 800173e:	4814      	ldr	r0, [pc, #80]	; (8001790 <main+0x24c>)
 8001740:	f006 fa2c 	bl	8007b9c <HAL_TIM_Base_Stop_IT>
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001744:	2100      	movs	r1, #0
 8001746:	4813      	ldr	r0, [pc, #76]	; (8001794 <main+0x250>)
 8001748:	f006 fb60 	bl	8007e0c <HAL_TIM_PWM_Stop>
				max_flag = 1;
 800174c:	4b09      	ldr	r3, [pc, #36]	; (8001774 <main+0x230>)
 800174e:	2201      	movs	r2, #1
 8001750:	601a      	str	r2, [r3, #0]
				monitoring_flag = 0;
 8001752:	4b09      	ldr	r3, [pc, #36]	; (8001778 <main+0x234>)
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
				time_elapsed_flag = 0;
 8001758:	4b08      	ldr	r3, [pc, #32]	; (800177c <main+0x238>)
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
				breathe_flag = 0;
 800175e:	4b0b      	ldr	r3, [pc, #44]	; (800178c <main+0x248>)
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Start(&htim2);
 8001764:	4801      	ldr	r0, [pc, #4]	; (800176c <main+0x228>)
 8001766:	f006 f935 	bl	80079d4 <HAL_TIM_Base_Start>
	  if(steinharthart_flag == 1){
 800176a:	e70e      	b.n	800158a <main+0x46>
 800176c:	20001ccc 	.word	0x20001ccc
 8001770:	20000308 	.word	0x20000308
 8001774:	2000030c 	.word	0x2000030c
 8001778:	20000314 	.word	0x20000314
 800177c:	20000318 	.word	0x20000318
 8001780:	20001d5c 	.word	0x20001d5c
 8001784:	20000328 	.word	0x20000328
 8001788:	2000032c 	.word	0x2000032c
 800178c:	2000031c 	.word	0x2000031c
 8001790:	20001da4 	.word	0x20001da4
 8001794:	20001d14 	.word	0x20001d14
 8001798:	20000310 	.word	0x20000310
 800179c:	20000324 	.word	0x20000324

080017a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b094      	sub	sp, #80	; 0x50
 80017a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017a6:	f107 0320 	add.w	r3, r7, #32
 80017aa:	2230      	movs	r2, #48	; 0x30
 80017ac:	2100      	movs	r1, #0
 80017ae:	4618      	mov	r0, r3
 80017b0:	f007 fd92 	bl	80092d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017b4:	f107 030c 	add.w	r3, r7, #12
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
 80017c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017c4:	2300      	movs	r3, #0
 80017c6:	60bb      	str	r3, [r7, #8]
 80017c8:	4b28      	ldr	r3, [pc, #160]	; (800186c <SystemClock_Config+0xcc>)
 80017ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017cc:	4a27      	ldr	r2, [pc, #156]	; (800186c <SystemClock_Config+0xcc>)
 80017ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d2:	6413      	str	r3, [r2, #64]	; 0x40
 80017d4:	4b25      	ldr	r3, [pc, #148]	; (800186c <SystemClock_Config+0xcc>)
 80017d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017dc:	60bb      	str	r3, [r7, #8]
 80017de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80017e0:	2300      	movs	r3, #0
 80017e2:	607b      	str	r3, [r7, #4]
 80017e4:	4b22      	ldr	r3, [pc, #136]	; (8001870 <SystemClock_Config+0xd0>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80017ec:	4a20      	ldr	r2, [pc, #128]	; (8001870 <SystemClock_Config+0xd0>)
 80017ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017f2:	6013      	str	r3, [r2, #0]
 80017f4:	4b1e      	ldr	r3, [pc, #120]	; (8001870 <SystemClock_Config+0xd0>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017fc:	607b      	str	r3, [r7, #4]
 80017fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001800:	2302      	movs	r3, #2
 8001802:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001804:	2301      	movs	r3, #1
 8001806:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001808:	2310      	movs	r3, #16
 800180a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800180c:	2302      	movs	r3, #2
 800180e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001810:	2300      	movs	r3, #0
 8001812:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001814:	2308      	movs	r3, #8
 8001816:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8001818:	2340      	movs	r3, #64	; 0x40
 800181a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800181c:	2302      	movs	r3, #2
 800181e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001820:	2307      	movs	r3, #7
 8001822:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001824:	f107 0320 	add.w	r3, r7, #32
 8001828:	4618      	mov	r0, r3
 800182a:	f005 fbeb 	bl	8007004 <HAL_RCC_OscConfig>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001834:	f000 f8cc 	bl	80019d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001838:	230f      	movs	r3, #15
 800183a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800183c:	2302      	movs	r3, #2
 800183e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8001840:	2390      	movs	r3, #144	; 0x90
 8001842:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001844:	2300      	movs	r3, #0
 8001846:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001848:	2300      	movs	r3, #0
 800184a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800184c:	f107 030c 	add.w	r3, r7, #12
 8001850:	2100      	movs	r1, #0
 8001852:	4618      	mov	r0, r3
 8001854:	f005 fe4e 	bl	80074f4 <HAL_RCC_ClockConfig>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800185e:	f000 f8b7 	bl	80019d0 <Error_Handler>
  }
}
 8001862:	bf00      	nop
 8001864:	3750      	adds	r7, #80	; 0x50
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40023800 	.word	0x40023800
 8001870:	40007000 	.word	0x40007000

08001874 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

/******************************* CONVERSION DONE ISR *******************************/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
		if(!max_flag && !temp_flag)
 800187c:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <HAL_ADC_ConvCpltCallback+0x2c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d106      	bne.n	8001892 <HAL_ADC_ConvCpltCallback+0x1e>
 8001884:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <HAL_ADC_ConvCpltCallback+0x30>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d102      	bne.n	8001892 <HAL_ADC_ConvCpltCallback+0x1e>
			steinharthart_flag = 1;
 800188c:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <HAL_ADC_ConvCpltCallback+0x34>)
 800188e:	2201      	movs	r2, #1
 8001890:	601a      	str	r2, [r3, #0]
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	2000030c 	.word	0x2000030c
 80018a4:	20000310 	.word	0x20000310
 80018a8:	20000308 	.word	0x20000308

080018ac <HAL_GPIO_EXTI_Callback>:
/******************************* CONVERSION DONE ISR *******************************/


/******************************* BUTTON ISR *******************************/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == max_button_Pin){
 80018b6:	88fb      	ldrh	r3, [r7, #6]
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d10e      	bne.n	80018da <HAL_GPIO_EXTI_Callback+0x2e>
		steinharthart_flag = 0;
 80018bc:	4b13      	ldr	r3, [pc, #76]	; (800190c <HAL_GPIO_EXTI_Callback+0x60>)
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
		temp_flag = 0;
 80018c2:	4b13      	ldr	r3, [pc, #76]	; (8001910 <HAL_GPIO_EXTI_Callback+0x64>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
		max_flag = 1;
 80018c8:	4b12      	ldr	r3, [pc, #72]	; (8001914 <HAL_GPIO_EXTI_Callback+0x68>)
 80018ca:	2201      	movs	r2, #1
 80018cc:	601a      	str	r2, [r3, #0]
		time_elapsed_flag = 0;
 80018ce:	4b12      	ldr	r3, [pc, #72]	; (8001918 <HAL_GPIO_EXTI_Callback+0x6c>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
		monitoring_flag = 0;
 80018d4:	4b11      	ldr	r3, [pc, #68]	; (800191c <HAL_GPIO_EXTI_Callback+0x70>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
	  }
    if(GPIO_Pin == temp_button_Pin){
 80018da:	88fb      	ldrh	r3, [r7, #6]
 80018dc:	2b08      	cmp	r3, #8
 80018de:	d10e      	bne.n	80018fe <HAL_GPIO_EXTI_Callback+0x52>
		steinharthart_flag = 0;
 80018e0:	4b0a      	ldr	r3, [pc, #40]	; (800190c <HAL_GPIO_EXTI_Callback+0x60>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
		temp_flag = 1;
 80018e6:	4b0a      	ldr	r3, [pc, #40]	; (8001910 <HAL_GPIO_EXTI_Callback+0x64>)
 80018e8:	2201      	movs	r2, #1
 80018ea:	601a      	str	r2, [r3, #0]
		max_flag = 0;
 80018ec:	4b09      	ldr	r3, [pc, #36]	; (8001914 <HAL_GPIO_EXTI_Callback+0x68>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
		time_elapsed_flag = 0;
 80018f2:	4b09      	ldr	r3, [pc, #36]	; (8001918 <HAL_GPIO_EXTI_Callback+0x6c>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
		monitoring_flag = 0;
 80018f8:	4b08      	ldr	r3, [pc, #32]	; (800191c <HAL_GPIO_EXTI_Callback+0x70>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
    }
}
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	20000308 	.word	0x20000308
 8001910:	20000310 	.word	0x20000310
 8001914:	2000030c 	.word	0x2000030c
 8001918:	20000318 	.word	0x20000318
 800191c:	20000314 	.word	0x20000314

08001920 <HAL_TIM_PeriodElapsedCallback>:
/******************************* BUTTON ISR *******************************/


/******************************* TIMER ELAPSED ISR *******************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
	if(htim == &htim10){
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4a22      	ldr	r2, [pc, #136]	; (80019b4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d10d      	bne.n	800194c <HAL_TIM_PeriodElapsedCallback+0x2c>
		if(count == 1){
 8001930:	4b21      	ldr	r3, [pc, #132]	; (80019b8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d106      	bne.n	8001946 <HAL_TIM_PeriodElapsedCallback+0x26>
			time_elapsed_flag = 1;
 8001938:	4b20      	ldr	r3, [pc, #128]	; (80019bc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800193a:	2201      	movs	r2, #1
 800193c:	601a      	str	r2, [r3, #0]
			count = 0;
 800193e:	4b1e      	ldr	r3, [pc, #120]	; (80019b8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	e002      	b.n	800194c <HAL_TIM_PeriodElapsedCallback+0x2c>
		}
		else{
			count = 1;
 8001946:	4b1c      	ldr	r3, [pc, #112]	; (80019b8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001948:	2201      	movs	r2, #1
 800194a:	601a      	str	r2, [r3, #0]
		}
	}
	if(htim == &htim11){
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4a1c      	ldr	r2, [pc, #112]	; (80019c0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d128      	bne.n	80019a6 <HAL_TIM_PeriodElapsedCallback+0x86>
		if (pwm_status_flag == 1){
 8001954:	4b1b      	ldr	r3, [pc, #108]	; (80019c4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d106      	bne.n	800196a <HAL_TIM_PeriodElapsedCallback+0x4a>
			pulse = (pulse + 4);
 800195c:	4b1a      	ldr	r3, [pc, #104]	; (80019c8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800195e:	881b      	ldrh	r3, [r3, #0]
 8001960:	3304      	adds	r3, #4
 8001962:	b29a      	uxth	r2, r3
 8001964:	4b18      	ldr	r3, [pc, #96]	; (80019c8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001966:	801a      	strh	r2, [r3, #0]
 8001968:	e005      	b.n	8001976 <HAL_TIM_PeriodElapsedCallback+0x56>
		}else{
			pulse = (pulse - 2);
 800196a:	4b17      	ldr	r3, [pc, #92]	; (80019c8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800196c:	881b      	ldrh	r3, [r3, #0]
 800196e:	3b02      	subs	r3, #2
 8001970:	b29a      	uxth	r2, r3
 8001972:	4b15      	ldr	r3, [pc, #84]	; (80019c8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001974:	801a      	strh	r2, [r3, #0]
		}
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulse);
 8001976:	4b14      	ldr	r3, [pc, #80]	; (80019c8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001978:	881a      	ldrh	r2, [r3, #0]
 800197a:	4b14      	ldr	r3, [pc, #80]	; (80019cc <HAL_TIM_PeriodElapsedCallback+0xac>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	635a      	str	r2, [r3, #52]	; 0x34
		if ( (pulse <= 0) || (pulse >= 1000))
 8001980:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001982:	881b      	ldrh	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d004      	beq.n	8001992 <HAL_TIM_PeriodElapsedCallback+0x72>
 8001988:	4b0f      	ldr	r3, [pc, #60]	; (80019c8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800198a:	881b      	ldrh	r3, [r3, #0]
 800198c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001990:	d309      	bcc.n	80019a6 <HAL_TIM_PeriodElapsedCallback+0x86>
			pwm_status_flag = !pwm_status_flag;
 8001992:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	bf0c      	ite	eq
 800199a:	2301      	moveq	r3, #1
 800199c:	2300      	movne	r3, #0
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	461a      	mov	r2, r3
 80019a2:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80019a4:	701a      	strb	r2, [r3, #0]
	}
}
 80019a6:	bf00      	nop
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	20001d5c 	.word	0x20001d5c
 80019b8:	20000320 	.word	0x20000320
 80019bc:	20000318 	.word	0x20000318
 80019c0:	20001da4 	.word	0x20001da4
 80019c4:	20000000 	.word	0x20000000
 80019c8:	20000330 	.word	0x20000330
 80019cc:	20001d14 	.word	0x20001d14

080019d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019d4:	b672      	cpsid	i
}
 80019d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019d8:	e7fe      	b.n	80019d8 <Error_Handler+0x8>

080019da <mfio>:
#include "MAX32664.h"

/*
 * This function allows to change the mode of the MFIO pin of the MAX32664 from an output pin to an input pin
 */
void mfio(MAX32664* max32664){
 80019da:	b580      	push	{r7, lr}
 80019dc:	b088      	sub	sp, #32
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e2:	f107 030c 	add.w	r3, r7, #12
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	605a      	str	r2, [r3, #4]
 80019ec:	609a      	str	r2, [r3, #8]
 80019ee:	60da      	str	r2, [r3, #12]
 80019f0:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin =max32664->mfio;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	885b      	ldrh	r3, [r3, #2]
 80019f6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019f8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019fc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019fe:	2301      	movs	r3, #1
 8001a00:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(max32664->mfio_gpio, &GPIO_InitStruct);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f107 020c 	add.w	r2, r7, #12
 8001a0a:	4611      	mov	r1, r2
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f003 fbe1 	bl	80051d4 <HAL_GPIO_Init>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a12:	2028      	movs	r0, #40	; 0x28
 8001a14:	f003 f853 	bl	8004abe <HAL_NVIC_EnableIRQ>
}
 8001a18:	bf00      	nop
 8001a1a:	3720      	adds	r7, #32
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <begin>:
 * The begin function allows to initialize the fields of the MAX32664 structure to non acceptable values.
 * Then, the device is started and initialized to application mode.
 * The function returns OK when all the operations are executed correctly,
 * instead it returns ERROR when the operations fail.
 */
uint8_t begin(MAX32664* sensor,I2C_HandleTypeDef *i2c_port, GPIO_TypeDef* reset_pin_gpio,GPIO_TypeDef* mfio_pin_gpio, uint16_t reset_pin, uint16_t mfio_pin){
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
 8001a2c:	603b      	str	r3, [r7, #0]

	sensor->reset = reset_pin;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	8b3a      	ldrh	r2, [r7, #24]
 8001a32:	801a      	strh	r2, [r3, #0]
	sensor->mfio = mfio_pin;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	8bba      	ldrh	r2, [r7, #28]
 8001a38:	805a      	strh	r2, [r3, #2]
	sensor->reset_gpio = reset_pin_gpio;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	605a      	str	r2, [r3, #4]
	sensor->mfio_gpio = mfio_pin_gpio;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	609a      	str	r2, [r3, #8]
	sensor->i2c_port = i2c_port;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	68ba      	ldr	r2, [r7, #8]
 8001a4a:	60da      	str	r2, [r3, #12]
	sensor->infrared_led = -1;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a52:	611a      	str	r2, [r3, #16]
	sensor->red_led = -1;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a5a:	615a      	str	r2, [r3, #20]
	sensor->heart_rate = -1;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a62:	831a      	strh	r2, [r3, #24]
	sensor->confidence = -1;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	22ff      	movs	r2, #255	; 0xff
 8001a68:	769a      	strb	r2, [r3, #26]
	sensor->oxygen = -1;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a70:	839a      	strh	r2, [r3, #28]
	sensor->status = -1;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	22ff      	movs	r2, #255	; 0xff
 8001a76:	779a      	strb	r2, [r3, #30]
	sensor->algorithm_state = -1;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	22ff      	movs	r2, #255	; 0xff
 8001a7c:	f883 2020 	strb.w	r2, [r3, #32]
	sensor->algorithm_status = -1;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	22ff      	movs	r2, #255	; 0xff
 8001a84:	77da      	strb	r2, [r3, #31]
	sensor->ib_interval = -1;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a8c:	845a      	strh	r2, [r3, #34]	; 0x22
	sensor->mode = -1;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	22ff      	movs	r2, #255	; 0xff
 8001a92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
/*
	char msg1[]="structOK";
	HAL_UART_Transmit(&huart2, (uint8_t*)msg1, 8, HAL_MAX_DELAY);
*/
	HAL_GPIO_WritePin(sensor->mfio_gpio, sensor->mfio, GPIO_PIN_SET);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	6898      	ldr	r0, [r3, #8]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	885b      	ldrh	r3, [r3, #2]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	f003 fd1b 	bl	80054dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(sensor->reset_gpio, sensor->reset, GPIO_PIN_RESET);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	6858      	ldr	r0, [r3, #4]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	881b      	ldrh	r3, [r3, #0]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	f003 fd13 	bl	80054dc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001ab6:	200a      	movs	r0, #10
 8001ab8:	f002 f9da 	bl	8003e70 <HAL_Delay>
	HAL_GPIO_WritePin(sensor->reset_gpio, sensor->reset, GPIO_PIN_SET);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6858      	ldr	r0, [r3, #4]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	881b      	ldrh	r3, [r3, #0]
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	f003 fd08 	bl	80054dc <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8001acc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ad0:	f002 f9ce 	bl	8003e70 <HAL_Delay>
	mfio(sensor);
 8001ad4:	68f8      	ldr	r0, [r7, #12]
 8001ad6:	f7ff ff80 	bl	80019da <mfio>

	/*char msg2[]="pinOK";
	HAL_UART_Transmit(&huart2, (uint8_t*)msg2, 5, HAL_MAX_DELAY);
*/
	sensor->mode = get_device_mode(sensor);
 8001ada:	68f8      	ldr	r0, [r7, #12]
 8001adc:	f000 f8e5 	bl	8001caa <get_device_mode>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
*/
	//HAL_UART_Transmit(&huart2, (uint8_t*)sensor->mode, strlen(sensor->mode), HAL_MAX_DELAY);
	//HAL_UART_Transmit(&huart2, (uint8_t*)sensor->status, strlen(sensor->status), HAL_MAX_DELAY);
	//sensor -> status = read_status(sensor);

	if((sensor->status == SUCCESS) & (sensor->mode == APPLICATION_MODE)){
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	7f9a      	ldrb	r2, [r3, #30]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001af4:	4313      	orrs	r3, r2
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d101      	bne.n	8001b00 <begin+0xe0>
		return OK;}
 8001afc:	2300      	movs	r3, #0
 8001afe:	e000      	b.n	8001b02 <begin+0xe2>
	else{



		return ERROR;}
 8001b00:	23ff      	movs	r3, #255	; 0xff
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <read_status>:
 * should be SUCCESS.
 * If the operations performed before the call to this functions have failed, then the status field will reflect the error
 * occurred.
 */

uint8_t read_status(MAX32664* max32664){
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b084      	sub	sp, #16
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
	uint8_t FAMILY_BYTE = 0x00;
 8001b12:	2300      	movs	r3, #0
 8001b14:	73fb      	strb	r3, [r7, #15]
	uint8_t INDEX_BYTE = 0x00;
 8001b16:	2300      	movs	r3, #0
 8001b18:	73bb      	strb	r3, [r7, #14]


	read(max32664, FAMILY_BYTE, INDEX_BYTE);
 8001b1a:	7bba      	ldrb	r2, [r7, #14]
 8001b1c:	7bfb      	ldrb	r3, [r7, #15]
 8001b1e:	4619      	mov	r1, r3
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f000 f87f 	bl	8001c24 <read>
	if(max32664->status != SUCCESS){
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	7f9b      	ldrb	r3, [r3, #30]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <read_status+0x28>
		//char msg3[]="MAMMT";
		//HAL_UART_Transmit(&huart2, (uint8_t*)msg3, 5, HAL_MAX_DELAY);
		return ERROR;
 8001b2e:	23ff      	movs	r3, #255	; 0xff
 8001b30:	e000      	b.n	8001b34 <read_status+0x2a>
	}

	return OK;
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3710      	adds	r7, #16
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <write>:
/*
 * The write function allows to write in the specific memory location, the necessary command.
 * After the operation is executed, it is necessary to read the status of the MAX32664 to check if the command
 * was executed correctly.
 */
uint8_t write(MAX32664 *max32664, uint8_t family_byte, uint8_t index_byte, uint8_t write_byte){
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af02      	add	r7, sp, #8
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	4608      	mov	r0, r1
 8001b46:	4611      	mov	r1, r2
 8001b48:	461a      	mov	r2, r3
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	70fb      	strb	r3, [r7, #3]
 8001b4e:	460b      	mov	r3, r1
 8001b50:	70bb      	strb	r3, [r7, #2]
 8001b52:	4613      	mov	r3, r2
 8001b54:	707b      	strb	r3, [r7, #1]
	uint8_t array[] = {-1,-1,-1};
 8001b56:	4a15      	ldr	r2, [pc, #84]	; (8001bac <write+0x70>)
 8001b58:	f107 030c 	add.w	r3, r7, #12
 8001b5c:	6812      	ldr	r2, [r2, #0]
 8001b5e:	4611      	mov	r1, r2
 8001b60:	8019      	strh	r1, [r3, #0]
 8001b62:	3302      	adds	r3, #2
 8001b64:	0c12      	lsrs	r2, r2, #16
 8001b66:	701a      	strb	r2, [r3, #0]
	array[0]=family_byte;
 8001b68:	78fb      	ldrb	r3, [r7, #3]
 8001b6a:	733b      	strb	r3, [r7, #12]
	array[1]= index_byte;
 8001b6c:	78bb      	ldrb	r3, [r7, #2]
 8001b6e:	737b      	strb	r3, [r7, #13]
	array[2] = write_byte;
 8001b70:	787b      	ldrb	r3, [r7, #1]
 8001b72:	73bb      	strb	r3, [r7, #14]

	if(HAL_I2C_Master_Transmit(max32664->i2c_port, MAX32664_I2C_WriteAddress, array, 3, HAL_MAX_DELAY) != HAL_OK)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	68d8      	ldr	r0, [r3, #12]
 8001b78:	f107 020c 	add.w	r2, r7, #12
 8001b7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b80:	9300      	str	r3, [sp, #0]
 8001b82:	2303      	movs	r3, #3
 8001b84:	21aa      	movs	r1, #170	; 0xaa
 8001b86:	f003 fe1f 	bl	80057c8 <HAL_I2C_Master_Transmit>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <write+0x58>
		return ERROR;
 8001b90:	23ff      	movs	r3, #255	; 0xff
 8001b92:	e006      	b.n	8001ba2 <write+0x66>

	HAL_Delay(CMD_DELAY);
 8001b94:	2006      	movs	r0, #6
 8001b96:	f002 f96b 	bl	8003e70 <HAL_Delay>

	return read_status(max32664);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7ff ffb5 	bl	8001b0a <read_status>
 8001ba0:	4603      	mov	r3, r0

}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	0800dfd8 	.word	0x0800dfd8

08001bb0 <enable_write>:
 * This function is needed to enable the MAX30101 sensor and to enable the algorithm that compute the necessary values
 * to read the blood oxygenation nad heart beat of the patient.
 * After the operation is executed, it is necessary to read the status of the MAX32664 to check if the command
 * was executed correctly.
 */
uint8_t enable_write(MAX32664 *max32664, uint8_t family_byte, uint8_t index_byte, uint8_t write_byte){
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af02      	add	r7, sp, #8
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	4608      	mov	r0, r1
 8001bba:	4611      	mov	r1, r2
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	70fb      	strb	r3, [r7, #3]
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	70bb      	strb	r3, [r7, #2]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	707b      	strb	r3, [r7, #1]
	uint8_t array[] = {-1,-1,-1};
 8001bca:	4a15      	ldr	r2, [pc, #84]	; (8001c20 <enable_write+0x70>)
 8001bcc:	f107 030c 	add.w	r3, r7, #12
 8001bd0:	6812      	ldr	r2, [r2, #0]
 8001bd2:	4611      	mov	r1, r2
 8001bd4:	8019      	strh	r1, [r3, #0]
 8001bd6:	3302      	adds	r3, #2
 8001bd8:	0c12      	lsrs	r2, r2, #16
 8001bda:	701a      	strb	r2, [r3, #0]
	array[0]=family_byte;
 8001bdc:	78fb      	ldrb	r3, [r7, #3]
 8001bde:	733b      	strb	r3, [r7, #12]
	array[1]= index_byte;
 8001be0:	78bb      	ldrb	r3, [r7, #2]
 8001be2:	737b      	strb	r3, [r7, #13]
	array[2] = write_byte;
 8001be4:	787b      	ldrb	r3, [r7, #1]
 8001be6:	73bb      	strb	r3, [r7, #14]

	if(HAL_I2C_Master_Transmit(max32664->i2c_port, MAX32664_I2C_WriteAddress, array, 3, HAL_MAX_DELAY) != HAL_OK)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68d8      	ldr	r0, [r3, #12]
 8001bec:	f107 020c 	add.w	r2, r7, #12
 8001bf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bf4:	9300      	str	r3, [sp, #0]
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	21aa      	movs	r1, #170	; 0xaa
 8001bfa:	f003 fde5 	bl	80057c8 <HAL_I2C_Master_Transmit>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <enable_write+0x58>
		return ERROR;
 8001c04:	23ff      	movs	r3, #255	; 0xff
 8001c06:	e006      	b.n	8001c16 <enable_write+0x66>

	HAL_Delay(CMD_DELAY_MAX30101);
 8001c08:	202d      	movs	r0, #45	; 0x2d
 8001c0a:	f002 f931 	bl	8003e70 <HAL_Delay>

	return read_status(max32664);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f7ff ff7b 	bl	8001b0a <read_status>
 8001c14:	4603      	mov	r3, r0

}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	0800dfd8 	.word	0x0800dfd8

08001c24 <read>:
/*
 * The read function allows to read the specific memory location.
 * After the operation is executed, it is necessary to read the status of the MAX32664 to check if the command
 * was executed correctly.
 */
uint8_t read(MAX32664 *max32664, uint8_t family_byte, uint8_t index_byte){
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af02      	add	r7, sp, #8
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	70fb      	strb	r3, [r7, #3]
 8001c30:	4613      	mov	r3, r2
 8001c32:	70bb      	strb	r3, [r7, #2]
	uint8_t address[] = {-1, -1};
 8001c34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c38:	81bb      	strh	r3, [r7, #12]
	uint8_t read[] ={-1, -1};
 8001c3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c3e:	813b      	strh	r3, [r7, #8]

	address[0]= family_byte;
 8001c40:	78fb      	ldrb	r3, [r7, #3]
 8001c42:	733b      	strb	r3, [r7, #12]
	address[1]= index_byte;
 8001c44:	78bb      	ldrb	r3, [r7, #2]
 8001c46:	737b      	strb	r3, [r7, #13]

	if(HAL_I2C_Master_Transmit(max32664->i2c_port, MAX32664_I2C_WriteAddress, address, 2, HAL_MAX_DELAY) != HAL_OK)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	68d8      	ldr	r0, [r3, #12]
 8001c4c:	f107 020c 	add.w	r2, r7, #12
 8001c50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c54:	9300      	str	r3, [sp, #0]
 8001c56:	2302      	movs	r3, #2
 8001c58:	21aa      	movs	r1, #170	; 0xaa
 8001c5a:	f003 fdb5 	bl	80057c8 <HAL_I2C_Master_Transmit>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <read+0x44>
		return ERROR;
 8001c64:	23ff      	movs	r3, #255	; 0xff
 8001c66:	e01c      	b.n	8001ca2 <read+0x7e>

	HAL_Delay(CMD_DELAY);
 8001c68:	2006      	movs	r0, #6
 8001c6a:	f002 f901 	bl	8003e70 <HAL_Delay>

	if(HAL_I2C_Master_Receive(max32664->i2c_port, MAX32664_I2C_ReadAddress, read, 2, HAL_MAX_DELAY) != HAL_OK)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	68d8      	ldr	r0, [r3, #12]
 8001c72:	f107 0208 	add.w	r2, r7, #8
 8001c76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c7a:	9300      	str	r3, [sp, #0]
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	21ab      	movs	r1, #171	; 0xab
 8001c80:	f003 fea0 	bl	80059c4 <HAL_I2C_Master_Receive>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <read+0x6a>
		return ERROR;
 8001c8a:	23ff      	movs	r3, #255	; 0xff
 8001c8c:	e009      	b.n	8001ca2 <read+0x7e>

	max32664->status = read[0];
 8001c8e:	7a3a      	ldrb	r2, [r7, #8]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	779a      	strb	r2, [r3, #30]

	if(max32664->status == SUCCESS)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	7f9b      	ldrb	r3, [r3, #30]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d101      	bne.n	8001ca0 <read+0x7c>
		return read[1];
 8001c9c:	7a7b      	ldrb	r3, [r7, #9]
 8001c9e:	e000      	b.n	8001ca2 <read+0x7e>
	else
		return ERROR;
 8001ca0:	23ff      	movs	r3, #255	; 0xff
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <get_device_mode>:
}

/*
 * This function allows to read the device mode of the MAX32664.
 */
uint8_t	get_device_mode(MAX32664 *max32664){
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b084      	sub	sp, #16
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]

	uint8_t FAMILY_BYTE = 0x02;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	73fb      	strb	r3, [r7, #15]
	uint8_t INDEX_BYTE = 0x00;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	73bb      	strb	r3, [r7, #14]

	max32664->mode = read(max32664, FAMILY_BYTE, INDEX_BYTE);
 8001cba:	7bba      	ldrb	r2, [r7, #14]
 8001cbc:	7bfb      	ldrb	r3, [r7, #15]
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f7ff ffaf 	bl	8001c24 <read>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	461a      	mov	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	return OK;
 8001cd0:	2300      	movs	r3, #0


}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <set_output_mode>:

/*
 * This function allows to set the output mode of the MAX32664. If the mode parameter is not an acceptable modality
 * then the function returns ERROR, otherwise it writes the command to the specified location.
 */
uint8_t set_output_mode(MAX32664 *max32664, uint8_t mode){
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b084      	sub	sp, #16
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	70fb      	strb	r3, [r7, #3]
	uint8_t FAMILY_BYTE = 0x10;
 8001ce6:	2310      	movs	r3, #16
 8001ce8:	73fb      	strb	r3, [r7, #15]
	uint8_t INDEX_BYTE = 0x00;
 8001cea:	2300      	movs	r3, #0
 8001cec:	73bb      	strb	r3, [r7, #14]

	if(mode > SENSOR_ALGORITHM_SAMPLE_COUNTER_BYTE)
 8001cee:	78fb      	ldrb	r3, [r7, #3]
 8001cf0:	2b07      	cmp	r3, #7
 8001cf2:	d901      	bls.n	8001cf8 <set_output_mode+0x1e>
		return ERR_INPUT_VALUE;
 8001cf4:	2304      	movs	r3, #4
 8001cf6:	e006      	b.n	8001d06 <set_output_mode+0x2c>

	return write(max32664, FAMILY_BYTE, INDEX_BYTE, mode);
 8001cf8:	78fb      	ldrb	r3, [r7, #3]
 8001cfa:	7bba      	ldrb	r2, [r7, #14]
 8001cfc:	7bf9      	ldrb	r1, [r7, #15]
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f7ff ff1c 	bl	8001b3c <write>
 8001d04:	4603      	mov	r3, r0

}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <MAX30101_enable>:
}

/*
 * This function allows to enable and disable the MAX30101 pulse oximeter and heart rate monitor sensor.
 */
uint8_t MAX30101_enable(MAX32664 *max32664, uint8_t enable){
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b084      	sub	sp, #16
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
 8001d16:	460b      	mov	r3, r1
 8001d18:	70fb      	strb	r3, [r7, #3]
	uint8_t FAMILY_BYTE = 0x44;
 8001d1a:	2344      	movs	r3, #68	; 0x44
 8001d1c:	73fb      	strb	r3, [r7, #15]
	uint8_t INDEX_BYTE = 0x03;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	73bb      	strb	r3, [r7, #14]

	if(enable == ENABLE)
 8001d22:	78fb      	ldrb	r3, [r7, #3]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d107      	bne.n	8001d38 <MAX30101_enable+0x2a>
		return enable_write(max32664, FAMILY_BYTE, INDEX_BYTE, ENABLE);
 8001d28:	7bba      	ldrb	r2, [r7, #14]
 8001d2a:	7bf9      	ldrb	r1, [r7, #15]
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f7ff ff3e 	bl	8001bb0 <enable_write>
 8001d34:	4603      	mov	r3, r0
 8001d36:	e006      	b.n	8001d46 <MAX30101_enable+0x38>
	else
		return enable_write(max32664, FAMILY_BYTE, INDEX_BYTE, DISABLE);
 8001d38:	7bba      	ldrb	r2, [r7, #14]
 8001d3a:	7bf9      	ldrb	r1, [r7, #15]
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f7ff ff36 	bl	8001bb0 <enable_write>
 8001d44:	4603      	mov	r3, r0

	return ERR_INPUT_VALUE;


}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <AGC_enable>:
}

/*
 * This function allows to enable and disable the Automatic Gain Control algorithm.
 */
uint8_t AGC_enable(MAX32664 *max32664, uint8_t enable){
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b084      	sub	sp, #16
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
 8001d56:	460b      	mov	r3, r1
 8001d58:	70fb      	strb	r3, [r7, #3]
	uint8_t FAMILY_BYTE = 0x52;
 8001d5a:	2352      	movs	r3, #82	; 0x52
 8001d5c:	73fb      	strb	r3, [r7, #15]
	uint8_t INDEX_BYTE = 0x00;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	73bb      	strb	r3, [r7, #14]

	if(enable == ENABLE)
 8001d62:	78fb      	ldrb	r3, [r7, #3]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d107      	bne.n	8001d78 <AGC_enable+0x2a>
		return enable_write(max32664, FAMILY_BYTE, INDEX_BYTE, ENABLE);
 8001d68:	7bba      	ldrb	r2, [r7, #14]
 8001d6a:	7bf9      	ldrb	r1, [r7, #15]
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f7ff ff1e 	bl	8001bb0 <enable_write>
 8001d74:	4603      	mov	r3, r0
 8001d76:	e006      	b.n	8001d86 <AGC_enable+0x38>
	else
		return enable_write(max32664, FAMILY_BYTE, INDEX_BYTE, DISABLE);
 8001d78:	7bba      	ldrb	r2, [r7, #14]
 8001d7a:	7bf9      	ldrb	r1, [r7, #15]
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7ff ff16 	bl	8001bb0 <enable_write>
 8001d84:	4603      	mov	r3, r0

	return ERR_INPUT_VALUE;

}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <MaximFast_enable>:
/*
 * This function allows to enable and disable the MaximFast algorithm.
 */
uint8_t MaximFast_enable(MAX32664 *max32664, uint8_t enable){
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b084      	sub	sp, #16
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
 8001d96:	460b      	mov	r3, r1
 8001d98:	70fb      	strb	r3, [r7, #3]

	uint8_t FAMILY_BYTE = 0x52;
 8001d9a:	2352      	movs	r3, #82	; 0x52
 8001d9c:	73fb      	strb	r3, [r7, #15]
	uint8_t INDEX_BYTE = 0x02;
 8001d9e:	2302      	movs	r3, #2
 8001da0:	73bb      	strb	r3, [r7, #14]

		if(enable == ENABLE)
 8001da2:	78fb      	ldrb	r3, [r7, #3]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d107      	bne.n	8001db8 <MaximFast_enable+0x2a>
			return enable_write(max32664, FAMILY_BYTE, INDEX_BYTE, ENABLE);
 8001da8:	7bba      	ldrb	r2, [r7, #14]
 8001daa:	7bf9      	ldrb	r1, [r7, #15]
 8001dac:	2301      	movs	r3, #1
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f7ff fefe 	bl	8001bb0 <enable_write>
 8001db4:	4603      	mov	r3, r0
 8001db6:	e006      	b.n	8001dc6 <MaximFast_enable+0x38>
		else
			return enable_write(max32664, FAMILY_BYTE, INDEX_BYTE, DISABLE);
 8001db8:	7bba      	ldrb	r2, [r7, #14]
 8001dba:	7bf9      	ldrb	r1, [r7, #15]
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7ff fef6 	bl	8001bb0 <enable_write>
 8001dc4:	4603      	mov	r3, r0

	return ERR_INPUT_VALUE;

}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <set_fifo_threshold>:

/*
 * This function allows to specify the number of remaining free slots in the MAX30101 FIFO that are used as a
 * threshold to launch an interrupt from the MFIO pin.
 */
uint8_t set_fifo_threshold(MAX32664 *max32664, uint8_t threshold){
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b084      	sub	sp, #16
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	70fb      	strb	r3, [r7, #3]
	uint8_t FAMILY_BYTE = 0x10;
 8001dda:	2310      	movs	r3, #16
 8001ddc:	73fb      	strb	r3, [r7, #15]
	uint8_t INDEX_BYTE = 0x01;
 8001dde:	2301      	movs	r3, #1
 8001de0:	73bb      	strb	r3, [r7, #14]

	return write(max32664, FAMILY_BYTE, INDEX_BYTE, threshold);
 8001de2:	78fb      	ldrb	r3, [r7, #3]
 8001de4:	7bba      	ldrb	r2, [r7, #14]
 8001de6:	7bf9      	ldrb	r1, [r7, #15]
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f7ff fea7 	bl	8001b3c <write>
 8001dee:	4603      	mov	r3, r0

}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3710      	adds	r7, #16
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <config_sensor>:
 * This function is necessary to configure the MAX32664 sensor to read the heart beat and blood oxygenation of the patient.
 * The SENSOR_ALGORITHM_DATA output mode allows to read from the MAX30101 FIFO both the raw values and the values computed
 * from the algorithms enabled on the MAX32664.
 */

uint8_t config_sensor(MAX32664 *max32664, uint8_t mode){
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	460b      	mov	r3, r1
 8001e02:	70fb      	strb	r3, [r7, #3]

	if(set_output_mode(max32664, SENSOR_ALGORITHM_DATA) !=  OK)
 8001e04:	2103      	movs	r1, #3
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f7ff ff67 	bl	8001cda <set_output_mode>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d002      	beq.n	8001e18 <config_sensor+0x20>
		return max32664->status;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	7f9b      	ldrb	r3, [r3, #30]
 8001e16:	e02d      	b.n	8001e74 <config_sensor+0x7c>

    if(set_fifo_threshold(max32664, 0x01) !=  OK)
 8001e18:	2101      	movs	r1, #1
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f7ff ffd7 	bl	8001dce <set_fifo_threshold>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d002      	beq.n	8001e2c <config_sensor+0x34>
    	return max32664->status;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	7f9b      	ldrb	r3, [r3, #30]
 8001e2a:	e023      	b.n	8001e74 <config_sensor+0x7c>

    if(AGC_enable(max32664, ENABLE) !=  OK)
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7ff ff8d 	bl	8001d4e <AGC_enable>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d002      	beq.n	8001e40 <config_sensor+0x48>
    	 return max32664->status;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	7f9b      	ldrb	r3, [r3, #30]
 8001e3e:	e019      	b.n	8001e74 <config_sensor+0x7c>

    if(MAX30101_enable(max32664, ENABLE) !=  OK)
 8001e40:	2101      	movs	r1, #1
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7ff ff63 	bl	8001d0e <MAX30101_enable>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d002      	beq.n	8001e54 <config_sensor+0x5c>
		return max32664->status;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	7f9b      	ldrb	r3, [r3, #30]
 8001e52:	e00f      	b.n	8001e74 <config_sensor+0x7c>

	if(MaximFast_enable(max32664, mode) !=  OK)
 8001e54:	78fb      	ldrb	r3, [r7, #3]
 8001e56:	4619      	mov	r1, r3
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f7ff ff98 	bl	8001d8e <MaximFast_enable>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d002      	beq.n	8001e6a <config_sensor+0x72>
		return max32664->status;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	7f9b      	ldrb	r3, [r3, #30]
 8001e68:	e004      	b.n	8001e74 <config_sensor+0x7c>

	HAL_Delay(1000);
 8001e6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e6e:	f001 ffff 	bl	8003e70 <HAL_Delay>

	return OK;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <read_sensor>:

/*
 * This function is used to read the samples from the MAX30101 sensor.
 */
uint8_t read_sensor(MAX32664 *max32664){
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b08e      	sub	sp, #56	; 0x38
 8001e80:	af02      	add	r7, sp, #8
 8001e82:	6078      	str	r0, [r7, #4]
	uint8_t FAMILY_BYTE = 0x12;
 8001e84:	2312      	movs	r3, #18
 8001e86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t INDEX_BYTE = 0x01;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t samples[32];

	uint8_t address[] = {-1, -1};
 8001e90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e94:	813b      	strh	r3, [r7, #8]

	address[0]= FAMILY_BYTE;
 8001e96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e9a:	723b      	strb	r3, [r7, #8]
	address[1]= INDEX_BYTE;
 8001e9c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001ea0:	727b      	strb	r3, [r7, #9]

	if(HAL_I2C_Master_Transmit(max32664->i2c_port, MAX32664_I2C_WriteAddress, address, 2, HAL_MAX_DELAY) != HAL_OK)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68d8      	ldr	r0, [r3, #12]
 8001ea6:	f107 0208 	add.w	r2, r7, #8
 8001eaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	21aa      	movs	r1, #170	; 0xaa
 8001eb4:	f003 fc88 	bl	80057c8 <HAL_I2C_Master_Transmit>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <read_sensor+0x46>
		return ERROR;
 8001ebe:	23ff      	movs	r3, #255	; 0xff
 8001ec0:	e085      	b.n	8001fce <read_sensor+0x152>
	if(HAL_I2C_Master_Receive(max32664->i2c_port,MAX32664_I2C_ReadAddress, samples, 32, HAL_MAX_DELAY) != OK)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	68d8      	ldr	r0, [r3, #12]
 8001ec6:	f107 020c 	add.w	r2, r7, #12
 8001eca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ece:	9300      	str	r3, [sp, #0]
 8001ed0:	2320      	movs	r3, #32
 8001ed2:	21ab      	movs	r1, #171	; 0xab
 8001ed4:	f003 fd76 	bl	80059c4 <HAL_I2C_Master_Receive>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <read_sensor+0x66>
		return ERROR;
 8001ede:	23ff      	movs	r3, #255	; 0xff
 8001ee0:	e075      	b.n	8001fce <read_sensor+0x152>


	/* Infrared raw value */
	max32664->infrared_led = (uint32_t)(samples[0] <<16);
 8001ee2:	7b3b      	ldrb	r3, [r7, #12]
 8001ee4:	041b      	lsls	r3, r3, #16
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	611a      	str	r2, [r3, #16]
	max32664->infrared_led |= (uint32_t)(samples[1] <<8);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	7b7a      	ldrb	r2, [r7, #13]
 8001ef2:	0212      	lsls	r2, r2, #8
 8001ef4:	431a      	orrs	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	611a      	str	r2, [r3, #16]
	max32664->infrared_led |= samples[2];
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	7bba      	ldrb	r2, [r7, #14]
 8001f00:	431a      	orrs	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	611a      	str	r2, [r3, #16]

	/* Red Led raw value */
	max32664->red_led = (uint32_t)(samples[3] <<16);
 8001f06:	7bfb      	ldrb	r3, [r7, #15]
 8001f08:	041b      	lsls	r3, r3, #16
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	615a      	str	r2, [r3, #20]
	max32664->red_led |= (uint32_t)(samples[4] <<8);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	695b      	ldr	r3, [r3, #20]
 8001f14:	7c3a      	ldrb	r2, [r7, #16]
 8001f16:	0212      	lsls	r2, r2, #8
 8001f18:	431a      	orrs	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	615a      	str	r2, [r3, #20]
	max32664->red_led |= samples[5];
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	7c7a      	ldrb	r2, [r7, #17]
 8001f24:	431a      	orrs	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	615a      	str	r2, [r3, #20]

	/* Values from samples [6:11] are values for leds that are not available on the MAX30101, so they're left empty.
	 * Value from sample [12] is a value for the empty accelerometer  */

	/* heart rate values */
	max32664->heart_rate = (uint16_t)(samples[13] << 8);
 8001f2a:	7e7b      	ldrb	r3, [r7, #25]
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	021b      	lsls	r3, r3, #8
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	831a      	strh	r2, [r3, #24]
	max32664->heart_rate |= (samples[14]);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	8b1a      	ldrh	r2, [r3, #24]
 8001f3a:	7ebb      	ldrb	r3, [r7, #26]
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	831a      	strh	r2, [r3, #24]
	max32664->heart_rate /= 10;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	8b1b      	ldrh	r3, [r3, #24]
 8001f4a:	4a23      	ldr	r2, [pc, #140]	; (8001fd8 <read_sensor+0x15c>)
 8001f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f50:	08db      	lsrs	r3, r3, #3
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	831a      	strh	r2, [r3, #24]

	/* confidence */
	max32664->confidence =(uint8_t) samples[15];
 8001f58:	7efa      	ldrb	r2, [r7, #27]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	769a      	strb	r2, [r3, #26]

	/* oxygen */
	max32664->oxygen = (uint16_t)(samples[16] <<8);
 8001f5e:	7f3b      	ldrb	r3, [r7, #28]
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	021b      	lsls	r3, r3, #8
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	839a      	strh	r2, [r3, #28]
	max32664->oxygen |= (samples[17]);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	8b9a      	ldrh	r2, [r3, #28]
 8001f6e:	7f7b      	ldrb	r3, [r7, #29]
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	4313      	orrs	r3, r2
 8001f74:	b29a      	uxth	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	839a      	strh	r2, [r3, #28]
	max32664->oxygen /= 10;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	8b9b      	ldrh	r3, [r3, #28]
 8001f7e:	4a16      	ldr	r2, [pc, #88]	; (8001fd8 <read_sensor+0x15c>)
 8001f80:	fba2 2303 	umull	r2, r3, r2, r3
 8001f84:	08db      	lsrs	r3, r3, #3
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	839a      	strh	r2, [r3, #28]

	/* algorithm state */
	max32664->algorithm_state = (uint8_t) samples[18];
 8001f8c:	7fba      	ldrb	r2, [r7, #30]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f883 2020 	strb.w	r2, [r3, #32]

	/* extension of the algorithm state */
	max32664->algorithm_status = (uint8_t) samples[19];
 8001f94:	7ffa      	ldrb	r2, [r7, #31]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	77da      	strb	r2, [r3, #31]

	/* interbeat interval */
	max32664->ib_interval = (uint16_t)(samples[20] << 8);
 8001f9a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	021b      	lsls	r3, r3, #8
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	845a      	strh	r2, [r3, #34]	; 0x22
	max32664->ib_interval |= (samples[21]);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8001fac:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	845a      	strh	r2, [r3, #34]	; 0x22
	max32664->ib_interval /= 1000;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001fbe:	4a07      	ldr	r2, [pc, #28]	; (8001fdc <read_sensor+0x160>)
 8001fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc4:	099b      	lsrs	r3, r3, #6
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	845a      	strh	r2, [r3, #34]	; 0x22

	return OK;
 8001fcc:	2300      	movs	r3, #0

}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3730      	adds	r7, #48	; 0x30
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	cccccccd 	.word	0xcccccccd
 8001fdc:	10624dd3 	.word	0x10624dd3

08001fe0 <max_init>:
/******************************* SETUP FUNCTIONS *******************************/
/*
 * This function calls the library functions to begin the sensor I2c communication and setting it into application mode,
 * moreover it also does the configuration steps to select the elaboration algorithm and the mode
 */
void max_init(){
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af02      	add	r7, sp, #8
	begin(&hr_sensor, &hi2c1, reset_gpio_GPIO_Port, mfio_gpio_GPIO_Port, reset_gpio_Pin, mfio_gpio_Pin);
 8001fe6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fea:	9301      	str	r3, [sp, #4]
 8001fec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	4b06      	ldr	r3, [pc, #24]	; (800200c <max_init+0x2c>)
 8001ff4:	4a05      	ldr	r2, [pc, #20]	; (800200c <max_init+0x2c>)
 8001ff6:	4906      	ldr	r1, [pc, #24]	; (8002010 <max_init+0x30>)
 8001ff8:	4806      	ldr	r0, [pc, #24]	; (8002014 <max_init+0x34>)
 8001ffa:	f7ff fd11 	bl	8001a20 <begin>
	config_sensor(&hr_sensor, ENABLE);
 8001ffe:	2101      	movs	r1, #1
 8002000:	4804      	ldr	r0, [pc, #16]	; (8002014 <max_init+0x34>)
 8002002:	f7ff fef9 	bl	8001df8 <config_sensor>
}
 8002006:	bf00      	nop
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40020000 	.word	0x40020000
 8002010:	200002b4 	.word	0x200002b4
 8002014:	20000334 	.word	0x20000334

08002018 <max_setup>:

/*
 * This function does a virtual setup by clearing flags statuses.
 * It stops the ADC conversion for temperature that would be unused and starts the 15 seconds timer for data gathering
 */
void max_setup(){
 8002018:	b5b0      	push	{r4, r5, r7, lr}
 800201a:	af00      	add	r7, sp, #0
	hr_index = 0;
 800201c:	4b25      	ldr	r3, [pc, #148]	; (80020b4 <max_setup+0x9c>)
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]
	ox_index = 0;
 8002022:	4b25      	ldr	r3, [pc, #148]	; (80020b8 <max_setup+0xa0>)
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
	zero_counter_hr = 0;
 8002028:	4b24      	ldr	r3, [pc, #144]	; (80020bc <max_setup+0xa4>)
 800202a:	2200      	movs	r2, #0
 800202c:	601a      	str	r2, [r3, #0]
	zero_counter_ox = 0;
 800202e:	4b24      	ldr	r3, [pc, #144]	; (80020c0 <max_setup+0xa8>)
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
	ssd1306_Clear();
 8002034:	f000 fddc 	bl	8002bf0 <ssd1306_Clear>
	ssd1306_print(5, 5, "Put the finger on ");
 8002038:	4a22      	ldr	r2, [pc, #136]	; (80020c4 <max_setup+0xac>)
 800203a:	2105      	movs	r1, #5
 800203c:	2005      	movs	r0, #5
 800203e:	f000 fde1 	bl	8002c04 <ssd1306_print>
	ssd1306_print(5, 15, "the pulse_ox ");
 8002042:	4a21      	ldr	r2, [pc, #132]	; (80020c8 <max_setup+0xb0>)
 8002044:	210f      	movs	r1, #15
 8002046:	2005      	movs	r0, #5
 8002048:	f000 fddc 	bl	8002c04 <ssd1306_print>
	ssd1306_print(5, 25, "sensor");
 800204c:	4a1f      	ldr	r2, [pc, #124]	; (80020cc <max_setup+0xb4>)
 800204e:	2119      	movs	r1, #25
 8002050:	2005      	movs	r0, #5
 8002052:	f000 fdd7 	bl	8002c04 <ssd1306_print>
	HAL_Delay(3000);
 8002056:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800205a:	f001 ff09 	bl	8003e70 <HAL_Delay>

	ssd1306_Clear();
 800205e:	f000 fdc7 	bl	8002bf0 <ssd1306_Clear>
	ssd1306_print(5,5, "Wait for 15 ");
 8002062:	4a1b      	ldr	r2, [pc, #108]	; (80020d0 <max_setup+0xb8>)
 8002064:	2105      	movs	r1, #5
 8002066:	2005      	movs	r0, #5
 8002068:	f000 fdcc 	bl	8002c04 <ssd1306_print>
	ssd1306_print(5, 15,"seconds");
 800206c:	4a19      	ldr	r2, [pc, #100]	; (80020d4 <max_setup+0xbc>)
 800206e:	210f      	movs	r1, #15
 8002070:	2005      	movs	r0, #5
 8002072:	f000 fdc7 	bl	8002c04 <ssd1306_print>
	strcpy(uart_string_max, "Heart rate and oxygen percentage measures running...\r\n");
 8002076:	4a18      	ldr	r2, [pc, #96]	; (80020d8 <max_setup+0xc0>)
 8002078:	4b18      	ldr	r3, [pc, #96]	; (80020dc <max_setup+0xc4>)
 800207a:	4614      	mov	r4, r2
 800207c:	461d      	mov	r5, r3
 800207e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002080:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002082:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002084:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002086:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002088:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800208a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800208e:	6020      	str	r0, [r4, #0]
 8002090:	3404      	adds	r4, #4
 8002092:	8021      	strh	r1, [r4, #0]
 8002094:	3402      	adds	r4, #2
 8002096:	0c0b      	lsrs	r3, r1, #16
 8002098:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)uart_string_max, strlen(uart_string_max), HAL_MAX_DELAY);
 800209a:	480f      	ldr	r0, [pc, #60]	; (80020d8 <max_setup+0xc0>)
 800209c:	f7fe f8a0 	bl	80001e0 <strlen>
 80020a0:	4603      	mov	r3, r0
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020a8:	490b      	ldr	r1, [pc, #44]	; (80020d8 <max_setup+0xc0>)
 80020aa:	480d      	ldr	r0, [pc, #52]	; (80020e0 <max_setup+0xc8>)
 80020ac:	f006 fd67 	bl	8008b7e <HAL_UART_Transmit>
}
 80020b0:	bf00      	nop
 80020b2:	bdb0      	pop	{r4, r5, r7, pc}
 80020b4:	2000035c 	.word	0x2000035c
 80020b8:	20000370 	.word	0x20000370
 80020bc:	20000360 	.word	0x20000360
 80020c0:	20000374 	.word	0x20000374
 80020c4:	0800dfdc 	.word	0x0800dfdc
 80020c8:	0800dff0 	.word	0x0800dff0
 80020cc:	0800e000 	.word	0x0800e000
 80020d0:	0800e008 	.word	0x0800e008
 80020d4:	0800e018 	.word	0x0800e018
 80020d8:	20001428 	.word	0x20001428
 80020dc:	0800e020 	.word	0x0800e020
 80020e0:	20001dec 	.word	0x20001dec

080020e4 <get_max>:
/******************************* UTILITY FUNCTIONS *******************************/
/*
 * This function calls the read_sensor to validate the hr_sensor structure fields.
 * The delay is necessary and set to 200 because the max_sensor has inside an analysis time of at least 40ms;
 */
void get_max(){
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
	res = read_sensor(&hr_sensor);
 80020e8:	4805      	ldr	r0, [pc, #20]	; (8002100 <get_max+0x1c>)
 80020ea:	f7ff fec7 	bl	8001e7c <read_sensor>
 80020ee:	4603      	mov	r3, r0
 80020f0:	461a      	mov	r2, r3
 80020f2:	4b04      	ldr	r3, [pc, #16]	; (8002104 <get_max+0x20>)
 80020f4:	701a      	strb	r2, [r3, #0]
	HAL_Delay(200);
 80020f6:	20c8      	movs	r0, #200	; 0xc8
 80020f8:	f001 feba 	bl	8003e70 <HAL_Delay>
}
 80020fc:	bf00      	nop
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	20000334 	.word	0x20000334
 8002104:	20000332 	.word	0x20000332

08002108 <hr_analysis>:
 * This functions checks the zero and null values percentages, if it is too high it returns an error,
 * otherwise it runs trough the buffer without considering the null values to calculate:
 * average, min, max, absolute uncertainty and relative uncertainty in percentage.
 * The return value is 2 when the measure fails, 1 when it results in anomalies and 0 when it is ok
 */
int hr_analysis(){
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
	sum_hr = 0;
 800210e:	4b56      	ldr	r3, [pc, #344]	; (8002268 <hr_analysis+0x160>)
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
	zero_perc_hr = ((float) zero_counter_hr / (hr_index + zero_counter_hr)) * 100;
 8002114:	4b55      	ldr	r3, [pc, #340]	; (800226c <hr_analysis+0x164>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	ee07 3a90 	vmov	s15, r3
 800211c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002120:	4b53      	ldr	r3, [pc, #332]	; (8002270 <hr_analysis+0x168>)
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	4b51      	ldr	r3, [pc, #324]	; (800226c <hr_analysis+0x164>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4413      	add	r3, r2
 800212a:	ee07 3a90 	vmov	s15, r3
 800212e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002132:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002136:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8002274 <hr_analysis+0x16c>
 800213a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800213e:	4b4e      	ldr	r3, [pc, #312]	; (8002278 <hr_analysis+0x170>)
 8002140:	edc3 7a00 	vstr	s15, [r3]
	if (zero_perc_hr > ZERO_THRESHOLD){
 8002144:	4b4c      	ldr	r3, [pc, #304]	; (8002278 <hr_analysis+0x170>)
 8002146:	edd3 7a00 	vldr	s15, [r3]
 800214a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800214e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002156:	dd01      	ble.n	800215c <hr_analysis+0x54>
	  return 2;
 8002158:	2302      	movs	r3, #2
 800215a:	e07e      	b.n	800225a <hr_analysis+0x152>
	}
	else{
	  min_hr = hr_buf[0];
 800215c:	4b47      	ldr	r3, [pc, #284]	; (800227c <hr_analysis+0x174>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a47      	ldr	r2, [pc, #284]	; (8002280 <hr_analysis+0x178>)
 8002162:	6013      	str	r3, [r2, #0]
	  max_hr = hr_buf[0];
 8002164:	4b45      	ldr	r3, [pc, #276]	; (800227c <hr_analysis+0x174>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a46      	ldr	r2, [pc, #280]	; (8002284 <hr_analysis+0x17c>)
 800216a:	6013      	str	r3, [r2, #0]
	  for(int j=0; j<hr_index;j++){
 800216c:	2300      	movs	r3, #0
 800216e:	607b      	str	r3, [r7, #4]
 8002170:	e027      	b.n	80021c2 <hr_analysis+0xba>
		  sum_hr += hr_buf[j];
 8002172:	4a42      	ldr	r2, [pc, #264]	; (800227c <hr_analysis+0x174>)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800217a:	4b3b      	ldr	r3, [pc, #236]	; (8002268 <hr_analysis+0x160>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4413      	add	r3, r2
 8002180:	4a39      	ldr	r2, [pc, #228]	; (8002268 <hr_analysis+0x160>)
 8002182:	6013      	str	r3, [r2, #0]
		  if(hr_buf[j] < min_hr)
 8002184:	4a3d      	ldr	r2, [pc, #244]	; (800227c <hr_analysis+0x174>)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800218c:	4b3c      	ldr	r3, [pc, #240]	; (8002280 <hr_analysis+0x178>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	429a      	cmp	r2, r3
 8002192:	da05      	bge.n	80021a0 <hr_analysis+0x98>
			  min_hr = hr_buf[j];
 8002194:	4a39      	ldr	r2, [pc, #228]	; (800227c <hr_analysis+0x174>)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800219c:	4a38      	ldr	r2, [pc, #224]	; (8002280 <hr_analysis+0x178>)
 800219e:	6013      	str	r3, [r2, #0]
		  if(hr_buf[j] > max_hr)
 80021a0:	4a36      	ldr	r2, [pc, #216]	; (800227c <hr_analysis+0x174>)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80021a8:	4b36      	ldr	r3, [pc, #216]	; (8002284 <hr_analysis+0x17c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	dd05      	ble.n	80021bc <hr_analysis+0xb4>
			  max_hr = hr_buf[j];
 80021b0:	4a32      	ldr	r2, [pc, #200]	; (800227c <hr_analysis+0x174>)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021b8:	4a32      	ldr	r2, [pc, #200]	; (8002284 <hr_analysis+0x17c>)
 80021ba:	6013      	str	r3, [r2, #0]
	  for(int j=0; j<hr_index;j++){
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3301      	adds	r3, #1
 80021c0:	607b      	str	r3, [r7, #4]
 80021c2:	4b2b      	ldr	r3, [pc, #172]	; (8002270 <hr_analysis+0x168>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	dbd2      	blt.n	8002172 <hr_analysis+0x6a>
		}
		mean = sum_hr/(hr_index + zero_counter_hr);
 80021cc:	4b26      	ldr	r3, [pc, #152]	; (8002268 <hr_analysis+0x160>)
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	4b27      	ldr	r3, [pc, #156]	; (8002270 <hr_analysis+0x168>)
 80021d2:	6819      	ldr	r1, [r3, #0]
 80021d4:	4b25      	ldr	r3, [pc, #148]	; (800226c <hr_analysis+0x164>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	440b      	add	r3, r1
 80021da:	fb92 f3f3 	sdiv	r3, r2, r3
 80021de:	ee07 3a90 	vmov	s15, r3
 80021e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021e6:	4b28      	ldr	r3, [pc, #160]	; (8002288 <hr_analysis+0x180>)
 80021e8:	edc3 7a00 	vstr	s15, [r3]
		absolute_uncertainty = (max_hr - min_hr)/2;
 80021ec:	4b25      	ldr	r3, [pc, #148]	; (8002284 <hr_analysis+0x17c>)
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	4b23      	ldr	r3, [pc, #140]	; (8002280 <hr_analysis+0x178>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	0fda      	lsrs	r2, r3, #31
 80021f8:	4413      	add	r3, r2
 80021fa:	105b      	asrs	r3, r3, #1
 80021fc:	ee07 3a90 	vmov	s15, r3
 8002200:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002204:	4b21      	ldr	r3, [pc, #132]	; (800228c <hr_analysis+0x184>)
 8002206:	edc3 7a00 	vstr	s15, [r3]
		relative_uncertainty = (absolute_uncertainty/mean)*100;
 800220a:	4b20      	ldr	r3, [pc, #128]	; (800228c <hr_analysis+0x184>)
 800220c:	edd3 6a00 	vldr	s13, [r3]
 8002210:	4b1d      	ldr	r3, [pc, #116]	; (8002288 <hr_analysis+0x180>)
 8002212:	ed93 7a00 	vldr	s14, [r3]
 8002216:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800221a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002274 <hr_analysis+0x16c>
 800221e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002222:	4b1b      	ldr	r3, [pc, #108]	; (8002290 <hr_analysis+0x188>)
 8002224:	edc3 7a00 	vstr	s15, [r3]
		if (mean < HR_TRESHOLD_LOW){
 8002228:	4b17      	ldr	r3, [pc, #92]	; (8002288 <hr_analysis+0x180>)
 800222a:	edd3 7a00 	vldr	s15, [r3]
 800222e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8002294 <hr_analysis+0x18c>
 8002232:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800223a:	d501      	bpl.n	8002240 <hr_analysis+0x138>
			return 1;
 800223c:	2301      	movs	r3, #1
 800223e:	e00c      	b.n	800225a <hr_analysis+0x152>
		}
		else if (mean > HR_TRESHOLD_HIGH){
 8002240:	4b11      	ldr	r3, [pc, #68]	; (8002288 <hr_analysis+0x180>)
 8002242:	edd3 7a00 	vldr	s15, [r3]
 8002246:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002274 <hr_analysis+0x16c>
 800224a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800224e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002252:	dd01      	ble.n	8002258 <hr_analysis+0x150>
			return 1;
 8002254:	2301      	movs	r3, #1
 8002256:	e000      	b.n	800225a <hr_analysis+0x152>
		}
		else{
			return 0;
 8002258:	2300      	movs	r3, #0
		}
	}
}
 800225a:	4618      	mov	r0, r3
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	20000364 	.word	0x20000364
 800226c:	20000360 	.word	0x20000360
 8002270:	2000035c 	.word	0x2000035c
 8002274:	42c80000 	.word	0x42c80000
 8002278:	20001324 	.word	0x20001324
 800227c:	20000384 	.word	0x20000384
 8002280:	20000368 	.word	0x20000368
 8002284:	2000036c 	.word	0x2000036c
 8002288:	2000132c 	.word	0x2000132c
 800228c:	20001330 	.word	0x20001330
 8002290:	20001334 	.word	0x20001334
 8002294:	42700000 	.word	0x42700000

08002298 <ox_analysis>:
 * This functions checks the zero and null values percentages, if it is too high it returns an error,
 * otherwise it runs trough the buffer without considering the null values to calculate:
 * average, min, max, absolute uncertainty and relative uncertainty in percentage.
 * The return value is 2 when the measure fails, 1 when it results in anomalies and 0 when it is ok
 */
int ox_analysis(){
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
	sum_ox = 0;
 800229e:	4b50      	ldr	r3, [pc, #320]	; (80023e0 <ox_analysis+0x148>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
	zero_perc_ox = ((float) zero_counter_ox / (ox_index + zero_counter_ox)) * 100;
 80022a4:	4b4f      	ldr	r3, [pc, #316]	; (80023e4 <ox_analysis+0x14c>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	ee07 3a90 	vmov	s15, r3
 80022ac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80022b0:	4b4d      	ldr	r3, [pc, #308]	; (80023e8 <ox_analysis+0x150>)
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	4b4b      	ldr	r3, [pc, #300]	; (80023e4 <ox_analysis+0x14c>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4413      	add	r3, r2
 80022ba:	ee07 3a90 	vmov	s15, r3
 80022be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022c6:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80023ec <ox_analysis+0x154>
 80022ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022ce:	4b48      	ldr	r3, [pc, #288]	; (80023f0 <ox_analysis+0x158>)
 80022d0:	edc3 7a00 	vstr	s15, [r3]
	if (zero_perc_ox > ZERO_THRESHOLD){
 80022d4:	4b46      	ldr	r3, [pc, #280]	; (80023f0 <ox_analysis+0x158>)
 80022d6:	edd3 7a00 	vldr	s15, [r3]
 80022da:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80022de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022e6:	dd01      	ble.n	80022ec <ox_analysis+0x54>
	  return 2;
 80022e8:	2302      	movs	r3, #2
 80022ea:	e072      	b.n	80023d2 <ox_analysis+0x13a>
	}
	else{
	  min_ox = ox_buf[0];
 80022ec:	4b41      	ldr	r3, [pc, #260]	; (80023f4 <ox_analysis+0x15c>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a41      	ldr	r2, [pc, #260]	; (80023f8 <ox_analysis+0x160>)
 80022f2:	6013      	str	r3, [r2, #0]
	  max_ox = ox_buf[0];
 80022f4:	4b3f      	ldr	r3, [pc, #252]	; (80023f4 <ox_analysis+0x15c>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a40      	ldr	r2, [pc, #256]	; (80023fc <ox_analysis+0x164>)
 80022fa:	6013      	str	r3, [r2, #0]
	  int j;
	  for(j=0; j<ox_index;j++){
 80022fc:	2300      	movs	r3, #0
 80022fe:	607b      	str	r3, [r7, #4]
 8002300:	e027      	b.n	8002352 <ox_analysis+0xba>
		  sum_ox += ox_buf[j];
 8002302:	4a3c      	ldr	r2, [pc, #240]	; (80023f4 <ox_analysis+0x15c>)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800230a:	4b35      	ldr	r3, [pc, #212]	; (80023e0 <ox_analysis+0x148>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4413      	add	r3, r2
 8002310:	4a33      	ldr	r2, [pc, #204]	; (80023e0 <ox_analysis+0x148>)
 8002312:	6013      	str	r3, [r2, #0]
		  if(ox_buf[j] < min_ox)
 8002314:	4a37      	ldr	r2, [pc, #220]	; (80023f4 <ox_analysis+0x15c>)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800231c:	4b36      	ldr	r3, [pc, #216]	; (80023f8 <ox_analysis+0x160>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	429a      	cmp	r2, r3
 8002322:	da05      	bge.n	8002330 <ox_analysis+0x98>
			  min_ox = ox_buf[j];
 8002324:	4a33      	ldr	r2, [pc, #204]	; (80023f4 <ox_analysis+0x15c>)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800232c:	4a32      	ldr	r2, [pc, #200]	; (80023f8 <ox_analysis+0x160>)
 800232e:	6013      	str	r3, [r2, #0]
		  if(ox_buf[j] > max_ox)
 8002330:	4a30      	ldr	r2, [pc, #192]	; (80023f4 <ox_analysis+0x15c>)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002338:	4b30      	ldr	r3, [pc, #192]	; (80023fc <ox_analysis+0x164>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	429a      	cmp	r2, r3
 800233e:	dd05      	ble.n	800234c <ox_analysis+0xb4>
			  max_ox = ox_buf[j];
 8002340:	4a2c      	ldr	r2, [pc, #176]	; (80023f4 <ox_analysis+0x15c>)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002348:	4a2c      	ldr	r2, [pc, #176]	; (80023fc <ox_analysis+0x164>)
 800234a:	6013      	str	r3, [r2, #0]
	  for(j=0; j<ox_index;j++){
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	3301      	adds	r3, #1
 8002350:	607b      	str	r3, [r7, #4]
 8002352:	4b25      	ldr	r3, [pc, #148]	; (80023e8 <ox_analysis+0x150>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	429a      	cmp	r2, r3
 800235a:	dbd2      	blt.n	8002302 <ox_analysis+0x6a>
	  }
	  mean = sum_ox/(ox_index + zero_counter_ox);
 800235c:	4b20      	ldr	r3, [pc, #128]	; (80023e0 <ox_analysis+0x148>)
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	4b21      	ldr	r3, [pc, #132]	; (80023e8 <ox_analysis+0x150>)
 8002362:	6819      	ldr	r1, [r3, #0]
 8002364:	4b1f      	ldr	r3, [pc, #124]	; (80023e4 <ox_analysis+0x14c>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	440b      	add	r3, r1
 800236a:	fb92 f3f3 	sdiv	r3, r2, r3
 800236e:	ee07 3a90 	vmov	s15, r3
 8002372:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002376:	4b22      	ldr	r3, [pc, #136]	; (8002400 <ox_analysis+0x168>)
 8002378:	edc3 7a00 	vstr	s15, [r3]
	  absolute_uncertainty = (max_ox - min_ox)/2;
 800237c:	4b1f      	ldr	r3, [pc, #124]	; (80023fc <ox_analysis+0x164>)
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	4b1d      	ldr	r3, [pc, #116]	; (80023f8 <ox_analysis+0x160>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	0fda      	lsrs	r2, r3, #31
 8002388:	4413      	add	r3, r2
 800238a:	105b      	asrs	r3, r3, #1
 800238c:	ee07 3a90 	vmov	s15, r3
 8002390:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002394:	4b1b      	ldr	r3, [pc, #108]	; (8002404 <ox_analysis+0x16c>)
 8002396:	edc3 7a00 	vstr	s15, [r3]
	  relative_uncertainty = (absolute_uncertainty/mean)*100;
 800239a:	4b1a      	ldr	r3, [pc, #104]	; (8002404 <ox_analysis+0x16c>)
 800239c:	edd3 6a00 	vldr	s13, [r3]
 80023a0:	4b17      	ldr	r3, [pc, #92]	; (8002400 <ox_analysis+0x168>)
 80023a2:	ed93 7a00 	vldr	s14, [r3]
 80023a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023aa:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80023ec <ox_analysis+0x154>
 80023ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023b2:	4b15      	ldr	r3, [pc, #84]	; (8002408 <ox_analysis+0x170>)
 80023b4:	edc3 7a00 	vstr	s15, [r3]
	  if (mean < OX_TRESHOLD){
 80023b8:	4b11      	ldr	r3, [pc, #68]	; (8002400 <ox_analysis+0x168>)
 80023ba:	edd3 7a00 	vldr	s15, [r3]
 80023be:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800240c <ox_analysis+0x174>
 80023c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ca:	d501      	bpl.n	80023d0 <ox_analysis+0x138>
		  return 1;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e000      	b.n	80023d2 <ox_analysis+0x13a>
	  }
	  else{
		  return 0;
 80023d0:	2300      	movs	r3, #0
	  }
	}
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	20000378 	.word	0x20000378
 80023e4:	20000374 	.word	0x20000374
 80023e8:	20000370 	.word	0x20000370
 80023ec:	42c80000 	.word	0x42c80000
 80023f0:	20001328 	.word	0x20001328
 80023f4:	20000b54 	.word	0x20000b54
 80023f8:	2000037c 	.word	0x2000037c
 80023fc:	20000380 	.word	0x20000380
 8002400:	2000132c 	.word	0x2000132c
 8002404:	20001330 	.word	0x20001330
 8002408:	20001334 	.word	0x20001334
 800240c:	42be0000 	.word	0x42be0000

08002410 <max_loop>:
 * This function loops for about 15 seconds gathering measurements and placing them into a buffer.
 * It also counts the number of zero or null values for both oxygen blood saturation and heart rate.
 * MAX_HR macro is necessary because touching the breakout board results in abnormous values.
 * CONFIDENCE macro is necessary to discard uncertain values from the sensor point of view.
 */
void max_loop(){
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
	read_sensor(&hr_sensor);
 8002414:	4821      	ldr	r0, [pc, #132]	; (800249c <max_loop+0x8c>)
 8002416:	f7ff fd31 	bl	8001e7c <read_sensor>
	HAL_Delay(100);
 800241a:	2064      	movs	r0, #100	; 0x64
 800241c:	f001 fd28 	bl	8003e70 <HAL_Delay>
	if (hr_sensor.heart_rate == 0 || hr_sensor.heart_rate >= MAX_HR || hr_sensor.confidence < CONFIDENCE){
 8002420:	4b1e      	ldr	r3, [pc, #120]	; (800249c <max_loop+0x8c>)
 8002422:	8b1b      	ldrh	r3, [r3, #24]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d007      	beq.n	8002438 <max_loop+0x28>
 8002428:	4b1c      	ldr	r3, [pc, #112]	; (800249c <max_loop+0x8c>)
 800242a:	8b1b      	ldrh	r3, [r3, #24]
 800242c:	2bc7      	cmp	r3, #199	; 0xc7
 800242e:	d803      	bhi.n	8002438 <max_loop+0x28>
 8002430:	4b1a      	ldr	r3, [pc, #104]	; (800249c <max_loop+0x8c>)
 8002432:	7e9b      	ldrb	r3, [r3, #26]
 8002434:	2b3b      	cmp	r3, #59	; 0x3b
 8002436:	d805      	bhi.n	8002444 <max_loop+0x34>
	  zero_counter_hr++;
 8002438:	4b19      	ldr	r3, [pc, #100]	; (80024a0 <max_loop+0x90>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	3301      	adds	r3, #1
 800243e:	4a18      	ldr	r2, [pc, #96]	; (80024a0 <max_loop+0x90>)
 8002440:	6013      	str	r3, [r2, #0]
 8002442:	e00c      	b.n	800245e <max_loop+0x4e>
	}
	else{
	  hr_buf[hr_index] = hr_sensor.heart_rate;
 8002444:	4b15      	ldr	r3, [pc, #84]	; (800249c <max_loop+0x8c>)
 8002446:	8b1a      	ldrh	r2, [r3, #24]
 8002448:	4b16      	ldr	r3, [pc, #88]	; (80024a4 <max_loop+0x94>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4611      	mov	r1, r2
 800244e:	4a16      	ldr	r2, [pc, #88]	; (80024a8 <max_loop+0x98>)
 8002450:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  hr_index++;
 8002454:	4b13      	ldr	r3, [pc, #76]	; (80024a4 <max_loop+0x94>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	3301      	adds	r3, #1
 800245a:	4a12      	ldr	r2, [pc, #72]	; (80024a4 <max_loop+0x94>)
 800245c:	6013      	str	r3, [r2, #0]
	}

	if (hr_sensor.oxygen == 0 || hr_sensor.oxygen > MAX_OX) {
 800245e:	4b0f      	ldr	r3, [pc, #60]	; (800249c <max_loop+0x8c>)
 8002460:	8b9b      	ldrh	r3, [r3, #28]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <max_loop+0x5e>
 8002466:	4b0d      	ldr	r3, [pc, #52]	; (800249c <max_loop+0x8c>)
 8002468:	8b9b      	ldrh	r3, [r3, #28]
 800246a:	2b64      	cmp	r3, #100	; 0x64
 800246c:	d905      	bls.n	800247a <max_loop+0x6a>
	  zero_counter_ox++;
 800246e:	4b0f      	ldr	r3, [pc, #60]	; (80024ac <max_loop+0x9c>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	3301      	adds	r3, #1
 8002474:	4a0d      	ldr	r2, [pc, #52]	; (80024ac <max_loop+0x9c>)
 8002476:	6013      	str	r3, [r2, #0]
 8002478:	e00d      	b.n	8002496 <max_loop+0x86>
	}
	else{
		ox_buf[ox_index] = hr_sensor.oxygen;
 800247a:	4b08      	ldr	r3, [pc, #32]	; (800249c <max_loop+0x8c>)
 800247c:	8b9a      	ldrh	r2, [r3, #28]
 800247e:	4b0c      	ldr	r3, [pc, #48]	; (80024b0 <max_loop+0xa0>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4611      	mov	r1, r2
 8002484:	4a0b      	ldr	r2, [pc, #44]	; (80024b4 <max_loop+0xa4>)
 8002486:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		ox_index++;
 800248a:	4b09      	ldr	r3, [pc, #36]	; (80024b0 <max_loop+0xa0>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	3301      	adds	r3, #1
 8002490:	4a07      	ldr	r2, [pc, #28]	; (80024b0 <max_loop+0xa0>)
 8002492:	6013      	str	r3, [r2, #0]
	}
}
 8002494:	bf00      	nop
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	20000334 	.word	0x20000334
 80024a0:	20000360 	.word	0x20000360
 80024a4:	2000035c 	.word	0x2000035c
 80024a8:	20000384 	.word	0x20000384
 80024ac:	20000374 	.word	0x20000374
 80024b0:	20000370 	.word	0x20000370
 80024b4:	20000b54 	.word	0x20000b54

080024b8 <print_max>:
 * These functions are printing utilities that, based on the state and the routine they're called in, print:
 * values, alerts and indication for the patient.
 * Some of them also handle leds that represent the state.
 */

void print_max(){
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
	sprintf(hr_string, "HR: %u bpm, ", hr_sensor.heart_rate);
 80024bc:	4b1d      	ldr	r3, [pc, #116]	; (8002534 <print_max+0x7c>)
 80024be:	8b1b      	ldrh	r3, [r3, #24]
 80024c0:	461a      	mov	r2, r3
 80024c2:	491d      	ldr	r1, [pc, #116]	; (8002538 <print_max+0x80>)
 80024c4:	481d      	ldr	r0, [pc, #116]	; (800253c <print_max+0x84>)
 80024c6:	f007 fd8f 	bl	8009fe8 <siprintf>
	ssd1306_print(5, 27, hr_string);
 80024ca:	4a1c      	ldr	r2, [pc, #112]	; (800253c <print_max+0x84>)
 80024cc:	211b      	movs	r1, #27
 80024ce:	2005      	movs	r0, #5
 80024d0:	f000 fb98 	bl	8002c04 <ssd1306_print>
	sprintf(conf_string, "Confidence: %u\r\n", hr_sensor.confidence);
 80024d4:	4b17      	ldr	r3, [pc, #92]	; (8002534 <print_max+0x7c>)
 80024d6:	7e9b      	ldrb	r3, [r3, #26]
 80024d8:	461a      	mov	r2, r3
 80024da:	4919      	ldr	r1, [pc, #100]	; (8002540 <print_max+0x88>)
 80024dc:	4819      	ldr	r0, [pc, #100]	; (8002544 <print_max+0x8c>)
 80024de:	f007 fd83 	bl	8009fe8 <siprintf>
	strcat(hr_string, conf_string);
 80024e2:	4918      	ldr	r1, [pc, #96]	; (8002544 <print_max+0x8c>)
 80024e4:	4815      	ldr	r0, [pc, #84]	; (800253c <print_max+0x84>)
 80024e6:	f007 fd9f 	bl	800a028 <strcat>
	HAL_UART_Transmit(&huart2, (uint8_t*)hr_string, strlen(hr_string), HAL_MAX_DELAY);
 80024ea:	4814      	ldr	r0, [pc, #80]	; (800253c <print_max+0x84>)
 80024ec:	f7fd fe78 	bl	80001e0 <strlen>
 80024f0:	4603      	mov	r3, r0
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024f8:	4910      	ldr	r1, [pc, #64]	; (800253c <print_max+0x84>)
 80024fa:	4813      	ldr	r0, [pc, #76]	; (8002548 <print_max+0x90>)
 80024fc:	f006 fb3f 	bl	8008b7e <HAL_UART_Transmit>

	sprintf(ox_string, "OX: %u perc\r\n", hr_sensor.oxygen);
 8002500:	4b0c      	ldr	r3, [pc, #48]	; (8002534 <print_max+0x7c>)
 8002502:	8b9b      	ldrh	r3, [r3, #28]
 8002504:	461a      	mov	r2, r3
 8002506:	4911      	ldr	r1, [pc, #68]	; (800254c <print_max+0x94>)
 8002508:	4811      	ldr	r0, [pc, #68]	; (8002550 <print_max+0x98>)
 800250a:	f007 fd6d 	bl	8009fe8 <siprintf>
	ssd1306_print(5, 37, ox_string);
 800250e:	4a10      	ldr	r2, [pc, #64]	; (8002550 <print_max+0x98>)
 8002510:	2125      	movs	r1, #37	; 0x25
 8002512:	2005      	movs	r0, #5
 8002514:	f000 fb76 	bl	8002c04 <ssd1306_print>
	HAL_UART_Transmit(&huart2, (uint8_t*)ox_string, strlen(ox_string), HAL_MAX_DELAY);
 8002518:	480d      	ldr	r0, [pc, #52]	; (8002550 <print_max+0x98>)
 800251a:	f7fd fe61 	bl	80001e0 <strlen>
 800251e:	4603      	mov	r3, r0
 8002520:	b29a      	uxth	r2, r3
 8002522:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002526:	490a      	ldr	r1, [pc, #40]	; (8002550 <print_max+0x98>)
 8002528:	4807      	ldr	r0, [pc, #28]	; (8002548 <print_max+0x90>)
 800252a:	f006 fb28 	bl	8008b7e <HAL_UART_Transmit>
}
 800252e:	bf00      	nop
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	20000334 	.word	0x20000334
 8002538:	0800e058 	.word	0x0800e058
 800253c:	20001338 	.word	0x20001338
 8002540:	0800e068 	.word	0x0800e068
 8002544:	200013a0 	.word	0x200013a0
 8002548:	20001dec 	.word	0x20001dec
 800254c:	0800e07c 	.word	0x0800e07c
 8002550:	2000136c 	.word	0x2000136c

08002554 <print_hr_status>:

void print_hr_status(int hr_status){
 8002554:	b5b0      	push	{r4, r5, r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
	sprintf(m, "HR: %.2f bpm \r\n", mean);
 800255c:	4b73      	ldr	r3, [pc, #460]	; (800272c <print_hr_status+0x1d8>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4618      	mov	r0, r3
 8002562:	f7fd fff9 	bl	8000558 <__aeabi_f2d>
 8002566:	4602      	mov	r2, r0
 8002568:	460b      	mov	r3, r1
 800256a:	4971      	ldr	r1, [pc, #452]	; (8002730 <print_hr_status+0x1dc>)
 800256c:	4871      	ldr	r0, [pc, #452]	; (8002734 <print_hr_status+0x1e0>)
 800256e:	f007 fd3b 	bl	8009fe8 <siprintf>
	sprintf(au, "Error: %.2f perc \r\n\r\n", relative_uncertainty);
 8002572:	4b71      	ldr	r3, [pc, #452]	; (8002738 <print_hr_status+0x1e4>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4618      	mov	r0, r3
 8002578:	f7fd ffee 	bl	8000558 <__aeabi_f2d>
 800257c:	4602      	mov	r2, r0
 800257e:	460b      	mov	r3, r1
 8002580:	496e      	ldr	r1, [pc, #440]	; (800273c <print_hr_status+0x1e8>)
 8002582:	486f      	ldr	r0, [pc, #444]	; (8002740 <print_hr_status+0x1ec>)
 8002584:	f007 fd30 	bl	8009fe8 <siprintf>

	if(hr_status == 1){
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d150      	bne.n	8002630 <print_hr_status+0xdc>
		HAL_GPIO_WritePin(red_led_GPIO_Port, red_led_Pin, 1);
 800258e:	2201      	movs	r2, #1
 8002590:	2120      	movs	r1, #32
 8002592:	486c      	ldr	r0, [pc, #432]	; (8002744 <print_hr_status+0x1f0>)
 8002594:	f002 ffa2 	bl	80054dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green_led_GPIO_Port, green_led_Pin, 0);
 8002598:	2200      	movs	r2, #0
 800259a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800259e:	4869      	ldr	r0, [pc, #420]	; (8002744 <print_hr_status+0x1f0>)
 80025a0:	f002 ff9c 	bl	80054dc <HAL_GPIO_WritePin>

		ssd1306_Clear();
 80025a4:	f000 fb24 	bl	8002bf0 <ssd1306_Clear>
		ssd1306_print(5, 5, "Heart rate out ");
 80025a8:	4a67      	ldr	r2, [pc, #412]	; (8002748 <print_hr_status+0x1f4>)
 80025aa:	2105      	movs	r1, #5
 80025ac:	2005      	movs	r0, #5
 80025ae:	f000 fb29 	bl	8002c04 <ssd1306_print>
		ssd1306_print(5, 15, "of range!!!");
 80025b2:	4a66      	ldr	r2, [pc, #408]	; (800274c <print_hr_status+0x1f8>)
 80025b4:	210f      	movs	r1, #15
 80025b6:	2005      	movs	r0, #5
 80025b8:	f000 fb24 	bl	8002c04 <ssd1306_print>
		ssd1306_print(5, 35, m);
 80025bc:	4a5d      	ldr	r2, [pc, #372]	; (8002734 <print_hr_status+0x1e0>)
 80025be:	2123      	movs	r1, #35	; 0x23
 80025c0:	2005      	movs	r0, #5
 80025c2:	f000 fb1f 	bl	8002c04 <ssd1306_print>
		HAL_Delay(3000);
 80025c6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80025ca:	f001 fc51 	bl	8003e70 <HAL_Delay>
		strcpy(uart_string_max, "Heart rate out of range!!!\r\n");
 80025ce:	4a60      	ldr	r2, [pc, #384]	; (8002750 <print_hr_status+0x1fc>)
 80025d0:	4b60      	ldr	r3, [pc, #384]	; (8002754 <print_hr_status+0x200>)
 80025d2:	4614      	mov	r4, r2
 80025d4:	461d      	mov	r5, r3
 80025d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025da:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80025de:	c407      	stmia	r4!, {r0, r1, r2}
 80025e0:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)uart_string_max, strlen(uart_string_max), HAL_MAX_DELAY);
 80025e2:	485b      	ldr	r0, [pc, #364]	; (8002750 <print_hr_status+0x1fc>)
 80025e4:	f7fd fdfc 	bl	80001e0 <strlen>
 80025e8:	4603      	mov	r3, r0
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025f0:	4957      	ldr	r1, [pc, #348]	; (8002750 <print_hr_status+0x1fc>)
 80025f2:	4859      	ldr	r0, [pc, #356]	; (8002758 <print_hr_status+0x204>)
 80025f4:	f006 fac3 	bl	8008b7e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)m, strlen(m), HAL_MAX_DELAY);
 80025f8:	484e      	ldr	r0, [pc, #312]	; (8002734 <print_hr_status+0x1e0>)
 80025fa:	f7fd fdf1 	bl	80001e0 <strlen>
 80025fe:	4603      	mov	r3, r0
 8002600:	b29a      	uxth	r2, r3
 8002602:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002606:	494b      	ldr	r1, [pc, #300]	; (8002734 <print_hr_status+0x1e0>)
 8002608:	4853      	ldr	r0, [pc, #332]	; (8002758 <print_hr_status+0x204>)
 800260a:	f006 fab8 	bl	8008b7e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)au, strlen(au), HAL_MAX_DELAY);
 800260e:	484c      	ldr	r0, [pc, #304]	; (8002740 <print_hr_status+0x1ec>)
 8002610:	f7fd fde6 	bl	80001e0 <strlen>
 8002614:	4603      	mov	r3, r0
 8002616:	b29a      	uxth	r2, r3
 8002618:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800261c:	4948      	ldr	r1, [pc, #288]	; (8002740 <print_hr_status+0x1ec>)
 800261e:	484e      	ldr	r0, [pc, #312]	; (8002758 <print_hr_status+0x204>)
 8002620:	f006 faad 	bl	8008b7e <HAL_UART_Transmit>

		HAL_GPIO_WritePin(red_led_GPIO_Port, red_led_Pin, 0);
 8002624:	2200      	movs	r2, #0
 8002626:	2120      	movs	r1, #32
 8002628:	4846      	ldr	r0, [pc, #280]	; (8002744 <print_hr_status+0x1f0>)
 800262a:	f002 ff57 	bl	80054dc <HAL_GPIO_WritePin>
		HAL_UART_Transmit(&huart2, (uint8_t*)m, strlen(m), HAL_MAX_DELAY);
		HAL_UART_Transmit(&huart2, (uint8_t*)au, strlen(au), HAL_MAX_DELAY);

		HAL_GPIO_WritePin(green_led_GPIO_Port, green_led_Pin, 0);
	}
}
 800262e:	e079      	b.n	8002724 <print_hr_status+0x1d0>
	else if(hr_status == 2){
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2b02      	cmp	r3, #2
 8002634:	d12c      	bne.n	8002690 <print_hr_status+0x13c>
		ssd1306_Clear();
 8002636:	f000 fadb 	bl	8002bf0 <ssd1306_Clear>
		ssd1306_print(5, 15, "Hr measure failed");
 800263a:	4a48      	ldr	r2, [pc, #288]	; (800275c <print_hr_status+0x208>)
 800263c:	210f      	movs	r1, #15
 800263e:	2005      	movs	r0, #5
 8002640:	f000 fae0 	bl	8002c04 <ssd1306_print>
		ssd1306_print(5, 25, "New measure ");
 8002644:	4a46      	ldr	r2, [pc, #280]	; (8002760 <print_hr_status+0x20c>)
 8002646:	2119      	movs	r1, #25
 8002648:	2005      	movs	r0, #5
 800264a:	f000 fadb 	bl	8002c04 <ssd1306_print>
		ssd1306_print(5, 35, "running... ");
 800264e:	4a45      	ldr	r2, [pc, #276]	; (8002764 <print_hr_status+0x210>)
 8002650:	2123      	movs	r1, #35	; 0x23
 8002652:	2005      	movs	r0, #5
 8002654:	f000 fad6 	bl	8002c04 <ssd1306_print>
		HAL_Delay(3000);
 8002658:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800265c:	f001 fc08 	bl	8003e70 <HAL_Delay>
		strcpy(uart_string_max, "Heart rate measure failed\r\nNew measure running...\r\n");
 8002660:	4a3b      	ldr	r2, [pc, #236]	; (8002750 <print_hr_status+0x1fc>)
 8002662:	4b41      	ldr	r3, [pc, #260]	; (8002768 <print_hr_status+0x214>)
 8002664:	4614      	mov	r4, r2
 8002666:	461d      	mov	r5, r3
 8002668:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800266a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800266c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800266e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002670:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002672:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002674:	682b      	ldr	r3, [r5, #0]
 8002676:	6023      	str	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)uart_string_max, strlen(uart_string_max), HAL_MAX_DELAY);
 8002678:	4835      	ldr	r0, [pc, #212]	; (8002750 <print_hr_status+0x1fc>)
 800267a:	f7fd fdb1 	bl	80001e0 <strlen>
 800267e:	4603      	mov	r3, r0
 8002680:	b29a      	uxth	r2, r3
 8002682:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002686:	4932      	ldr	r1, [pc, #200]	; (8002750 <print_hr_status+0x1fc>)
 8002688:	4833      	ldr	r0, [pc, #204]	; (8002758 <print_hr_status+0x204>)
 800268a:	f006 fa78 	bl	8008b7e <HAL_UART_Transmit>
}
 800268e:	e049      	b.n	8002724 <print_hr_status+0x1d0>
		HAL_GPIO_WritePin(red_led_GPIO_Port, red_led_Pin, 0);
 8002690:	2200      	movs	r2, #0
 8002692:	2120      	movs	r1, #32
 8002694:	482b      	ldr	r0, [pc, #172]	; (8002744 <print_hr_status+0x1f0>)
 8002696:	f002 ff21 	bl	80054dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green_led_GPIO_Port, green_led_Pin, 1);
 800269a:	2201      	movs	r2, #1
 800269c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80026a0:	4828      	ldr	r0, [pc, #160]	; (8002744 <print_hr_status+0x1f0>)
 80026a2:	f002 ff1b 	bl	80054dc <HAL_GPIO_WritePin>
		ssd1306_Clear();
 80026a6:	f000 faa3 	bl	8002bf0 <ssd1306_Clear>
		ssd1306_print(5, 5, "Good heart rate");
 80026aa:	4a30      	ldr	r2, [pc, #192]	; (800276c <print_hr_status+0x218>)
 80026ac:	2105      	movs	r1, #5
 80026ae:	2005      	movs	r0, #5
 80026b0:	f000 faa8 	bl	8002c04 <ssd1306_print>
		ssd1306_print(5, 25, m);
 80026b4:	4a1f      	ldr	r2, [pc, #124]	; (8002734 <print_hr_status+0x1e0>)
 80026b6:	2119      	movs	r1, #25
 80026b8:	2005      	movs	r0, #5
 80026ba:	f000 faa3 	bl	8002c04 <ssd1306_print>
		HAL_Delay(3000);
 80026be:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80026c2:	f001 fbd5 	bl	8003e70 <HAL_Delay>
		strcpy(uart_string_max, "Good heart rate\r\n");
 80026c6:	4a22      	ldr	r2, [pc, #136]	; (8002750 <print_hr_status+0x1fc>)
 80026c8:	4b29      	ldr	r3, [pc, #164]	; (8002770 <print_hr_status+0x21c>)
 80026ca:	4614      	mov	r4, r2
 80026cc:	461d      	mov	r5, r3
 80026ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026d2:	682b      	ldr	r3, [r5, #0]
 80026d4:	8023      	strh	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)uart_string_max, strlen(uart_string_max), HAL_MAX_DELAY);
 80026d6:	481e      	ldr	r0, [pc, #120]	; (8002750 <print_hr_status+0x1fc>)
 80026d8:	f7fd fd82 	bl	80001e0 <strlen>
 80026dc:	4603      	mov	r3, r0
 80026de:	b29a      	uxth	r2, r3
 80026e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026e4:	491a      	ldr	r1, [pc, #104]	; (8002750 <print_hr_status+0x1fc>)
 80026e6:	481c      	ldr	r0, [pc, #112]	; (8002758 <print_hr_status+0x204>)
 80026e8:	f006 fa49 	bl	8008b7e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)m, strlen(m), HAL_MAX_DELAY);
 80026ec:	4811      	ldr	r0, [pc, #68]	; (8002734 <print_hr_status+0x1e0>)
 80026ee:	f7fd fd77 	bl	80001e0 <strlen>
 80026f2:	4603      	mov	r3, r0
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026fa:	490e      	ldr	r1, [pc, #56]	; (8002734 <print_hr_status+0x1e0>)
 80026fc:	4816      	ldr	r0, [pc, #88]	; (8002758 <print_hr_status+0x204>)
 80026fe:	f006 fa3e 	bl	8008b7e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)au, strlen(au), HAL_MAX_DELAY);
 8002702:	480f      	ldr	r0, [pc, #60]	; (8002740 <print_hr_status+0x1ec>)
 8002704:	f7fd fd6c 	bl	80001e0 <strlen>
 8002708:	4603      	mov	r3, r0
 800270a:	b29a      	uxth	r2, r3
 800270c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002710:	490b      	ldr	r1, [pc, #44]	; (8002740 <print_hr_status+0x1ec>)
 8002712:	4811      	ldr	r0, [pc, #68]	; (8002758 <print_hr_status+0x204>)
 8002714:	f006 fa33 	bl	8008b7e <HAL_UART_Transmit>
		HAL_GPIO_WritePin(green_led_GPIO_Port, green_led_Pin, 0);
 8002718:	2200      	movs	r2, #0
 800271a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800271e:	4809      	ldr	r0, [pc, #36]	; (8002744 <print_hr_status+0x1f0>)
 8002720:	f002 fedc 	bl	80054dc <HAL_GPIO_WritePin>
}
 8002724:	bf00      	nop
 8002726:	3708      	adds	r7, #8
 8002728:	46bd      	mov	sp, r7
 800272a:	bdb0      	pop	{r4, r5, r7, pc}
 800272c:	2000132c 	.word	0x2000132c
 8002730:	0800e08c 	.word	0x0800e08c
 8002734:	200013c0 	.word	0x200013c0
 8002738:	20001334 	.word	0x20001334
 800273c:	0800e09c 	.word	0x0800e09c
 8002740:	200013f4 	.word	0x200013f4
 8002744:	40020400 	.word	0x40020400
 8002748:	0800e0b4 	.word	0x0800e0b4
 800274c:	0800e0c4 	.word	0x0800e0c4
 8002750:	20001428 	.word	0x20001428
 8002754:	0800e0d0 	.word	0x0800e0d0
 8002758:	20001dec 	.word	0x20001dec
 800275c:	0800e0f0 	.word	0x0800e0f0
 8002760:	0800e104 	.word	0x0800e104
 8002764:	0800e114 	.word	0x0800e114
 8002768:	0800e120 	.word	0x0800e120
 800276c:	0800e154 	.word	0x0800e154
 8002770:	0800e164 	.word	0x0800e164

08002774 <print_ox_status>:

void print_ox_status(int ox_status){
 8002774:	b5b0      	push	{r4, r5, r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
	sprintf(m, "OX: %.2f perc \r\n", mean);
 800277c:	4b74      	ldr	r3, [pc, #464]	; (8002950 <print_ox_status+0x1dc>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4618      	mov	r0, r3
 8002782:	f7fd fee9 	bl	8000558 <__aeabi_f2d>
 8002786:	4602      	mov	r2, r0
 8002788:	460b      	mov	r3, r1
 800278a:	4972      	ldr	r1, [pc, #456]	; (8002954 <print_ox_status+0x1e0>)
 800278c:	4872      	ldr	r0, [pc, #456]	; (8002958 <print_ox_status+0x1e4>)
 800278e:	f007 fc2b 	bl	8009fe8 <siprintf>
	sprintf(au, "Error: %.2f perc \r\n\r\n", relative_uncertainty);
 8002792:	4b72      	ldr	r3, [pc, #456]	; (800295c <print_ox_status+0x1e8>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f7fd fede 	bl	8000558 <__aeabi_f2d>
 800279c:	4602      	mov	r2, r0
 800279e:	460b      	mov	r3, r1
 80027a0:	496f      	ldr	r1, [pc, #444]	; (8002960 <print_ox_status+0x1ec>)
 80027a2:	4870      	ldr	r0, [pc, #448]	; (8002964 <print_ox_status+0x1f0>)
 80027a4:	f007 fc20 	bl	8009fe8 <siprintf>
	if(ox_status == 1){
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d150      	bne.n	8002850 <print_ox_status+0xdc>
		HAL_GPIO_WritePin(red_led_GPIO_Port, red_led_Pin, 1);
 80027ae:	2201      	movs	r2, #1
 80027b0:	2120      	movs	r1, #32
 80027b2:	486d      	ldr	r0, [pc, #436]	; (8002968 <print_ox_status+0x1f4>)
 80027b4:	f002 fe92 	bl	80054dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green_led_GPIO_Port, green_led_Pin, 0);
 80027b8:	2200      	movs	r2, #0
 80027ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027be:	486a      	ldr	r0, [pc, #424]	; (8002968 <print_ox_status+0x1f4>)
 80027c0:	f002 fe8c 	bl	80054dc <HAL_GPIO_WritePin>

		ssd1306_Clear();
 80027c4:	f000 fa14 	bl	8002bf0 <ssd1306_Clear>
		ssd1306_print(5, 5, "Oxygen % out ");
 80027c8:	4a68      	ldr	r2, [pc, #416]	; (800296c <print_ox_status+0x1f8>)
 80027ca:	2105      	movs	r1, #5
 80027cc:	2005      	movs	r0, #5
 80027ce:	f000 fa19 	bl	8002c04 <ssd1306_print>
		ssd1306_print(5, 15, "of range!!!");
 80027d2:	4a67      	ldr	r2, [pc, #412]	; (8002970 <print_ox_status+0x1fc>)
 80027d4:	210f      	movs	r1, #15
 80027d6:	2005      	movs	r0, #5
 80027d8:	f000 fa14 	bl	8002c04 <ssd1306_print>
		ssd1306_print(5, 35, m);
 80027dc:	4a5e      	ldr	r2, [pc, #376]	; (8002958 <print_ox_status+0x1e4>)
 80027de:	2123      	movs	r1, #35	; 0x23
 80027e0:	2005      	movs	r0, #5
 80027e2:	f000 fa0f 	bl	8002c04 <ssd1306_print>
		HAL_Delay(3000);
 80027e6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80027ea:	f001 fb41 	bl	8003e70 <HAL_Delay>
		strcpy(uart_string_max, "Oxygen percentage out of range!!!\r\n");
 80027ee:	4a61      	ldr	r2, [pc, #388]	; (8002974 <print_ox_status+0x200>)
 80027f0:	4b61      	ldr	r3, [pc, #388]	; (8002978 <print_ox_status+0x204>)
 80027f2:	4614      	mov	r4, r2
 80027f4:	461d      	mov	r5, r3
 80027f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027fe:	682b      	ldr	r3, [r5, #0]
 8002800:	6023      	str	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)uart_string_max, strlen(uart_string_max), HAL_MAX_DELAY);
 8002802:	485c      	ldr	r0, [pc, #368]	; (8002974 <print_ox_status+0x200>)
 8002804:	f7fd fcec 	bl	80001e0 <strlen>
 8002808:	4603      	mov	r3, r0
 800280a:	b29a      	uxth	r2, r3
 800280c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002810:	4958      	ldr	r1, [pc, #352]	; (8002974 <print_ox_status+0x200>)
 8002812:	485a      	ldr	r0, [pc, #360]	; (800297c <print_ox_status+0x208>)
 8002814:	f006 f9b3 	bl	8008b7e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)m, strlen(m), HAL_MAX_DELAY);
 8002818:	484f      	ldr	r0, [pc, #316]	; (8002958 <print_ox_status+0x1e4>)
 800281a:	f7fd fce1 	bl	80001e0 <strlen>
 800281e:	4603      	mov	r3, r0
 8002820:	b29a      	uxth	r2, r3
 8002822:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002826:	494c      	ldr	r1, [pc, #304]	; (8002958 <print_ox_status+0x1e4>)
 8002828:	4854      	ldr	r0, [pc, #336]	; (800297c <print_ox_status+0x208>)
 800282a:	f006 f9a8 	bl	8008b7e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)au, strlen(au), HAL_MAX_DELAY);
 800282e:	484d      	ldr	r0, [pc, #308]	; (8002964 <print_ox_status+0x1f0>)
 8002830:	f7fd fcd6 	bl	80001e0 <strlen>
 8002834:	4603      	mov	r3, r0
 8002836:	b29a      	uxth	r2, r3
 8002838:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800283c:	4949      	ldr	r1, [pc, #292]	; (8002964 <print_ox_status+0x1f0>)
 800283e:	484f      	ldr	r0, [pc, #316]	; (800297c <print_ox_status+0x208>)
 8002840:	f006 f99d 	bl	8008b7e <HAL_UART_Transmit>

		HAL_GPIO_WritePin(red_led_GPIO_Port, red_led_Pin, 0);
 8002844:	2200      	movs	r2, #0
 8002846:	2120      	movs	r1, #32
 8002848:	4847      	ldr	r0, [pc, #284]	; (8002968 <print_ox_status+0x1f4>)
 800284a:	f002 fe47 	bl	80054dc <HAL_GPIO_WritePin>
		HAL_UART_Transmit(&huart2, (uint8_t*)m, strlen(m), HAL_MAX_DELAY);
		HAL_UART_Transmit(&huart2, (uint8_t*)au, strlen(au), HAL_MAX_DELAY);

		HAL_GPIO_WritePin(green_led_GPIO_Port, green_led_Pin, 0);
	}
}
 800284e:	e07b      	b.n	8002948 <print_ox_status+0x1d4>
	else if(ox_status == 2){
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b02      	cmp	r3, #2
 8002854:	d12c      	bne.n	80028b0 <print_ox_status+0x13c>
		ssd1306_Clear();
 8002856:	f000 f9cb 	bl	8002bf0 <ssd1306_Clear>
		ssd1306_print(5, 15, "Ox measure failed");
 800285a:	4a49      	ldr	r2, [pc, #292]	; (8002980 <print_ox_status+0x20c>)
 800285c:	210f      	movs	r1, #15
 800285e:	2005      	movs	r0, #5
 8002860:	f000 f9d0 	bl	8002c04 <ssd1306_print>
		ssd1306_print(5, 25, "New measure ");
 8002864:	4a47      	ldr	r2, [pc, #284]	; (8002984 <print_ox_status+0x210>)
 8002866:	2119      	movs	r1, #25
 8002868:	2005      	movs	r0, #5
 800286a:	f000 f9cb 	bl	8002c04 <ssd1306_print>
		ssd1306_print(5, 35, "running... ");
 800286e:	4a46      	ldr	r2, [pc, #280]	; (8002988 <print_ox_status+0x214>)
 8002870:	2123      	movs	r1, #35	; 0x23
 8002872:	2005      	movs	r0, #5
 8002874:	f000 f9c6 	bl	8002c04 <ssd1306_print>
		HAL_Delay(3000);
 8002878:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800287c:	f001 faf8 	bl	8003e70 <HAL_Delay>
		strcpy(uart_string_max, "Ox measure failed\r\nNew measure running...\r\n");
 8002880:	4a3c      	ldr	r2, [pc, #240]	; (8002974 <print_ox_status+0x200>)
 8002882:	4b42      	ldr	r3, [pc, #264]	; (800298c <print_ox_status+0x218>)
 8002884:	4614      	mov	r4, r2
 8002886:	461d      	mov	r5, r3
 8002888:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800288a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800288c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800288e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002890:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002894:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		HAL_UART_Transmit(&huart2, (uint8_t*)uart_string_max, strlen(uart_string_max), HAL_MAX_DELAY);
 8002898:	4836      	ldr	r0, [pc, #216]	; (8002974 <print_ox_status+0x200>)
 800289a:	f7fd fca1 	bl	80001e0 <strlen>
 800289e:	4603      	mov	r3, r0
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028a6:	4933      	ldr	r1, [pc, #204]	; (8002974 <print_ox_status+0x200>)
 80028a8:	4834      	ldr	r0, [pc, #208]	; (800297c <print_ox_status+0x208>)
 80028aa:	f006 f968 	bl	8008b7e <HAL_UART_Transmit>
}
 80028ae:	e04b      	b.n	8002948 <print_ox_status+0x1d4>
		HAL_GPIO_WritePin(red_led_GPIO_Port, red_led_Pin, 0);
 80028b0:	2200      	movs	r2, #0
 80028b2:	2120      	movs	r1, #32
 80028b4:	482c      	ldr	r0, [pc, #176]	; (8002968 <print_ox_status+0x1f4>)
 80028b6:	f002 fe11 	bl	80054dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green_led_GPIO_Port, green_led_Pin, 1);
 80028ba:	2201      	movs	r2, #1
 80028bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028c0:	4829      	ldr	r0, [pc, #164]	; (8002968 <print_ox_status+0x1f4>)
 80028c2:	f002 fe0b 	bl	80054dc <HAL_GPIO_WritePin>
		ssd1306_Clear();
 80028c6:	f000 f993 	bl	8002bf0 <ssd1306_Clear>
		ssd1306_print(5, 5, "Oxygen % good");
 80028ca:	4a31      	ldr	r2, [pc, #196]	; (8002990 <print_ox_status+0x21c>)
 80028cc:	2105      	movs	r1, #5
 80028ce:	2005      	movs	r0, #5
 80028d0:	f000 f998 	bl	8002c04 <ssd1306_print>
		ssd1306_print(5, 25, m);
 80028d4:	4a20      	ldr	r2, [pc, #128]	; (8002958 <print_ox_status+0x1e4>)
 80028d6:	2119      	movs	r1, #25
 80028d8:	2005      	movs	r0, #5
 80028da:	f000 f993 	bl	8002c04 <ssd1306_print>
		HAL_Delay(3000);
 80028de:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80028e2:	f001 fac5 	bl	8003e70 <HAL_Delay>
		strcpy(uart_string_max, "Good oxygen percentage\r\n");
 80028e6:	4a23      	ldr	r2, [pc, #140]	; (8002974 <print_ox_status+0x200>)
 80028e8:	4b2a      	ldr	r3, [pc, #168]	; (8002994 <print_ox_status+0x220>)
 80028ea:	4614      	mov	r4, r2
 80028ec:	461d      	mov	r5, r3
 80028ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80028f6:	c403      	stmia	r4!, {r0, r1}
 80028f8:	7022      	strb	r2, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)uart_string_max, strlen(uart_string_max), HAL_MAX_DELAY);
 80028fa:	481e      	ldr	r0, [pc, #120]	; (8002974 <print_ox_status+0x200>)
 80028fc:	f7fd fc70 	bl	80001e0 <strlen>
 8002900:	4603      	mov	r3, r0
 8002902:	b29a      	uxth	r2, r3
 8002904:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002908:	491a      	ldr	r1, [pc, #104]	; (8002974 <print_ox_status+0x200>)
 800290a:	481c      	ldr	r0, [pc, #112]	; (800297c <print_ox_status+0x208>)
 800290c:	f006 f937 	bl	8008b7e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)m, strlen(m), HAL_MAX_DELAY);
 8002910:	4811      	ldr	r0, [pc, #68]	; (8002958 <print_ox_status+0x1e4>)
 8002912:	f7fd fc65 	bl	80001e0 <strlen>
 8002916:	4603      	mov	r3, r0
 8002918:	b29a      	uxth	r2, r3
 800291a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800291e:	490e      	ldr	r1, [pc, #56]	; (8002958 <print_ox_status+0x1e4>)
 8002920:	4816      	ldr	r0, [pc, #88]	; (800297c <print_ox_status+0x208>)
 8002922:	f006 f92c 	bl	8008b7e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)au, strlen(au), HAL_MAX_DELAY);
 8002926:	480f      	ldr	r0, [pc, #60]	; (8002964 <print_ox_status+0x1f0>)
 8002928:	f7fd fc5a 	bl	80001e0 <strlen>
 800292c:	4603      	mov	r3, r0
 800292e:	b29a      	uxth	r2, r3
 8002930:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002934:	490b      	ldr	r1, [pc, #44]	; (8002964 <print_ox_status+0x1f0>)
 8002936:	4811      	ldr	r0, [pc, #68]	; (800297c <print_ox_status+0x208>)
 8002938:	f006 f921 	bl	8008b7e <HAL_UART_Transmit>
		HAL_GPIO_WritePin(green_led_GPIO_Port, green_led_Pin, 0);
 800293c:	2200      	movs	r2, #0
 800293e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002942:	4809      	ldr	r0, [pc, #36]	; (8002968 <print_ox_status+0x1f4>)
 8002944:	f002 fdca 	bl	80054dc <HAL_GPIO_WritePin>
}
 8002948:	bf00      	nop
 800294a:	3708      	adds	r7, #8
 800294c:	46bd      	mov	sp, r7
 800294e:	bdb0      	pop	{r4, r5, r7, pc}
 8002950:	2000132c 	.word	0x2000132c
 8002954:	0800e178 	.word	0x0800e178
 8002958:	200013c0 	.word	0x200013c0
 800295c:	20001334 	.word	0x20001334
 8002960:	0800e09c 	.word	0x0800e09c
 8002964:	200013f4 	.word	0x200013f4
 8002968:	40020400 	.word	0x40020400
 800296c:	0800e18c 	.word	0x0800e18c
 8002970:	0800e0c4 	.word	0x0800e0c4
 8002974:	20001428 	.word	0x20001428
 8002978:	0800e19c 	.word	0x0800e19c
 800297c:	20001dec 	.word	0x20001dec
 8002980:	0800e1c0 	.word	0x0800e1c0
 8002984:	0800e104 	.word	0x0800e104
 8002988:	0800e114 	.word	0x0800e114
 800298c:	0800e1d4 	.word	0x0800e1d4
 8002990:	0800e200 	.word	0x0800e200
 8002994:	0800e210 	.word	0x0800e210

08002998 <print_breathe>:

void print_breathe(){
 8002998:	b5b0      	push	{r4, r5, r7, lr}
 800299a:	af00      	add	r7, sp, #0
	ssd1306_Clear();
 800299c:	f000 f928 	bl	8002bf0 <ssd1306_Clear>
	ssd1306_print(5, 25, "Breathe following");
 80029a0:	4a10      	ldr	r2, [pc, #64]	; (80029e4 <print_breathe+0x4c>)
 80029a2:	2119      	movs	r1, #25
 80029a4:	2005      	movs	r0, #5
 80029a6:	f000 f92d 	bl	8002c04 <ssd1306_print>
	ssd1306_print(5, 35, "the light");
 80029aa:	4a0f      	ldr	r2, [pc, #60]	; (80029e8 <print_breathe+0x50>)
 80029ac:	2123      	movs	r1, #35	; 0x23
 80029ae:	2005      	movs	r0, #5
 80029b0:	f000 f928 	bl	8002c04 <ssd1306_print>
	strcpy(uart_string_max, "Patient in breathing phase\r\n");
 80029b4:	4a0d      	ldr	r2, [pc, #52]	; (80029ec <print_breathe+0x54>)
 80029b6:	4b0e      	ldr	r3, [pc, #56]	; (80029f0 <print_breathe+0x58>)
 80029b8:	4614      	mov	r4, r2
 80029ba:	461d      	mov	r5, r3
 80029bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029c0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80029c4:	c407      	stmia	r4!, {r0, r1, r2}
 80029c6:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)uart_string_max, strlen(uart_string_max), HAL_MAX_DELAY);
 80029c8:	4808      	ldr	r0, [pc, #32]	; (80029ec <print_breathe+0x54>)
 80029ca:	f7fd fc09 	bl	80001e0 <strlen>
 80029ce:	4603      	mov	r3, r0
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029d6:	4905      	ldr	r1, [pc, #20]	; (80029ec <print_breathe+0x54>)
 80029d8:	4806      	ldr	r0, [pc, #24]	; (80029f4 <print_breathe+0x5c>)
 80029da:	f006 f8d0 	bl	8008b7e <HAL_UART_Transmit>
}
 80029de:	bf00      	nop
 80029e0:	bdb0      	pop	{r4, r5, r7, pc}
 80029e2:	bf00      	nop
 80029e4:	0800e22c 	.word	0x0800e22c
 80029e8:	0800e240 	.word	0x0800e240
 80029ec:	20001428 	.word	0x20001428
 80029f0:	0800e24c 	.word	0x0800e24c
 80029f4:	20001dec 	.word	0x20001dec

080029f8 <get_clock>:

/******************************* UTILITY FUNCTIONS *******************************/
/*
 * This function calls the library function to validate the date_time structure fields.
 */
void get_clock(){
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
	ds1307rtc_get_date_time(&date_time);
 80029fc:	4802      	ldr	r0, [pc, #8]	; (8002a08 <get_clock+0x10>)
 80029fe:	f7fe fc0f 	bl	8001220 <ds1307rtc_get_date_time>
}
 8002a02:	bf00      	nop
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	20001464 	.word	0x20001464

08002a0c <print_time>:

/******************************* PRINT FUNCTIONS *******************************/
/*
 * This function is printing print date and time values.
 */
void print_time(){
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af02      	add	r7, sp, #8
	sprintf(date_string, "DATE: %d-%d-%d\r\n", date_time.date, date_time.month, date_time.year);
 8002a12:	4b1f      	ldr	r3, [pc, #124]	; (8002a90 <print_time+0x84>)
 8002a14:	791b      	ldrb	r3, [r3, #4]
 8002a16:	461a      	mov	r2, r3
 8002a18:	4b1d      	ldr	r3, [pc, #116]	; (8002a90 <print_time+0x84>)
 8002a1a:	795b      	ldrb	r3, [r3, #5]
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4b1c      	ldr	r3, [pc, #112]	; (8002a90 <print_time+0x84>)
 8002a20:	88db      	ldrh	r3, [r3, #6]
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	460b      	mov	r3, r1
 8002a26:	491b      	ldr	r1, [pc, #108]	; (8002a94 <print_time+0x88>)
 8002a28:	481b      	ldr	r0, [pc, #108]	; (8002a98 <print_time+0x8c>)
 8002a2a:	f007 fadd 	bl	8009fe8 <siprintf>
	sprintf(time_string, "TIME: %d:%d:%d\r\n", date_time.hours, date_time.minutes, date_time.seconds);
 8002a2e:	4b18      	ldr	r3, [pc, #96]	; (8002a90 <print_time+0x84>)
 8002a30:	789b      	ldrb	r3, [r3, #2]
 8002a32:	461a      	mov	r2, r3
 8002a34:	4b16      	ldr	r3, [pc, #88]	; (8002a90 <print_time+0x84>)
 8002a36:	785b      	ldrb	r3, [r3, #1]
 8002a38:	4619      	mov	r1, r3
 8002a3a:	4b15      	ldr	r3, [pc, #84]	; (8002a90 <print_time+0x84>)
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	460b      	mov	r3, r1
 8002a42:	4916      	ldr	r1, [pc, #88]	; (8002a9c <print_time+0x90>)
 8002a44:	4816      	ldr	r0, [pc, #88]	; (8002aa0 <print_time+0x94>)
 8002a46:	f007 facf 	bl	8009fe8 <siprintf>
	ssd1306_print(5, 0, date_string);
 8002a4a:	4a13      	ldr	r2, [pc, #76]	; (8002a98 <print_time+0x8c>)
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	2005      	movs	r0, #5
 8002a50:	f000 f8d8 	bl	8002c04 <ssd1306_print>
	ssd1306_print(5, 10, time_string);
 8002a54:	4a12      	ldr	r2, [pc, #72]	; (8002aa0 <print_time+0x94>)
 8002a56:	210a      	movs	r1, #10
 8002a58:	2005      	movs	r0, #5
 8002a5a:	f000 f8d3 	bl	8002c04 <ssd1306_print>
	HAL_UART_Transmit(&huart2, (uint8_t*)date_string, strlen(date_string), HAL_MAX_DELAY);
 8002a5e:	480e      	ldr	r0, [pc, #56]	; (8002a98 <print_time+0x8c>)
 8002a60:	f7fd fbbe 	bl	80001e0 <strlen>
 8002a64:	4603      	mov	r3, r0
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a6c:	490a      	ldr	r1, [pc, #40]	; (8002a98 <print_time+0x8c>)
 8002a6e:	480d      	ldr	r0, [pc, #52]	; (8002aa4 <print_time+0x98>)
 8002a70:	f006 f885 	bl	8008b7e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)time_string, strlen(time_string), HAL_MAX_DELAY);
 8002a74:	480a      	ldr	r0, [pc, #40]	; (8002aa0 <print_time+0x94>)
 8002a76:	f7fd fbb3 	bl	80001e0 <strlen>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a82:	4907      	ldr	r1, [pc, #28]	; (8002aa0 <print_time+0x94>)
 8002a84:	4807      	ldr	r0, [pc, #28]	; (8002aa4 <print_time+0x98>)
 8002a86:	f006 f87a 	bl	8008b7e <HAL_UART_Transmit>
}
 8002a8a:	bf00      	nop
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	20001464 	.word	0x20001464
 8002a94:	0800e26c 	.word	0x0800e26c
 8002a98:	2000146c 	.word	0x2000146c
 8002a9c:	0800e280 	.word	0x0800e280
 8002aa0:	200014a0 	.word	0x200014a0
 8002aa4:	20001dec 	.word	0x20001dec

08002aa8 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002aac:	bf00      	nop
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
	...

08002ab8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af04      	add	r7, sp, #16
 8002abe:	4603      	mov	r3, r0
 8002ac0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002ac2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ac6:	9302      	str	r3, [sp, #8]
 8002ac8:	2301      	movs	r3, #1
 8002aca:	9301      	str	r3, [sp, #4]
 8002acc:	1dfb      	adds	r3, r7, #7
 8002ace:	9300      	str	r3, [sp, #0]
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	2178      	movs	r1, #120	; 0x78
 8002ad6:	4803      	ldr	r0, [pc, #12]	; (8002ae4 <ssd1306_WriteCommand+0x2c>)
 8002ad8:	f003 f99a 	bl	8005e10 <HAL_I2C_Mem_Write>
}
 8002adc:	bf00      	nop
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	200002b4 	.word	0x200002b4

08002ae8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af04      	add	r7, sp, #16
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002afa:	9202      	str	r2, [sp, #8]
 8002afc:	9301      	str	r3, [sp, #4]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	9300      	str	r3, [sp, #0]
 8002b02:	2301      	movs	r3, #1
 8002b04:	2240      	movs	r2, #64	; 0x40
 8002b06:	2178      	movs	r1, #120	; 0x78
 8002b08:	4803      	ldr	r0, [pc, #12]	; (8002b18 <ssd1306_WriteData+0x30>)
 8002b0a:	f003 f981 	bl	8005e10 <HAL_I2C_Mem_Write>
}
 8002b0e:	bf00      	nop
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	200002b4 	.word	0x200002b4

08002b1c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002b20:	f7ff ffc2 	bl	8002aa8 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002b24:	2064      	movs	r0, #100	; 0x64
 8002b26:	f001 f9a3 	bl	8003e70 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002b2a:	2000      	movs	r0, #0
 8002b2c:	f000 fa00 	bl	8002f30 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002b30:	2020      	movs	r0, #32
 8002b32:	f7ff ffc1 	bl	8002ab8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002b36:	2000      	movs	r0, #0
 8002b38:	f7ff ffbe 	bl	8002ab8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002b3c:	20b0      	movs	r0, #176	; 0xb0
 8002b3e:	f7ff ffbb 	bl	8002ab8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002b42:	20c8      	movs	r0, #200	; 0xc8
 8002b44:	f7ff ffb8 	bl	8002ab8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002b48:	2000      	movs	r0, #0
 8002b4a:	f7ff ffb5 	bl	8002ab8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002b4e:	2010      	movs	r0, #16
 8002b50:	f7ff ffb2 	bl	8002ab8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002b54:	2040      	movs	r0, #64	; 0x40
 8002b56:	f7ff ffaf 	bl	8002ab8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002b5a:	20ff      	movs	r0, #255	; 0xff
 8002b5c:	f000 f9d4 	bl	8002f08 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002b60:	20a1      	movs	r0, #161	; 0xa1
 8002b62:	f7ff ffa9 	bl	8002ab8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002b66:	20a6      	movs	r0, #166	; 0xa6
 8002b68:	f7ff ffa6 	bl	8002ab8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002b6c:	20a8      	movs	r0, #168	; 0xa8
 8002b6e:	f7ff ffa3 	bl	8002ab8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002b72:	203f      	movs	r0, #63	; 0x3f
 8002b74:	f7ff ffa0 	bl	8002ab8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002b78:	20a4      	movs	r0, #164	; 0xa4
 8002b7a:	f7ff ff9d 	bl	8002ab8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002b7e:	20d3      	movs	r0, #211	; 0xd3
 8002b80:	f7ff ff9a 	bl	8002ab8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002b84:	2000      	movs	r0, #0
 8002b86:	f7ff ff97 	bl	8002ab8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002b8a:	20d5      	movs	r0, #213	; 0xd5
 8002b8c:	f7ff ff94 	bl	8002ab8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002b90:	20f0      	movs	r0, #240	; 0xf0
 8002b92:	f7ff ff91 	bl	8002ab8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002b96:	20d9      	movs	r0, #217	; 0xd9
 8002b98:	f7ff ff8e 	bl	8002ab8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002b9c:	2022      	movs	r0, #34	; 0x22
 8002b9e:	f7ff ff8b 	bl	8002ab8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002ba2:	20da      	movs	r0, #218	; 0xda
 8002ba4:	f7ff ff88 	bl	8002ab8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002ba8:	2012      	movs	r0, #18
 8002baa:	f7ff ff85 	bl	8002ab8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002bae:	20db      	movs	r0, #219	; 0xdb
 8002bb0:	f7ff ff82 	bl	8002ab8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002bb4:	2020      	movs	r0, #32
 8002bb6:	f7ff ff7f 	bl	8002ab8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002bba:	208d      	movs	r0, #141	; 0x8d
 8002bbc:	f7ff ff7c 	bl	8002ab8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002bc0:	2014      	movs	r0, #20
 8002bc2:	f7ff ff79 	bl	8002ab8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002bc6:	2001      	movs	r0, #1
 8002bc8:	f000 f9b2 	bl	8002f30 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002bcc:	2000      	movs	r0, #0
 8002bce:	f000 f835 	bl	8002c3c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002bd2:	f000 f857 	bl	8002c84 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002bd6:	4b05      	ldr	r3, [pc, #20]	; (8002bec <ssd1306_Init+0xd0>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002bdc:	4b03      	ldr	r3, [pc, #12]	; (8002bec <ssd1306_Init+0xd0>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002be2:	4b02      	ldr	r3, [pc, #8]	; (8002bec <ssd1306_Init+0xd0>)
 8002be4:	2201      	movs	r2, #1
 8002be6:	711a      	strb	r2, [r3, #4]
}
 8002be8:	bf00      	nop
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	200018d4 	.word	0x200018d4

08002bf0 <ssd1306_Clear>:

/* Fill the whole screen with the Black color and update the screen*/
void ssd1306_Clear(){
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8002bf4:	2000      	movs	r0, #0
 8002bf6:	f000 f821 	bl	8002c3c <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8002bfa:	f000 f843 	bl	8002c84 <ssd1306_UpdateScreen>
}
 8002bfe:	bf00      	nop
 8002c00:	bd80      	pop	{r7, pc}
	...

08002c04 <ssd1306_print>:

void ssd1306_print(int x, int y, char *string){
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
	ssd1306_SetCursor(x, y);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	68ba      	ldr	r2, [r7, #8]
 8002c16:	b2d2      	uxtb	r2, r2
 8002c18:	4611      	mov	r1, r2
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f000 f95c 	bl	8002ed8 <ssd1306_SetCursor>
	ssd1306_WriteString(string, Font_7x10, White);
 8002c20:	4a05      	ldr	r2, [pc, #20]	; (8002c38 <ssd1306_print+0x34>)
 8002c22:	2301      	movs	r3, #1
 8002c24:	ca06      	ldmia	r2, {r1, r2}
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f930 	bl	8002e8c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002c2c:	f000 f82a 	bl	8002c84 <ssd1306_UpdateScreen>
}
 8002c30:	bf00      	nop
 8002c32:	3710      	adds	r7, #16
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	20000004 	.word	0x20000004

08002c3c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	4603      	mov	r3, r0
 8002c44:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002c46:	2300      	movs	r3, #0
 8002c48:	60fb      	str	r3, [r7, #12]
 8002c4a:	e00d      	b.n	8002c68 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8002c4c:	79fb      	ldrb	r3, [r7, #7]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <ssd1306_Fill+0x1a>
 8002c52:	2100      	movs	r1, #0
 8002c54:	e000      	b.n	8002c58 <ssd1306_Fill+0x1c>
 8002c56:	21ff      	movs	r1, #255	; 0xff
 8002c58:	4a09      	ldr	r2, [pc, #36]	; (8002c80 <ssd1306_Fill+0x44>)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	460a      	mov	r2, r1
 8002c60:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	3301      	adds	r3, #1
 8002c66:	60fb      	str	r3, [r7, #12]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c6e:	d3ed      	bcc.n	8002c4c <ssd1306_Fill+0x10>
    }
}
 8002c70:	bf00      	nop
 8002c72:	bf00      	nop
 8002c74:	3714      	adds	r7, #20
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	200014d4 	.word	0x200014d4

08002c84 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	71fb      	strb	r3, [r7, #7]
 8002c8e:	e016      	b.n	8002cbe <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002c90:	79fb      	ldrb	r3, [r7, #7]
 8002c92:	3b50      	subs	r3, #80	; 0x50
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7ff ff0e 	bl	8002ab8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002c9c:	2000      	movs	r0, #0
 8002c9e:	f7ff ff0b 	bl	8002ab8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002ca2:	2010      	movs	r0, #16
 8002ca4:	f7ff ff08 	bl	8002ab8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002ca8:	79fb      	ldrb	r3, [r7, #7]
 8002caa:	01db      	lsls	r3, r3, #7
 8002cac:	4a08      	ldr	r2, [pc, #32]	; (8002cd0 <ssd1306_UpdateScreen+0x4c>)
 8002cae:	4413      	add	r3, r2
 8002cb0:	2180      	movs	r1, #128	; 0x80
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7ff ff18 	bl	8002ae8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002cb8:	79fb      	ldrb	r3, [r7, #7]
 8002cba:	3301      	adds	r3, #1
 8002cbc:	71fb      	strb	r3, [r7, #7]
 8002cbe:	79fb      	ldrb	r3, [r7, #7]
 8002cc0:	2b07      	cmp	r3, #7
 8002cc2:	d9e5      	bls.n	8002c90 <ssd1306_UpdateScreen+0xc>
    }
}
 8002cc4:	bf00      	nop
 8002cc6:	bf00      	nop
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	200014d4 	.word	0x200014d4

08002cd4 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	4603      	mov	r3, r0
 8002cdc:	71fb      	strb	r3, [r7, #7]
 8002cde:	460b      	mov	r3, r1
 8002ce0:	71bb      	strb	r3, [r7, #6]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	db3d      	blt.n	8002d6a <ssd1306_DrawPixel+0x96>
 8002cee:	79bb      	ldrb	r3, [r7, #6]
 8002cf0:	2b3f      	cmp	r3, #63	; 0x3f
 8002cf2:	d83a      	bhi.n	8002d6a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002cf4:	797b      	ldrb	r3, [r7, #5]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d11a      	bne.n	8002d30 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002cfa:	79fa      	ldrb	r2, [r7, #7]
 8002cfc:	79bb      	ldrb	r3, [r7, #6]
 8002cfe:	08db      	lsrs	r3, r3, #3
 8002d00:	b2d8      	uxtb	r0, r3
 8002d02:	4603      	mov	r3, r0
 8002d04:	01db      	lsls	r3, r3, #7
 8002d06:	4413      	add	r3, r2
 8002d08:	4a1b      	ldr	r2, [pc, #108]	; (8002d78 <ssd1306_DrawPixel+0xa4>)
 8002d0a:	5cd3      	ldrb	r3, [r2, r3]
 8002d0c:	b25a      	sxtb	r2, r3
 8002d0e:	79bb      	ldrb	r3, [r7, #6]
 8002d10:	f003 0307 	and.w	r3, r3, #7
 8002d14:	2101      	movs	r1, #1
 8002d16:	fa01 f303 	lsl.w	r3, r1, r3
 8002d1a:	b25b      	sxtb	r3, r3
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	b259      	sxtb	r1, r3
 8002d20:	79fa      	ldrb	r2, [r7, #7]
 8002d22:	4603      	mov	r3, r0
 8002d24:	01db      	lsls	r3, r3, #7
 8002d26:	4413      	add	r3, r2
 8002d28:	b2c9      	uxtb	r1, r1
 8002d2a:	4a13      	ldr	r2, [pc, #76]	; (8002d78 <ssd1306_DrawPixel+0xa4>)
 8002d2c:	54d1      	strb	r1, [r2, r3]
 8002d2e:	e01d      	b.n	8002d6c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002d30:	79fa      	ldrb	r2, [r7, #7]
 8002d32:	79bb      	ldrb	r3, [r7, #6]
 8002d34:	08db      	lsrs	r3, r3, #3
 8002d36:	b2d8      	uxtb	r0, r3
 8002d38:	4603      	mov	r3, r0
 8002d3a:	01db      	lsls	r3, r3, #7
 8002d3c:	4413      	add	r3, r2
 8002d3e:	4a0e      	ldr	r2, [pc, #56]	; (8002d78 <ssd1306_DrawPixel+0xa4>)
 8002d40:	5cd3      	ldrb	r3, [r2, r3]
 8002d42:	b25a      	sxtb	r2, r3
 8002d44:	79bb      	ldrb	r3, [r7, #6]
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d50:	b25b      	sxtb	r3, r3
 8002d52:	43db      	mvns	r3, r3
 8002d54:	b25b      	sxtb	r3, r3
 8002d56:	4013      	ands	r3, r2
 8002d58:	b259      	sxtb	r1, r3
 8002d5a:	79fa      	ldrb	r2, [r7, #7]
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	01db      	lsls	r3, r3, #7
 8002d60:	4413      	add	r3, r2
 8002d62:	b2c9      	uxtb	r1, r1
 8002d64:	4a04      	ldr	r2, [pc, #16]	; (8002d78 <ssd1306_DrawPixel+0xa4>)
 8002d66:	54d1      	strb	r1, [r2, r3]
 8002d68:	e000      	b.n	8002d6c <ssd1306_DrawPixel+0x98>
        return;
 8002d6a:	bf00      	nop
    }
}
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	200014d4 	.word	0x200014d4

08002d7c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002d7c:	b590      	push	{r4, r7, lr}
 8002d7e:	b089      	sub	sp, #36	; 0x24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	4604      	mov	r4, r0
 8002d84:	1d38      	adds	r0, r7, #4
 8002d86:	e880 0006 	stmia.w	r0, {r1, r2}
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	4623      	mov	r3, r4
 8002d8e:	73fb      	strb	r3, [r7, #15]
 8002d90:	4613      	mov	r3, r2
 8002d92:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002d94:	7bfb      	ldrb	r3, [r7, #15]
 8002d96:	2b1f      	cmp	r3, #31
 8002d98:	d902      	bls.n	8002da0 <ssd1306_WriteChar+0x24>
 8002d9a:	7bfb      	ldrb	r3, [r7, #15]
 8002d9c:	2b7e      	cmp	r3, #126	; 0x7e
 8002d9e:	d901      	bls.n	8002da4 <ssd1306_WriteChar+0x28>
        return 0;
 8002da0:	2300      	movs	r3, #0
 8002da2:	e06d      	b.n	8002e80 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002da4:	4b38      	ldr	r3, [pc, #224]	; (8002e88 <ssd1306_WriteChar+0x10c>)
 8002da6:	881b      	ldrh	r3, [r3, #0]
 8002da8:	461a      	mov	r2, r3
 8002daa:	793b      	ldrb	r3, [r7, #4]
 8002dac:	4413      	add	r3, r2
 8002dae:	2b80      	cmp	r3, #128	; 0x80
 8002db0:	dc06      	bgt.n	8002dc0 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8002db2:	4b35      	ldr	r3, [pc, #212]	; (8002e88 <ssd1306_WriteChar+0x10c>)
 8002db4:	885b      	ldrh	r3, [r3, #2]
 8002db6:	461a      	mov	r2, r3
 8002db8:	797b      	ldrb	r3, [r7, #5]
 8002dba:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002dbc:	2b40      	cmp	r3, #64	; 0x40
 8002dbe:	dd01      	ble.n	8002dc4 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	e05d      	b.n	8002e80 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	61fb      	str	r3, [r7, #28]
 8002dc8:	e04c      	b.n	8002e64 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002dca:	68ba      	ldr	r2, [r7, #8]
 8002dcc:	7bfb      	ldrb	r3, [r7, #15]
 8002dce:	3b20      	subs	r3, #32
 8002dd0:	7979      	ldrb	r1, [r7, #5]
 8002dd2:	fb01 f303 	mul.w	r3, r1, r3
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	440b      	add	r3, r1
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	4413      	add	r3, r2
 8002de0:	881b      	ldrh	r3, [r3, #0]
 8002de2:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002de4:	2300      	movs	r3, #0
 8002de6:	61bb      	str	r3, [r7, #24]
 8002de8:	e034      	b.n	8002e54 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	fa02 f303 	lsl.w	r3, r2, r3
 8002df2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d012      	beq.n	8002e20 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002dfa:	4b23      	ldr	r3, [pc, #140]	; (8002e88 <ssd1306_WriteChar+0x10c>)
 8002dfc:	881b      	ldrh	r3, [r3, #0]
 8002dfe:	b2da      	uxtb	r2, r3
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	4413      	add	r3, r2
 8002e06:	b2d8      	uxtb	r0, r3
 8002e08:	4b1f      	ldr	r3, [pc, #124]	; (8002e88 <ssd1306_WriteChar+0x10c>)
 8002e0a:	885b      	ldrh	r3, [r3, #2]
 8002e0c:	b2da      	uxtb	r2, r3
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	4413      	add	r3, r2
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	7bba      	ldrb	r2, [r7, #14]
 8002e18:	4619      	mov	r1, r3
 8002e1a:	f7ff ff5b 	bl	8002cd4 <ssd1306_DrawPixel>
 8002e1e:	e016      	b.n	8002e4e <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002e20:	4b19      	ldr	r3, [pc, #100]	; (8002e88 <ssd1306_WriteChar+0x10c>)
 8002e22:	881b      	ldrh	r3, [r3, #0]
 8002e24:	b2da      	uxtb	r2, r3
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	4413      	add	r3, r2
 8002e2c:	b2d8      	uxtb	r0, r3
 8002e2e:	4b16      	ldr	r3, [pc, #88]	; (8002e88 <ssd1306_WriteChar+0x10c>)
 8002e30:	885b      	ldrh	r3, [r3, #2]
 8002e32:	b2da      	uxtb	r2, r3
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	4413      	add	r3, r2
 8002e3a:	b2d9      	uxtb	r1, r3
 8002e3c:	7bbb      	ldrb	r3, [r7, #14]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	bf0c      	ite	eq
 8002e42:	2301      	moveq	r3, #1
 8002e44:	2300      	movne	r3, #0
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	461a      	mov	r2, r3
 8002e4a:	f7ff ff43 	bl	8002cd4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	3301      	adds	r3, #1
 8002e52:	61bb      	str	r3, [r7, #24]
 8002e54:	793b      	ldrb	r3, [r7, #4]
 8002e56:	461a      	mov	r2, r3
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d3c5      	bcc.n	8002dea <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	3301      	adds	r3, #1
 8002e62:	61fb      	str	r3, [r7, #28]
 8002e64:	797b      	ldrb	r3, [r7, #5]
 8002e66:	461a      	mov	r2, r3
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d3ad      	bcc.n	8002dca <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002e6e:	4b06      	ldr	r3, [pc, #24]	; (8002e88 <ssd1306_WriteChar+0x10c>)
 8002e70:	881a      	ldrh	r2, [r3, #0]
 8002e72:	793b      	ldrb	r3, [r7, #4]
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	4413      	add	r3, r2
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	4b03      	ldr	r3, [pc, #12]	; (8002e88 <ssd1306_WriteChar+0x10c>)
 8002e7c:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3724      	adds	r7, #36	; 0x24
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd90      	pop	{r4, r7, pc}
 8002e88:	200018d4 	.word	0x200018d4

08002e8c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	1d38      	adds	r0, r7, #4
 8002e96:	e880 0006 	stmia.w	r0, {r1, r2}
 8002e9a:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8002e9c:	e012      	b.n	8002ec4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	7818      	ldrb	r0, [r3, #0]
 8002ea2:	78fb      	ldrb	r3, [r7, #3]
 8002ea4:	1d3a      	adds	r2, r7, #4
 8002ea6:	ca06      	ldmia	r2, {r1, r2}
 8002ea8:	f7ff ff68 	bl	8002d7c <ssd1306_WriteChar>
 8002eac:	4603      	mov	r3, r0
 8002eae:	461a      	mov	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d002      	beq.n	8002ebe <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	e008      	b.n	8002ed0 <ssd1306_WriteString+0x44>
        }
        str++;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d1e8      	bne.n	8002e9e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	781b      	ldrb	r3, [r3, #0]
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	4603      	mov	r3, r0
 8002ee0:	460a      	mov	r2, r1
 8002ee2:	71fb      	strb	r3, [r7, #7]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002ee8:	79fb      	ldrb	r3, [r7, #7]
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	4b05      	ldr	r3, [pc, #20]	; (8002f04 <ssd1306_SetCursor+0x2c>)
 8002eee:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002ef0:	79bb      	ldrb	r3, [r7, #6]
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	4b03      	ldr	r3, [pc, #12]	; (8002f04 <ssd1306_SetCursor+0x2c>)
 8002ef6:	805a      	strh	r2, [r3, #2]
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr
 8002f04:	200018d4 	.word	0x200018d4

08002f08 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	4603      	mov	r3, r0
 8002f10:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002f12:	2381      	movs	r3, #129	; 0x81
 8002f14:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002f16:	7bfb      	ldrb	r3, [r7, #15]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7ff fdcd 	bl	8002ab8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002f1e:	79fb      	ldrb	r3, [r7, #7]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7ff fdc9 	bl	8002ab8 <ssd1306_WriteCommand>
}
 8002f26:	bf00      	nop
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
	...

08002f30 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	4603      	mov	r3, r0
 8002f38:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002f3a:	79fb      	ldrb	r3, [r7, #7]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d005      	beq.n	8002f4c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002f40:	23af      	movs	r3, #175	; 0xaf
 8002f42:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002f44:	4b08      	ldr	r3, [pc, #32]	; (8002f68 <ssd1306_SetDisplayOn+0x38>)
 8002f46:	2201      	movs	r2, #1
 8002f48:	715a      	strb	r2, [r3, #5]
 8002f4a:	e004      	b.n	8002f56 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002f4c:	23ae      	movs	r3, #174	; 0xae
 8002f4e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002f50:	4b05      	ldr	r3, [pc, #20]	; (8002f68 <ssd1306_SetDisplayOn+0x38>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002f56:	7bfb      	ldrb	r3, [r7, #15]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7ff fdad 	bl	8002ab8 <ssd1306_WriteCommand>
}
 8002f5e:	bf00      	nop
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	200018d4 	.word	0x200018d4

08002f6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f72:	2300      	movs	r3, #0
 8002f74:	607b      	str	r3, [r7, #4]
 8002f76:	4b10      	ldr	r3, [pc, #64]	; (8002fb8 <HAL_MspInit+0x4c>)
 8002f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7a:	4a0f      	ldr	r2, [pc, #60]	; (8002fb8 <HAL_MspInit+0x4c>)
 8002f7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f80:	6453      	str	r3, [r2, #68]	; 0x44
 8002f82:	4b0d      	ldr	r3, [pc, #52]	; (8002fb8 <HAL_MspInit+0x4c>)
 8002f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f8a:	607b      	str	r3, [r7, #4]
 8002f8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f8e:	2300      	movs	r3, #0
 8002f90:	603b      	str	r3, [r7, #0]
 8002f92:	4b09      	ldr	r3, [pc, #36]	; (8002fb8 <HAL_MspInit+0x4c>)
 8002f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f96:	4a08      	ldr	r2, [pc, #32]	; (8002fb8 <HAL_MspInit+0x4c>)
 8002f98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f9e:	4b06      	ldr	r3, [pc, #24]	; (8002fb8 <HAL_MspInit+0x4c>)
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa6:	603b      	str	r3, [r7, #0]
 8002fa8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002faa:	2007      	movs	r0, #7
 8002fac:	f001 fd60 	bl	8004a70 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fb0:	bf00      	nop
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	40023800 	.word	0x40023800

08002fbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002fc0:	e7fe      	b.n	8002fc0 <NMI_Handler+0x4>

08002fc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fc6:	e7fe      	b.n	8002fc6 <HardFault_Handler+0x4>

08002fc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fcc:	e7fe      	b.n	8002fcc <MemManage_Handler+0x4>

08002fce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fd2:	e7fe      	b.n	8002fd2 <BusFault_Handler+0x4>

08002fd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fd8:	e7fe      	b.n	8002fd8 <UsageFault_Handler+0x4>

08002fda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002fde:	bf00      	nop
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fec:	bf00      	nop
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr

08002ff6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ffa:	bf00      	nop
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003008:	f000 ff12 	bl	8003e30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800300c:	bf00      	nop
 800300e:	bd80      	pop	{r7, pc}

08003010 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(max_button_Pin);
 8003014:	2002      	movs	r0, #2
 8003016:	f002 fa7b 	bl	8005510 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800301a:	bf00      	nop
 800301c:	bd80      	pop	{r7, pc}

0800301e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(temp_button_Pin);
 8003022:	2008      	movs	r0, #8
 8003024:	f002 fa74 	bl	8005510 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003028:	bf00      	nop
 800302a:	bd80      	pop	{r7, pc}

0800302c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003030:	4802      	ldr	r0, [pc, #8]	; (800303c <ADC_IRQHandler+0x10>)
 8003032:	f000 ff84 	bl	8003f3e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003036:	bf00      	nop
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	2000020c 	.word	0x2000020c

08003040 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8003044:	4802      	ldr	r0, [pc, #8]	; (8003050 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003046:	f004 ff45 	bl	8007ed4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800304a:	bf00      	nop
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	20001d5c 	.word	0x20001d5c

08003054 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8003058:	4802      	ldr	r0, [pc, #8]	; (8003064 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800305a:	f004 ff3b 	bl	8007ed4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800305e:	bf00      	nop
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	20001da4 	.word	0x20001da4

08003068 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800306c:	4802      	ldr	r0, [pc, #8]	; (8003078 <DMA2_Stream0_IRQHandler+0x10>)
 800306e:	f001 fe47 	bl	8004d00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003072:	bf00      	nop
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	20000254 	.word	0x20000254

0800307c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
  return 1;
 8003080:	2301      	movs	r3, #1
}
 8003082:	4618      	mov	r0, r3
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <_kill>:

int _kill(int pid, int sig)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003096:	f006 f8e7 	bl	8009268 <__errno>
 800309a:	4603      	mov	r3, r0
 800309c:	2216      	movs	r2, #22
 800309e:	601a      	str	r2, [r3, #0]
  return -1;
 80030a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3708      	adds	r7, #8
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <_exit>:

void _exit (int status)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80030b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f7ff ffe7 	bl	800308c <_kill>
  while (1) {}    /* Make sure we hang here */
 80030be:	e7fe      	b.n	80030be <_exit+0x12>

080030c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030cc:	2300      	movs	r3, #0
 80030ce:	617b      	str	r3, [r7, #20]
 80030d0:	e00a      	b.n	80030e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80030d2:	f3af 8000 	nop.w
 80030d6:	4601      	mov	r1, r0
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	1c5a      	adds	r2, r3, #1
 80030dc:	60ba      	str	r2, [r7, #8]
 80030de:	b2ca      	uxtb	r2, r1
 80030e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	3301      	adds	r3, #1
 80030e6:	617b      	str	r3, [r7, #20]
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	dbf0      	blt.n	80030d2 <_read+0x12>
  }

  return len;
 80030f0:	687b      	ldr	r3, [r7, #4]
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3718      	adds	r7, #24
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b086      	sub	sp, #24
 80030fe:	af00      	add	r7, sp, #0
 8003100:	60f8      	str	r0, [r7, #12]
 8003102:	60b9      	str	r1, [r7, #8]
 8003104:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003106:	2300      	movs	r3, #0
 8003108:	617b      	str	r3, [r7, #20]
 800310a:	e009      	b.n	8003120 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	1c5a      	adds	r2, r3, #1
 8003110:	60ba      	str	r2, [r7, #8]
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	4618      	mov	r0, r3
 8003116:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	3301      	adds	r3, #1
 800311e:	617b      	str	r3, [r7, #20]
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	429a      	cmp	r2, r3
 8003126:	dbf1      	blt.n	800310c <_write+0x12>
  }
  return len;
 8003128:	687b      	ldr	r3, [r7, #4]
}
 800312a:	4618      	mov	r0, r3
 800312c:	3718      	adds	r7, #24
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <_close>:

int _close(int file)
{
 8003132:	b480      	push	{r7}
 8003134:	b083      	sub	sp, #12
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800313a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800313e:	4618      	mov	r0, r3
 8003140:	370c      	adds	r7, #12
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr

0800314a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800314a:	b480      	push	{r7}
 800314c:	b083      	sub	sp, #12
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
 8003152:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800315a:	605a      	str	r2, [r3, #4]
  return 0;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr

0800316a <_isatty>:

int _isatty(int file)
{
 800316a:	b480      	push	{r7}
 800316c:	b083      	sub	sp, #12
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003172:	2301      	movs	r3, #1
}
 8003174:	4618      	mov	r0, r3
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3714      	adds	r7, #20
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
	...

0800319c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031a4:	4a14      	ldr	r2, [pc, #80]	; (80031f8 <_sbrk+0x5c>)
 80031a6:	4b15      	ldr	r3, [pc, #84]	; (80031fc <_sbrk+0x60>)
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031b0:	4b13      	ldr	r3, [pc, #76]	; (8003200 <_sbrk+0x64>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d102      	bne.n	80031be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031b8:	4b11      	ldr	r3, [pc, #68]	; (8003200 <_sbrk+0x64>)
 80031ba:	4a12      	ldr	r2, [pc, #72]	; (8003204 <_sbrk+0x68>)
 80031bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031be:	4b10      	ldr	r3, [pc, #64]	; (8003200 <_sbrk+0x64>)
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4413      	add	r3, r2
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d207      	bcs.n	80031dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031cc:	f006 f84c 	bl	8009268 <__errno>
 80031d0:	4603      	mov	r3, r0
 80031d2:	220c      	movs	r2, #12
 80031d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031da:	e009      	b.n	80031f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031dc:	4b08      	ldr	r3, [pc, #32]	; (8003200 <_sbrk+0x64>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031e2:	4b07      	ldr	r3, [pc, #28]	; (8003200 <_sbrk+0x64>)
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4413      	add	r3, r2
 80031ea:	4a05      	ldr	r2, [pc, #20]	; (8003200 <_sbrk+0x64>)
 80031ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031ee:	68fb      	ldr	r3, [r7, #12]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3718      	adds	r7, #24
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	20018000 	.word	0x20018000
 80031fc:	00000400 	.word	0x00000400
 8003200:	200018dc 	.word	0x200018dc
 8003204:	20001e48 	.word	0x20001e48

08003208 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800320c:	4b06      	ldr	r3, [pc, #24]	; (8003228 <SystemInit+0x20>)
 800320e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003212:	4a05      	ldr	r2, [pc, #20]	; (8003228 <SystemInit+0x20>)
 8003214:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003218:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800321c:	bf00      	nop
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	e000ed00 	.word	0xe000ed00

0800322c <temp_init>:

/******************************* SETUP FUNCTIONS *******************************/
/*
 * This function starts the ADC conversion in DMA mode.
 */
void temp_init(){
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &data_out, 1);
 8003230:	2201      	movs	r2, #1
 8003232:	4903      	ldr	r1, [pc, #12]	; (8003240 <temp_init+0x14>)
 8003234:	4803      	ldr	r0, [pc, #12]	; (8003244 <temp_init+0x18>)
 8003236:	f000 ff93 	bl	8004160 <HAL_ADC_Start_DMA>
}
 800323a:	bf00      	nop
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	200018e0 	.word	0x200018e0
 8003244:	2000020c 	.word	0x2000020c

08003248 <temp_setup>:
/*
 * This function does a virtual setup by clearing flags statuses.
*/
void temp_setup(){
 8003248:	b5b0      	push	{r4, r5, r7, lr}
 800324a:	af00      	add	r7, sp, #0
	temp_index = 0;
 800324c:	4b1e      	ldr	r3, [pc, #120]	; (80032c8 <temp_setup+0x80>)
 800324e:	2200      	movs	r2, #0
 8003250:	601a      	str	r2, [r3, #0]
	ssd1306_Clear();
 8003252:	f7ff fccd 	bl	8002bf0 <ssd1306_Clear>
	ssd1306_print(5, 5, "Put the finger on ");
 8003256:	4a1d      	ldr	r2, [pc, #116]	; (80032cc <temp_setup+0x84>)
 8003258:	2105      	movs	r1, #5
 800325a:	2005      	movs	r0, #5
 800325c:	f7ff fcd2 	bl	8002c04 <ssd1306_print>
	ssd1306_print(5, 15, "the temperature ");
 8003260:	4a1b      	ldr	r2, [pc, #108]	; (80032d0 <temp_setup+0x88>)
 8003262:	210f      	movs	r1, #15
 8003264:	2005      	movs	r0, #5
 8003266:	f7ff fccd 	bl	8002c04 <ssd1306_print>
	ssd1306_print(5, 25, "sensor");
 800326a:	4a1a      	ldr	r2, [pc, #104]	; (80032d4 <temp_setup+0x8c>)
 800326c:	2119      	movs	r1, #25
 800326e:	2005      	movs	r0, #5
 8003270:	f7ff fcc8 	bl	8002c04 <ssd1306_print>
	HAL_Delay(3000);
 8003274:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003278:	f000 fdfa 	bl	8003e70 <HAL_Delay>

	ssd1306_Clear();
 800327c:	f7ff fcb8 	bl	8002bf0 <ssd1306_Clear>
	ssd1306_print(5,5, "Wait for 15 ");
 8003280:	4a15      	ldr	r2, [pc, #84]	; (80032d8 <temp_setup+0x90>)
 8003282:	2105      	movs	r1, #5
 8003284:	2005      	movs	r0, #5
 8003286:	f7ff fcbd 	bl	8002c04 <ssd1306_print>
	ssd1306_print(5, 15,"seconds");
 800328a:	4a14      	ldr	r2, [pc, #80]	; (80032dc <temp_setup+0x94>)
 800328c:	210f      	movs	r1, #15
 800328e:	2005      	movs	r0, #5
 8003290:	f7ff fcb8 	bl	8002c04 <ssd1306_print>
	strcpy(uart_string_temp, "Finger temperature measure running...\r\n");
 8003294:	4a12      	ldr	r2, [pc, #72]	; (80032e0 <temp_setup+0x98>)
 8003296:	4b13      	ldr	r3, [pc, #76]	; (80032e4 <temp_setup+0x9c>)
 8003298:	4614      	mov	r4, r2
 800329a:	461d      	mov	r5, r3
 800329c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800329e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032a4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80032a8:	e884 0003 	stmia.w	r4, {r0, r1}
	HAL_UART_Transmit(&huart2, (uint8_t*)uart_string_temp, strlen(uart_string_temp), HAL_MAX_DELAY);
 80032ac:	480c      	ldr	r0, [pc, #48]	; (80032e0 <temp_setup+0x98>)
 80032ae:	f7fc ff97 	bl	80001e0 <strlen>
 80032b2:	4603      	mov	r3, r0
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032ba:	4909      	ldr	r1, [pc, #36]	; (80032e0 <temp_setup+0x98>)
 80032bc:	480a      	ldr	r0, [pc, #40]	; (80032e8 <temp_setup+0xa0>)
 80032be:	f005 fc5e 	bl	8008b7e <HAL_UART_Transmit>
}
 80032c2:	bf00      	nop
 80032c4:	bdb0      	pop	{r4, r5, r7, pc}
 80032c6:	bf00      	nop
 80032c8:	20001cbc 	.word	0x20001cbc
 80032cc:	0800e294 	.word	0x0800e294
 80032d0:	0800e2a8 	.word	0x0800e2a8
 80032d4:	0800e2bc 	.word	0x0800e2bc
 80032d8:	0800e2c4 	.word	0x0800e2c4
 80032dc:	0800e2d4 	.word	0x0800e2d4
 80032e0:	20001c80 	.word	0x20001c80
 80032e4:	0800e2dc 	.word	0x0800e2dc
 80032e8:	20001dec 	.word	0x20001dec

080032ec <get_temp>:

/******************************* UTILITY FUNCTIONS *******************************/
/*
 * This function calls the steinharthart to validate the temperature variable.
 */
void get_temp(){
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
	temperature = steinharthart(data_out);
 80032f0:	4b05      	ldr	r3, [pc, #20]	; (8003308 <get_temp+0x1c>)
 80032f2:	881b      	ldrh	r3, [r3, #0]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f000 f80b 	bl	8003310 <steinharthart>
 80032fa:	eef0 7a40 	vmov.f32	s15, s0
 80032fe:	4b03      	ldr	r3, [pc, #12]	; (800330c <get_temp+0x20>)
 8003300:	edc3 7a00 	vstr	s15, [r3]
}
 8003304:	bf00      	nop
 8003306:	bd80      	pop	{r7, pc}
 8003308:	200018e0 	.word	0x200018e0
 800330c:	200018e4 	.word	0x200018e4

08003310 <steinharthart>:
/*
 * This function converts the deltaV (v_in) read on the sensor to temperature thanks to the Steinhart-Hart equation
 * assisted by the resistance value calculation.
 * Since we use Celsius degrees there is also a small conversion in the end.
 */
float steinharthart(uint16_t raw_value){
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	4603      	mov	r3, r0
 8003318:	80fb      	strh	r3, [r7, #6]
	v_in=(float)raw_value*V_REF/LEVELS;
 800331a:	88fb      	ldrh	r3, [r7, #6]
 800331c:	ee07 3a90 	vmov	s15, r3
 8003320:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003324:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8003438 <steinharthart+0x128>
 8003328:	ee27 7a87 	vmul.f32	s14, s15, s14
 800332c:	eddf 6a43 	vldr	s13, [pc, #268]	; 800343c <steinharthart+0x12c>
 8003330:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003334:	4b42      	ldr	r3, [pc, #264]	; (8003440 <steinharthart+0x130>)
 8003336:	edc3 7a00 	vstr	s15, [r3]
	r_ref = -(SERIESRESISTOR * v_in)/(v_in - V_REF);
 800333a:	4b41      	ldr	r3, [pc, #260]	; (8003440 <steinharthart+0x130>)
 800333c:	edd3 7a00 	vldr	s15, [r3]
 8003340:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8003444 <steinharthart+0x134>
 8003344:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003348:	eef1 6a67 	vneg.f32	s13, s15
 800334c:	4b3c      	ldr	r3, [pc, #240]	; (8003440 <steinharthart+0x130>)
 800334e:	edd3 7a00 	vldr	s15, [r3]
 8003352:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8003438 <steinharthart+0x128>
 8003356:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800335a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800335e:	4b3a      	ldr	r3, [pc, #232]	; (8003448 <steinharthart+0x138>)
 8003360:	edc3 7a00 	vstr	s15, [r3]

	steinhart = r_ref / NOMINAL_RESISTANCE;
 8003364:	4b38      	ldr	r3, [pc, #224]	; (8003448 <steinharthart+0x138>)
 8003366:	ed93 7a00 	vldr	s14, [r3]
 800336a:	eddf 6a36 	vldr	s13, [pc, #216]	; 8003444 <steinharthart+0x134>
 800336e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003372:	4b36      	ldr	r3, [pc, #216]	; (800344c <steinharthart+0x13c>)
 8003374:	edc3 7a00 	vstr	s15, [r3]
	steinhart = log(steinhart);
 8003378:	4b34      	ldr	r3, [pc, #208]	; (800344c <steinharthart+0x13c>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4618      	mov	r0, r3
 800337e:	f7fd f8eb 	bl	8000558 <__aeabi_f2d>
 8003382:	4602      	mov	r2, r0
 8003384:	460b      	mov	r3, r1
 8003386:	ec43 2b10 	vmov	d0, r2, r3
 800338a:	f00a fc1d 	bl	800dbc8 <log>
 800338e:	ec53 2b10 	vmov	r2, r3, d0
 8003392:	4610      	mov	r0, r2
 8003394:	4619      	mov	r1, r3
 8003396:	f7fd fc2f 	bl	8000bf8 <__aeabi_d2f>
 800339a:	4603      	mov	r3, r0
 800339c:	4a2b      	ldr	r2, [pc, #172]	; (800344c <steinharthart+0x13c>)
 800339e:	6013      	str	r3, [r2, #0]
	steinhart /= BCOEFFICIENT;
 80033a0:	4b2a      	ldr	r3, [pc, #168]	; (800344c <steinharthart+0x13c>)
 80033a2:	ed93 7a00 	vldr	s14, [r3]
 80033a6:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8003450 <steinharthart+0x140>
 80033aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033ae:	4b27      	ldr	r3, [pc, #156]	; (800344c <steinharthart+0x13c>)
 80033b0:	edc3 7a00 	vstr	s15, [r3]
	steinhart += 1.0 / (NOMINAL_TEMPERATURE + 273.15);
 80033b4:	4b25      	ldr	r3, [pc, #148]	; (800344c <steinharthart+0x13c>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7fd f8cd 	bl	8000558 <__aeabi_f2d>
 80033be:	a31a      	add	r3, pc, #104	; (adr r3, 8003428 <steinharthart+0x118>)
 80033c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c4:	f7fc ff6a 	bl	800029c <__adddf3>
 80033c8:	4602      	mov	r2, r0
 80033ca:	460b      	mov	r3, r1
 80033cc:	4610      	mov	r0, r2
 80033ce:	4619      	mov	r1, r3
 80033d0:	f7fd fc12 	bl	8000bf8 <__aeabi_d2f>
 80033d4:	4603      	mov	r3, r0
 80033d6:	4a1d      	ldr	r2, [pc, #116]	; (800344c <steinharthart+0x13c>)
 80033d8:	6013      	str	r3, [r2, #0]
	steinhart = 1.0 / steinhart;
 80033da:	4b1c      	ldr	r3, [pc, #112]	; (800344c <steinharthart+0x13c>)
 80033dc:	ed93 7a00 	vldr	s14, [r3]
 80033e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033e8:	4b18      	ldr	r3, [pc, #96]	; (800344c <steinharthart+0x13c>)
 80033ea:	edc3 7a00 	vstr	s15, [r3]
	steinhart -= 273.15;
 80033ee:	4b17      	ldr	r3, [pc, #92]	; (800344c <steinharthart+0x13c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7fd f8b0 	bl	8000558 <__aeabi_f2d>
 80033f8:	a30d      	add	r3, pc, #52	; (adr r3, 8003430 <steinharthart+0x120>)
 80033fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033fe:	f7fc ff4b 	bl	8000298 <__aeabi_dsub>
 8003402:	4602      	mov	r2, r0
 8003404:	460b      	mov	r3, r1
 8003406:	4610      	mov	r0, r2
 8003408:	4619      	mov	r1, r3
 800340a:	f7fd fbf5 	bl	8000bf8 <__aeabi_d2f>
 800340e:	4603      	mov	r3, r0
 8003410:	4a0e      	ldr	r2, [pc, #56]	; (800344c <steinharthart+0x13c>)
 8003412:	6013      	str	r3, [r2, #0]

	return steinhart;
 8003414:	4b0d      	ldr	r3, [pc, #52]	; (800344c <steinharthart+0x13c>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	ee07 3a90 	vmov	s15, r3
}
 800341c:	eeb0 0a67 	vmov.f32	s0, s15
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	dcb5db83 	.word	0xdcb5db83
 800342c:	3f6b79e1 	.word	0x3f6b79e1
 8003430:	66666666 	.word	0x66666666
 8003434:	40711266 	.word	0x40711266
 8003438:	454e4000 	.word	0x454e4000
 800343c:	45800000 	.word	0x45800000
 8003440:	20001c14 	.word	0x20001c14
 8003444:	461c4000 	.word	0x461c4000
 8003448:	20001c1c 	.word	0x20001c1c
 800344c:	20001c18 	.word	0x20001c18
 8003450:	4576e000 	.word	0x4576e000

08003454 <temp_analysis>:
/*
 * This functions runs trough the buffer to calculate:
 * average, min, max, absolute uncertainty and relative uncertainty in percentage.
 * The return value is 2 when the measure fails, 1 when it results in anomalies and 0 when it is ok.
 */
int temp_analysis(){
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
	sum_temp = 0;
 800345a:	4b5c      	ldr	r3, [pc, #368]	; (80035cc <temp_analysis+0x178>)
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]
	min_temp = temp_buf[0];
 8003460:	4b5b      	ldr	r3, [pc, #364]	; (80035d0 <temp_analysis+0x17c>)
 8003462:	edd3 7a00 	vldr	s15, [r3]
 8003466:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800346a:	ee17 2a90 	vmov	r2, s15
 800346e:	4b59      	ldr	r3, [pc, #356]	; (80035d4 <temp_analysis+0x180>)
 8003470:	601a      	str	r2, [r3, #0]
	max_temp = temp_buf[0];
 8003472:	4b57      	ldr	r3, [pc, #348]	; (80035d0 <temp_analysis+0x17c>)
 8003474:	edd3 7a00 	vldr	s15, [r3]
 8003478:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800347c:	ee17 2a90 	vmov	r2, s15
 8003480:	4b55      	ldr	r3, [pc, #340]	; (80035d8 <temp_analysis+0x184>)
 8003482:	601a      	str	r2, [r3, #0]
	for(int j=0; j<temp_index;j++){
 8003484:	2300      	movs	r3, #0
 8003486:	607b      	str	r3, [r7, #4]
 8003488:	e050      	b.n	800352c <temp_analysis+0xd8>
		sum_temp += temp_buf[j];
 800348a:	4b50      	ldr	r3, [pc, #320]	; (80035cc <temp_analysis+0x178>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	ee07 3a90 	vmov	s15, r3
 8003492:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003496:	4a4e      	ldr	r2, [pc, #312]	; (80035d0 <temp_analysis+0x17c>)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	4413      	add	r3, r2
 800349e:	edd3 7a00 	vldr	s15, [r3]
 80034a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034aa:	ee17 2a90 	vmov	r2, s15
 80034ae:	4b47      	ldr	r3, [pc, #284]	; (80035cc <temp_analysis+0x178>)
 80034b0:	601a      	str	r2, [r3, #0]
		if(temp_buf[j] < min_temp)
 80034b2:	4a47      	ldr	r2, [pc, #284]	; (80035d0 <temp_analysis+0x17c>)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	4413      	add	r3, r2
 80034ba:	ed93 7a00 	vldr	s14, [r3]
 80034be:	4b45      	ldr	r3, [pc, #276]	; (80035d4 <temp_analysis+0x180>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	ee07 3a90 	vmov	s15, r3
 80034c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034d2:	d50b      	bpl.n	80034ec <temp_analysis+0x98>
		  min_temp = temp_buf[j];
 80034d4:	4a3e      	ldr	r2, [pc, #248]	; (80035d0 <temp_analysis+0x17c>)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4413      	add	r3, r2
 80034dc:	edd3 7a00 	vldr	s15, [r3]
 80034e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034e4:	ee17 2a90 	vmov	r2, s15
 80034e8:	4b3a      	ldr	r3, [pc, #232]	; (80035d4 <temp_analysis+0x180>)
 80034ea:	601a      	str	r2, [r3, #0]
		if(temp_buf[j] > max_temp)
 80034ec:	4a38      	ldr	r2, [pc, #224]	; (80035d0 <temp_analysis+0x17c>)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4413      	add	r3, r2
 80034f4:	ed93 7a00 	vldr	s14, [r3]
 80034f8:	4b37      	ldr	r3, [pc, #220]	; (80035d8 <temp_analysis+0x184>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	ee07 3a90 	vmov	s15, r3
 8003500:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003504:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800350c:	dd0b      	ble.n	8003526 <temp_analysis+0xd2>
		  max_temp = temp_buf[j];
 800350e:	4a30      	ldr	r2, [pc, #192]	; (80035d0 <temp_analysis+0x17c>)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	4413      	add	r3, r2
 8003516:	edd3 7a00 	vldr	s15, [r3]
 800351a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800351e:	ee17 2a90 	vmov	r2, s15
 8003522:	4b2d      	ldr	r3, [pc, #180]	; (80035d8 <temp_analysis+0x184>)
 8003524:	601a      	str	r2, [r3, #0]
	for(int j=0; j<temp_index;j++){
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	3301      	adds	r3, #1
 800352a:	607b      	str	r3, [r7, #4]
 800352c:	4b2b      	ldr	r3, [pc, #172]	; (80035dc <temp_analysis+0x188>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	429a      	cmp	r2, r3
 8003534:	dba9      	blt.n	800348a <temp_analysis+0x36>
	}
	mean_temp = sum_temp/(temp_index);
 8003536:	4b25      	ldr	r3, [pc, #148]	; (80035cc <temp_analysis+0x178>)
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	4b28      	ldr	r3, [pc, #160]	; (80035dc <temp_analysis+0x188>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	fb92 f3f3 	sdiv	r3, r2, r3
 8003542:	ee07 3a90 	vmov	s15, r3
 8003546:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800354a:	4b25      	ldr	r3, [pc, #148]	; (80035e0 <temp_analysis+0x18c>)
 800354c:	edc3 7a00 	vstr	s15, [r3]
	absolute_uncertainty_temp = (max_temp - min_temp)/2;
 8003550:	4b21      	ldr	r3, [pc, #132]	; (80035d8 <temp_analysis+0x184>)
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	4b1f      	ldr	r3, [pc, #124]	; (80035d4 <temp_analysis+0x180>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	0fda      	lsrs	r2, r3, #31
 800355c:	4413      	add	r3, r2
 800355e:	105b      	asrs	r3, r3, #1
 8003560:	ee07 3a90 	vmov	s15, r3
 8003564:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003568:	4b1e      	ldr	r3, [pc, #120]	; (80035e4 <temp_analysis+0x190>)
 800356a:	edc3 7a00 	vstr	s15, [r3]
	relative_uncertainty_temp = (absolute_uncertainty_temp/mean_temp)*100;
 800356e:	4b1d      	ldr	r3, [pc, #116]	; (80035e4 <temp_analysis+0x190>)
 8003570:	edd3 6a00 	vldr	s13, [r3]
 8003574:	4b1a      	ldr	r3, [pc, #104]	; (80035e0 <temp_analysis+0x18c>)
 8003576:	ed93 7a00 	vldr	s14, [r3]
 800357a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800357e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80035e8 <temp_analysis+0x194>
 8003582:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003586:	4b19      	ldr	r3, [pc, #100]	; (80035ec <temp_analysis+0x198>)
 8003588:	edc3 7a00 	vstr	s15, [r3]
	if(mean_temp <= TEMP_TRESHOLD_LOW){
 800358c:	4b14      	ldr	r3, [pc, #80]	; (80035e0 <temp_analysis+0x18c>)
 800358e:	edd3 7a00 	vldr	s15, [r3]
 8003592:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
 8003596:	eef4 7ac7 	vcmpe.f32	s15, s14
 800359a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800359e:	d801      	bhi.n	80035a4 <temp_analysis+0x150>
		return 2;
 80035a0:	2302      	movs	r3, #2
 80035a2:	e00c      	b.n	80035be <temp_analysis+0x16a>
	}
	if(mean_temp > TEMP_TRESHOLD_HIGH){
 80035a4:	4b0e      	ldr	r3, [pc, #56]	; (80035e0 <temp_analysis+0x18c>)
 80035a6:	edd3 7a00 	vldr	s15, [r3]
 80035aa:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 80035ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035b6:	dd01      	ble.n	80035bc <temp_analysis+0x168>
		return 1;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e000      	b.n	80035be <temp_analysis+0x16a>
	}
	else{
		return 0;
 80035bc:	2300      	movs	r3, #0
	}
}
 80035be:	4618      	mov	r0, r3
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	20001cc0 	.word	0x20001cc0
 80035d0:	200018e8 	.word	0x200018e8
 80035d4:	20001cc4 	.word	0x20001cc4
 80035d8:	20001cc8 	.word	0x20001cc8
 80035dc:	20001cbc 	.word	0x20001cbc
 80035e0:	20001c08 	.word	0x20001c08
 80035e4:	20001c0c 	.word	0x20001c0c
 80035e8:	42c80000 	.word	0x42c80000
 80035ec:	20001c10 	.word	0x20001c10

080035f0 <temp_loop>:

/******************************* DATA GATHERING FUNCTIONS *******************************/
/*
 * This function loops for about 15 seconds gathering measurements and placing them into a buffer.
 */
void temp_loop(){
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
	get_temp();
 80035f4:	f7ff fe7a 	bl	80032ec <get_temp>
	HAL_Delay(200);
 80035f8:	20c8      	movs	r0, #200	; 0xc8
 80035fa:	f000 fc39 	bl	8003e70 <HAL_Delay>
	temp_buf[temp_index] = temperature;
 80035fe:	4b07      	ldr	r3, [pc, #28]	; (800361c <temp_loop+0x2c>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a07      	ldr	r2, [pc, #28]	; (8003620 <temp_loop+0x30>)
 8003604:	6812      	ldr	r2, [r2, #0]
 8003606:	4907      	ldr	r1, [pc, #28]	; (8003624 <temp_loop+0x34>)
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	440b      	add	r3, r1
 800360c:	601a      	str	r2, [r3, #0]
	temp_index++;
 800360e:	4b03      	ldr	r3, [pc, #12]	; (800361c <temp_loop+0x2c>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	3301      	adds	r3, #1
 8003614:	4a01      	ldr	r2, [pc, #4]	; (800361c <temp_loop+0x2c>)
 8003616:	6013      	str	r3, [r2, #0]
}
 8003618:	bf00      	nop
 800361a:	bd80      	pop	{r7, pc}
 800361c:	20001cbc 	.word	0x20001cbc
 8003620:	200018e4 	.word	0x200018e4
 8003624:	200018e8 	.word	0x200018e8

08003628 <print_temp_status>:
/*
 * These functions are printing utilities that, based on the state and the routine they're called in, print:
 * values, alerts and indication for the patient.
 * Some of them also handle leds that represent the state.
 */
void print_temp_status(int temp_status){
 8003628:	b5b0      	push	{r4, r5, r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
	sprintf(m_temp, "TEMP: %.2f grad\r\n", mean_temp);
 8003630:	4b7d      	ldr	r3, [pc, #500]	; (8003828 <print_temp_status+0x200>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4618      	mov	r0, r3
 8003636:	f7fc ff8f 	bl	8000558 <__aeabi_f2d>
 800363a:	4602      	mov	r2, r0
 800363c:	460b      	mov	r3, r1
 800363e:	497b      	ldr	r1, [pc, #492]	; (800382c <print_temp_status+0x204>)
 8003640:	487b      	ldr	r0, [pc, #492]	; (8003830 <print_temp_status+0x208>)
 8003642:	f006 fcd1 	bl	8009fe8 <siprintf>
	sprintf(au_temp, "Error: %.2f perc\r\n\r\n", relative_uncertainty_temp);
 8003646:	4b7b      	ldr	r3, [pc, #492]	; (8003834 <print_temp_status+0x20c>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4618      	mov	r0, r3
 800364c:	f7fc ff84 	bl	8000558 <__aeabi_f2d>
 8003650:	4602      	mov	r2, r0
 8003652:	460b      	mov	r3, r1
 8003654:	4978      	ldr	r1, [pc, #480]	; (8003838 <print_temp_status+0x210>)
 8003656:	4879      	ldr	r0, [pc, #484]	; (800383c <print_temp_status+0x214>)
 8003658:	f006 fcc6 	bl	8009fe8 <siprintf>

	if(temp_status == 1){
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d155      	bne.n	800370e <print_temp_status+0xe6>
		HAL_GPIO_WritePin(red_led_GPIO_Port, red_led_Pin, 1);
 8003662:	2201      	movs	r2, #1
 8003664:	2120      	movs	r1, #32
 8003666:	4876      	ldr	r0, [pc, #472]	; (8003840 <print_temp_status+0x218>)
 8003668:	f001 ff38 	bl	80054dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green_led_GPIO_Port, green_led_Pin, 0);
 800366c:	2200      	movs	r2, #0
 800366e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003672:	4873      	ldr	r0, [pc, #460]	; (8003840 <print_temp_status+0x218>)
 8003674:	f001 ff32 	bl	80054dc <HAL_GPIO_WritePin>

		ssd1306_Clear();
 8003678:	f7ff faba 	bl	8002bf0 <ssd1306_Clear>
		ssd1306_print(5, 5, "Finger temp");
 800367c:	4a71      	ldr	r2, [pc, #452]	; (8003844 <print_temp_status+0x21c>)
 800367e:	2105      	movs	r1, #5
 8003680:	2005      	movs	r0, #5
 8003682:	f7ff fabf 	bl	8002c04 <ssd1306_print>
		ssd1306_print(5, 15, " too high!!! ");
 8003686:	4a70      	ldr	r2, [pc, #448]	; (8003848 <print_temp_status+0x220>)
 8003688:	210f      	movs	r1, #15
 800368a:	2005      	movs	r0, #5
 800368c:	f7ff faba 	bl	8002c04 <ssd1306_print>
		ssd1306_print(5, 25, m_temp);
 8003690:	4a67      	ldr	r2, [pc, #412]	; (8003830 <print_temp_status+0x208>)
 8003692:	2119      	movs	r1, #25
 8003694:	2005      	movs	r0, #5
 8003696:	f7ff fab5 	bl	8002c04 <ssd1306_print>
		ssd1306_print(5, 55, "See the doctor.");
 800369a:	4a6c      	ldr	r2, [pc, #432]	; (800384c <print_temp_status+0x224>)
 800369c:	2137      	movs	r1, #55	; 0x37
 800369e:	2005      	movs	r0, #5
 80036a0:	f7ff fab0 	bl	8002c04 <ssd1306_print>
		HAL_Delay(3000);
 80036a4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80036a8:	f000 fbe2 	bl	8003e70 <HAL_Delay>
		strcpy(uart_string_temp, "Finger temperature too high!!!\r\n");
 80036ac:	4a68      	ldr	r2, [pc, #416]	; (8003850 <print_temp_status+0x228>)
 80036ae:	4b69      	ldr	r3, [pc, #420]	; (8003854 <print_temp_status+0x22c>)
 80036b0:	4614      	mov	r4, r2
 80036b2:	461d      	mov	r5, r3
 80036b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036bc:	682b      	ldr	r3, [r5, #0]
 80036be:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)uart_string_temp, strlen(uart_string_temp), HAL_MAX_DELAY);
 80036c0:	4863      	ldr	r0, [pc, #396]	; (8003850 <print_temp_status+0x228>)
 80036c2:	f7fc fd8d 	bl	80001e0 <strlen>
 80036c6:	4603      	mov	r3, r0
 80036c8:	b29a      	uxth	r2, r3
 80036ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80036ce:	4960      	ldr	r1, [pc, #384]	; (8003850 <print_temp_status+0x228>)
 80036d0:	4861      	ldr	r0, [pc, #388]	; (8003858 <print_temp_status+0x230>)
 80036d2:	f005 fa54 	bl	8008b7e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)m_temp, strlen(m_temp), HAL_MAX_DELAY);
 80036d6:	4856      	ldr	r0, [pc, #344]	; (8003830 <print_temp_status+0x208>)
 80036d8:	f7fc fd82 	bl	80001e0 <strlen>
 80036dc:	4603      	mov	r3, r0
 80036de:	b29a      	uxth	r2, r3
 80036e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80036e4:	4952      	ldr	r1, [pc, #328]	; (8003830 <print_temp_status+0x208>)
 80036e6:	485c      	ldr	r0, [pc, #368]	; (8003858 <print_temp_status+0x230>)
 80036e8:	f005 fa49 	bl	8008b7e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)au_temp, strlen(au_temp), HAL_MAX_DELAY);
 80036ec:	4853      	ldr	r0, [pc, #332]	; (800383c <print_temp_status+0x214>)
 80036ee:	f7fc fd77 	bl	80001e0 <strlen>
 80036f2:	4603      	mov	r3, r0
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80036fa:	4950      	ldr	r1, [pc, #320]	; (800383c <print_temp_status+0x214>)
 80036fc:	4856      	ldr	r0, [pc, #344]	; (8003858 <print_temp_status+0x230>)
 80036fe:	f005 fa3e 	bl	8008b7e <HAL_UART_Transmit>

		HAL_GPIO_WritePin(red_led_GPIO_Port, red_led_Pin, 0);
 8003702:	2200      	movs	r2, #0
 8003704:	2120      	movs	r1, #32
 8003706:	484e      	ldr	r0, [pc, #312]	; (8003840 <print_temp_status+0x218>)
 8003708:	f001 fee8 	bl	80054dc <HAL_GPIO_WritePin>
		HAL_UART_Transmit(&huart2, (uint8_t*)m_temp, strlen(m_temp), HAL_MAX_DELAY);
		HAL_UART_Transmit(&huart2, (uint8_t*)au_temp, strlen(au_temp), HAL_MAX_DELAY);

		HAL_GPIO_WritePin(green_led_GPIO_Port, green_led_Pin, 0);
	}
}
 800370c:	e087      	b.n	800381e <print_temp_status+0x1f6>
	else if(temp_status == 2){
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2b02      	cmp	r3, #2
 8003712:	d133      	bne.n	800377c <print_temp_status+0x154>
		ssd1306_Clear();
 8003714:	f7ff fa6c 	bl	8002bf0 <ssd1306_Clear>
		ssd1306_print(5, 5, "Finger temp ");
 8003718:	4a50      	ldr	r2, [pc, #320]	; (800385c <print_temp_status+0x234>)
 800371a:	2105      	movs	r1, #5
 800371c:	2005      	movs	r0, #5
 800371e:	f7ff fa71 	bl	8002c04 <ssd1306_print>
		ssd1306_print(5, 15, "measure failed ");
 8003722:	4a4f      	ldr	r2, [pc, #316]	; (8003860 <print_temp_status+0x238>)
 8003724:	210f      	movs	r1, #15
 8003726:	2005      	movs	r0, #5
 8003728:	f7ff fa6c 	bl	8002c04 <ssd1306_print>
		ssd1306_print(5, 35, "New measure ");
 800372c:	4a4d      	ldr	r2, [pc, #308]	; (8003864 <print_temp_status+0x23c>)
 800372e:	2123      	movs	r1, #35	; 0x23
 8003730:	2005      	movs	r0, #5
 8003732:	f7ff fa67 	bl	8002c04 <ssd1306_print>
		ssd1306_print(5, 45, "running... ");
 8003736:	4a4c      	ldr	r2, [pc, #304]	; (8003868 <print_temp_status+0x240>)
 8003738:	212d      	movs	r1, #45	; 0x2d
 800373a:	2005      	movs	r0, #5
 800373c:	f7ff fa62 	bl	8002c04 <ssd1306_print>
		HAL_Delay(3000);
 8003740:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003744:	f000 fb94 	bl	8003e70 <HAL_Delay>
		strcpy(uart_string_temp, "Finger temperature measure failed\r\nNew measure running\r\n");
 8003748:	4a41      	ldr	r2, [pc, #260]	; (8003850 <print_temp_status+0x228>)
 800374a:	4b48      	ldr	r3, [pc, #288]	; (800386c <print_temp_status+0x244>)
 800374c:	4614      	mov	r4, r2
 800374e:	461d      	mov	r5, r3
 8003750:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003752:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003754:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003756:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003758:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800375a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800375c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003760:	c403      	stmia	r4!, {r0, r1}
 8003762:	7022      	strb	r2, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)uart_string_temp, strlen(uart_string_temp), HAL_MAX_DELAY);
 8003764:	483a      	ldr	r0, [pc, #232]	; (8003850 <print_temp_status+0x228>)
 8003766:	f7fc fd3b 	bl	80001e0 <strlen>
 800376a:	4603      	mov	r3, r0
 800376c:	b29a      	uxth	r2, r3
 800376e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003772:	4937      	ldr	r1, [pc, #220]	; (8003850 <print_temp_status+0x228>)
 8003774:	4838      	ldr	r0, [pc, #224]	; (8003858 <print_temp_status+0x230>)
 8003776:	f005 fa02 	bl	8008b7e <HAL_UART_Transmit>
}
 800377a:	e050      	b.n	800381e <print_temp_status+0x1f6>
		HAL_GPIO_WritePin(red_led_GPIO_Port, red_led_Pin, 0);
 800377c:	2200      	movs	r2, #0
 800377e:	2120      	movs	r1, #32
 8003780:	482f      	ldr	r0, [pc, #188]	; (8003840 <print_temp_status+0x218>)
 8003782:	f001 feab 	bl	80054dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green_led_GPIO_Port, green_led_Pin, 1);
 8003786:	2201      	movs	r2, #1
 8003788:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800378c:	482c      	ldr	r0, [pc, #176]	; (8003840 <print_temp_status+0x218>)
 800378e:	f001 fea5 	bl	80054dc <HAL_GPIO_WritePin>
		ssd1306_Clear();
 8003792:	f7ff fa2d 	bl	8002bf0 <ssd1306_Clear>
		ssd1306_print(5, 5, "Good finger");
 8003796:	4a36      	ldr	r2, [pc, #216]	; (8003870 <print_temp_status+0x248>)
 8003798:	2105      	movs	r1, #5
 800379a:	2005      	movs	r0, #5
 800379c:	f7ff fa32 	bl	8002c04 <ssd1306_print>
		ssd1306_print(5, 15, " temperature!");
 80037a0:	4a34      	ldr	r2, [pc, #208]	; (8003874 <print_temp_status+0x24c>)
 80037a2:	210f      	movs	r1, #15
 80037a4:	2005      	movs	r0, #5
 80037a6:	f7ff fa2d 	bl	8002c04 <ssd1306_print>
		ssd1306_print(5, 35, m_temp);
 80037aa:	4a21      	ldr	r2, [pc, #132]	; (8003830 <print_temp_status+0x208>)
 80037ac:	2123      	movs	r1, #35	; 0x23
 80037ae:	2005      	movs	r0, #5
 80037b0:	f7ff fa28 	bl	8002c04 <ssd1306_print>
		HAL_Delay(3000);
 80037b4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80037b8:	f000 fb5a 	bl	8003e70 <HAL_Delay>
		strcpy(uart_string_temp, "Good finger temperature\r\n");
 80037bc:	4a24      	ldr	r2, [pc, #144]	; (8003850 <print_temp_status+0x228>)
 80037be:	4b2e      	ldr	r3, [pc, #184]	; (8003878 <print_temp_status+0x250>)
 80037c0:	4614      	mov	r4, r2
 80037c2:	461d      	mov	r5, r3
 80037c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80037cc:	c403      	stmia	r4!, {r0, r1}
 80037ce:	8022      	strh	r2, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)uart_string_temp, strlen(uart_string_temp), HAL_MAX_DELAY);
 80037d0:	481f      	ldr	r0, [pc, #124]	; (8003850 <print_temp_status+0x228>)
 80037d2:	f7fc fd05 	bl	80001e0 <strlen>
 80037d6:	4603      	mov	r3, r0
 80037d8:	b29a      	uxth	r2, r3
 80037da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037de:	491c      	ldr	r1, [pc, #112]	; (8003850 <print_temp_status+0x228>)
 80037e0:	481d      	ldr	r0, [pc, #116]	; (8003858 <print_temp_status+0x230>)
 80037e2:	f005 f9cc 	bl	8008b7e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)m_temp, strlen(m_temp), HAL_MAX_DELAY);
 80037e6:	4812      	ldr	r0, [pc, #72]	; (8003830 <print_temp_status+0x208>)
 80037e8:	f7fc fcfa 	bl	80001e0 <strlen>
 80037ec:	4603      	mov	r3, r0
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037f4:	490e      	ldr	r1, [pc, #56]	; (8003830 <print_temp_status+0x208>)
 80037f6:	4818      	ldr	r0, [pc, #96]	; (8003858 <print_temp_status+0x230>)
 80037f8:	f005 f9c1 	bl	8008b7e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)au_temp, strlen(au_temp), HAL_MAX_DELAY);
 80037fc:	480f      	ldr	r0, [pc, #60]	; (800383c <print_temp_status+0x214>)
 80037fe:	f7fc fcef 	bl	80001e0 <strlen>
 8003802:	4603      	mov	r3, r0
 8003804:	b29a      	uxth	r2, r3
 8003806:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800380a:	490c      	ldr	r1, [pc, #48]	; (800383c <print_temp_status+0x214>)
 800380c:	4812      	ldr	r0, [pc, #72]	; (8003858 <print_temp_status+0x230>)
 800380e:	f005 f9b6 	bl	8008b7e <HAL_UART_Transmit>
		HAL_GPIO_WritePin(green_led_GPIO_Port, green_led_Pin, 0);
 8003812:	2200      	movs	r2, #0
 8003814:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003818:	4809      	ldr	r0, [pc, #36]	; (8003840 <print_temp_status+0x218>)
 800381a:	f001 fe5f 	bl	80054dc <HAL_GPIO_WritePin>
}
 800381e:	bf00      	nop
 8003820:	3708      	adds	r7, #8
 8003822:	46bd      	mov	sp, r7
 8003824:	bdb0      	pop	{r4, r5, r7, pc}
 8003826:	bf00      	nop
 8003828:	20001c08 	.word	0x20001c08
 800382c:	0800e304 	.word	0x0800e304
 8003830:	20001c40 	.word	0x20001c40
 8003834:	20001c10 	.word	0x20001c10
 8003838:	0800e318 	.word	0x0800e318
 800383c:	20001c60 	.word	0x20001c60
 8003840:	40020400 	.word	0x40020400
 8003844:	0800e330 	.word	0x0800e330
 8003848:	0800e33c 	.word	0x0800e33c
 800384c:	0800e34c 	.word	0x0800e34c
 8003850:	20001c80 	.word	0x20001c80
 8003854:	0800e35c 	.word	0x0800e35c
 8003858:	20001dec 	.word	0x20001dec
 800385c:	0800e380 	.word	0x0800e380
 8003860:	0800e390 	.word	0x0800e390
 8003864:	0800e3a0 	.word	0x0800e3a0
 8003868:	0800e3b0 	.word	0x0800e3b0
 800386c:	0800e3bc 	.word	0x0800e3bc
 8003870:	0800e3f8 	.word	0x0800e3f8
 8003874:	0800e404 	.word	0x0800e404
 8003878:	0800e414 	.word	0x0800e414

0800387c <print_temp>:

void print_temp(){
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
	sprintf(temp_string, "TEMP: %.2f grad\r\n", temperature);
 8003880:	4b13      	ldr	r3, [pc, #76]	; (80038d0 <print_temp+0x54>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4618      	mov	r0, r3
 8003886:	f7fc fe67 	bl	8000558 <__aeabi_f2d>
 800388a:	4602      	mov	r2, r0
 800388c:	460b      	mov	r3, r1
 800388e:	4911      	ldr	r1, [pc, #68]	; (80038d4 <print_temp+0x58>)
 8003890:	4811      	ldr	r0, [pc, #68]	; (80038d8 <print_temp+0x5c>)
 8003892:	f006 fba9 	bl	8009fe8 <siprintf>
	ssd1306_print(5, 54, temp_string);
 8003896:	4a10      	ldr	r2, [pc, #64]	; (80038d8 <print_temp+0x5c>)
 8003898:	2136      	movs	r1, #54	; 0x36
 800389a:	2005      	movs	r0, #5
 800389c:	f7ff f9b2 	bl	8002c04 <ssd1306_print>
	HAL_UART_Transmit(&huart2, (uint8_t*)temp_string, strlen(temp_string), HAL_MAX_DELAY);
 80038a0:	480d      	ldr	r0, [pc, #52]	; (80038d8 <print_temp+0x5c>)
 80038a2:	f7fc fc9d 	bl	80001e0 <strlen>
 80038a6:	4603      	mov	r3, r0
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038ae:	490a      	ldr	r1, [pc, #40]	; (80038d8 <print_temp+0x5c>)
 80038b0:	480a      	ldr	r0, [pc, #40]	; (80038dc <print_temp+0x60>)
 80038b2:	f005 f964 	bl	8008b7e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)empty_row_string, strlen(empty_row_string), HAL_MAX_DELAY);
 80038b6:	480a      	ldr	r0, [pc, #40]	; (80038e0 <print_temp+0x64>)
 80038b8:	f7fc fc92 	bl	80001e0 <strlen>
 80038bc:	4603      	mov	r3, r0
 80038be:	b29a      	uxth	r2, r3
 80038c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038c4:	4906      	ldr	r1, [pc, #24]	; (80038e0 <print_temp+0x64>)
 80038c6:	4805      	ldr	r0, [pc, #20]	; (80038dc <print_temp+0x60>)
 80038c8:	f005 f959 	bl	8008b7e <HAL_UART_Transmit>
}
 80038cc:	bf00      	nop
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	200018e4 	.word	0x200018e4
 80038d4:	0800e304 	.word	0x0800e304
 80038d8:	20001c20 	.word	0x20001c20
 80038dc:	20001dec 	.word	0x20001dec
 80038e0:	20000010 	.word	0x20000010

080038e4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038ea:	f107 0308 	add.w	r3, r7, #8
 80038ee:	2200      	movs	r2, #0
 80038f0:	601a      	str	r2, [r3, #0]
 80038f2:	605a      	str	r2, [r3, #4]
 80038f4:	609a      	str	r2, [r3, #8]
 80038f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038f8:	463b      	mov	r3, r7
 80038fa:	2200      	movs	r2, #0
 80038fc:	601a      	str	r2, [r3, #0]
 80038fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003900:	4b1e      	ldr	r3, [pc, #120]	; (800397c <MX_TIM2_Init+0x98>)
 8003902:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003906:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41999;
 8003908:	4b1c      	ldr	r3, [pc, #112]	; (800397c <MX_TIM2_Init+0x98>)
 800390a:	f24a 420f 	movw	r2, #41999	; 0xa40f
 800390e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003910:	4b1a      	ldr	r3, [pc, #104]	; (800397c <MX_TIM2_Init+0x98>)
 8003912:	2200      	movs	r2, #0
 8003914:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 8003916:	4b19      	ldr	r3, [pc, #100]	; (800397c <MX_TIM2_Init+0x98>)
 8003918:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800391c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800391e:	4b17      	ldr	r3, [pc, #92]	; (800397c <MX_TIM2_Init+0x98>)
 8003920:	2200      	movs	r2, #0
 8003922:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003924:	4b15      	ldr	r3, [pc, #84]	; (800397c <MX_TIM2_Init+0x98>)
 8003926:	2200      	movs	r2, #0
 8003928:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800392a:	4814      	ldr	r0, [pc, #80]	; (800397c <MX_TIM2_Init+0x98>)
 800392c:	f004 f802 	bl	8007934 <HAL_TIM_Base_Init>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003936:	f7fe f84b 	bl	80019d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800393a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800393e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003940:	f107 0308 	add.w	r3, r7, #8
 8003944:	4619      	mov	r1, r3
 8003946:	480d      	ldr	r0, [pc, #52]	; (800397c <MX_TIM2_Init+0x98>)
 8003948:	f004 fc8e 	bl	8008268 <HAL_TIM_ConfigClockSource>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003952:	f7fe f83d 	bl	80019d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003956:	2320      	movs	r3, #32
 8003958:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800395a:	2380      	movs	r3, #128	; 0x80
 800395c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800395e:	463b      	mov	r3, r7
 8003960:	4619      	mov	r1, r3
 8003962:	4806      	ldr	r0, [pc, #24]	; (800397c <MX_TIM2_Init+0x98>)
 8003964:	f005 f83c 	bl	80089e0 <HAL_TIMEx_MasterConfigSynchronization>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800396e:	f7fe f82f 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003972:	bf00      	nop
 8003974:	3718      	adds	r7, #24
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	20001ccc 	.word	0x20001ccc

08003980 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b08e      	sub	sp, #56	; 0x38
 8003984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003986:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800398a:	2200      	movs	r2, #0
 800398c:	601a      	str	r2, [r3, #0]
 800398e:	605a      	str	r2, [r3, #4]
 8003990:	609a      	str	r2, [r3, #8]
 8003992:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003994:	f107 0320 	add.w	r3, r7, #32
 8003998:	2200      	movs	r2, #0
 800399a:	601a      	str	r2, [r3, #0]
 800399c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800399e:	1d3b      	adds	r3, r7, #4
 80039a0:	2200      	movs	r2, #0
 80039a2:	601a      	str	r2, [r3, #0]
 80039a4:	605a      	str	r2, [r3, #4]
 80039a6:	609a      	str	r2, [r3, #8]
 80039a8:	60da      	str	r2, [r3, #12]
 80039aa:	611a      	str	r2, [r3, #16]
 80039ac:	615a      	str	r2, [r3, #20]
 80039ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80039b0:	4b2d      	ldr	r3, [pc, #180]	; (8003a68 <MX_TIM3_Init+0xe8>)
 80039b2:	4a2e      	ldr	r2, [pc, #184]	; (8003a6c <MX_TIM3_Init+0xec>)
 80039b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 319;
 80039b6:	4b2c      	ldr	r3, [pc, #176]	; (8003a68 <MX_TIM3_Init+0xe8>)
 80039b8:	f240 123f 	movw	r2, #319	; 0x13f
 80039bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039be:	4b2a      	ldr	r3, [pc, #168]	; (8003a68 <MX_TIM3_Init+0xe8>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80039c4:	4b28      	ldr	r3, [pc, #160]	; (8003a68 <MX_TIM3_Init+0xe8>)
 80039c6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80039ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039cc:	4b26      	ldr	r3, [pc, #152]	; (8003a68 <MX_TIM3_Init+0xe8>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039d2:	4b25      	ldr	r3, [pc, #148]	; (8003a68 <MX_TIM3_Init+0xe8>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80039d8:	4823      	ldr	r0, [pc, #140]	; (8003a68 <MX_TIM3_Init+0xe8>)
 80039da:	f003 ffab 	bl	8007934 <HAL_TIM_Base_Init>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d001      	beq.n	80039e8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80039e4:	f7fd fff4 	bl	80019d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039ec:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80039ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039f2:	4619      	mov	r1, r3
 80039f4:	481c      	ldr	r0, [pc, #112]	; (8003a68 <MX_TIM3_Init+0xe8>)
 80039f6:	f004 fc37 	bl	8008268 <HAL_TIM_ConfigClockSource>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d001      	beq.n	8003a04 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8003a00:	f7fd ffe6 	bl	80019d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003a04:	4818      	ldr	r0, [pc, #96]	; (8003a68 <MX_TIM3_Init+0xe8>)
 8003a06:	f004 f8f8 	bl	8007bfa <HAL_TIM_PWM_Init>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d001      	beq.n	8003a14 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8003a10:	f7fd ffde 	bl	80019d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a14:	2300      	movs	r3, #0
 8003a16:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003a1c:	f107 0320 	add.w	r3, r7, #32
 8003a20:	4619      	mov	r1, r3
 8003a22:	4811      	ldr	r0, [pc, #68]	; (8003a68 <MX_TIM3_Init+0xe8>)
 8003a24:	f004 ffdc 	bl	80089e0 <HAL_TIMEx_MasterConfigSynchronization>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8003a2e:	f7fd ffcf 	bl	80019d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a32:	2360      	movs	r3, #96	; 0x60
 8003a34:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 499;
 8003a36:	f240 13f3 	movw	r3, #499	; 0x1f3
 8003a3a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a40:	2300      	movs	r3, #0
 8003a42:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a44:	1d3b      	adds	r3, r7, #4
 8003a46:	2200      	movs	r2, #0
 8003a48:	4619      	mov	r1, r3
 8003a4a:	4807      	ldr	r0, [pc, #28]	; (8003a68 <MX_TIM3_Init+0xe8>)
 8003a4c:	f004 fb4a 	bl	80080e4 <HAL_TIM_PWM_ConfigChannel>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8003a56:	f7fd ffbb 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003a5a:	4803      	ldr	r0, [pc, #12]	; (8003a68 <MX_TIM3_Init+0xe8>)
 8003a5c:	f000 f8c0 	bl	8003be0 <HAL_TIM_MspPostInit>

}
 8003a60:	bf00      	nop
 8003a62:	3738      	adds	r7, #56	; 0x38
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	20001d14 	.word	0x20001d14
 8003a6c:	40000400 	.word	0x40000400

08003a70 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8003a74:	4b0e      	ldr	r3, [pc, #56]	; (8003ab0 <MX_TIM10_Init+0x40>)
 8003a76:	4a0f      	ldr	r2, [pc, #60]	; (8003ab4 <MX_TIM10_Init+0x44>)
 8003a78:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 15999;
 8003a7a:	4b0d      	ldr	r3, [pc, #52]	; (8003ab0 <MX_TIM10_Init+0x40>)
 8003a7c:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8003a80:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a82:	4b0b      	ldr	r3, [pc, #44]	; (8003ab0 <MX_TIM10_Init+0x40>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 14985;
 8003a88:	4b09      	ldr	r3, [pc, #36]	; (8003ab0 <MX_TIM10_Init+0x40>)
 8003a8a:	f643 2289 	movw	r2, #14985	; 0x3a89
 8003a8e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a90:	4b07      	ldr	r3, [pc, #28]	; (8003ab0 <MX_TIM10_Init+0x40>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a96:	4b06      	ldr	r3, [pc, #24]	; (8003ab0 <MX_TIM10_Init+0x40>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8003a9c:	4804      	ldr	r0, [pc, #16]	; (8003ab0 <MX_TIM10_Init+0x40>)
 8003a9e:	f003 ff49 	bl	8007934 <HAL_TIM_Base_Init>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d001      	beq.n	8003aac <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8003aa8:	f7fd ff92 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8003aac:	bf00      	nop
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	20001d5c 	.word	0x20001d5c
 8003ab4:	40014400 	.word	0x40014400

08003ab8 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8003abc:	4b0e      	ldr	r3, [pc, #56]	; (8003af8 <MX_TIM11_Init+0x40>)
 8003abe:	4a0f      	ldr	r2, [pc, #60]	; (8003afc <MX_TIM11_Init+0x44>)
 8003ac0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 159;
 8003ac2:	4b0d      	ldr	r3, [pc, #52]	; (8003af8 <MX_TIM11_Init+0x40>)
 8003ac4:	229f      	movs	r2, #159	; 0x9f
 8003ac6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ac8:	4b0b      	ldr	r3, [pc, #44]	; (8003af8 <MX_TIM11_Init+0x40>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 999;
 8003ace:	4b0a      	ldr	r3, [pc, #40]	; (8003af8 <MX_TIM11_Init+0x40>)
 8003ad0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003ad4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ad6:	4b08      	ldr	r3, [pc, #32]	; (8003af8 <MX_TIM11_Init+0x40>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003adc:	4b06      	ldr	r3, [pc, #24]	; (8003af8 <MX_TIM11_Init+0x40>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003ae2:	4805      	ldr	r0, [pc, #20]	; (8003af8 <MX_TIM11_Init+0x40>)
 8003ae4:	f003 ff26 	bl	8007934 <HAL_TIM_Base_Init>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8003aee:	f7fd ff6f 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8003af2:	bf00      	nop
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	20001da4 	.word	0x20001da4
 8003afc:	40014800 	.word	0x40014800

08003b00 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b10:	d10e      	bne.n	8003b30 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003b12:	2300      	movs	r3, #0
 8003b14:	617b      	str	r3, [r7, #20]
 8003b16:	4b2e      	ldr	r3, [pc, #184]	; (8003bd0 <HAL_TIM_Base_MspInit+0xd0>)
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	4a2d      	ldr	r2, [pc, #180]	; (8003bd0 <HAL_TIM_Base_MspInit+0xd0>)
 8003b1c:	f043 0301 	orr.w	r3, r3, #1
 8003b20:	6413      	str	r3, [r2, #64]	; 0x40
 8003b22:	4b2b      	ldr	r3, [pc, #172]	; (8003bd0 <HAL_TIM_Base_MspInit+0xd0>)
 8003b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	617b      	str	r3, [r7, #20]
 8003b2c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8003b2e:	e04a      	b.n	8003bc6 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM3)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a27      	ldr	r2, [pc, #156]	; (8003bd4 <HAL_TIM_Base_MspInit+0xd4>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d10e      	bne.n	8003b58 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	613b      	str	r3, [r7, #16]
 8003b3e:	4b24      	ldr	r3, [pc, #144]	; (8003bd0 <HAL_TIM_Base_MspInit+0xd0>)
 8003b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b42:	4a23      	ldr	r2, [pc, #140]	; (8003bd0 <HAL_TIM_Base_MspInit+0xd0>)
 8003b44:	f043 0302 	orr.w	r3, r3, #2
 8003b48:	6413      	str	r3, [r2, #64]	; 0x40
 8003b4a:	4b21      	ldr	r3, [pc, #132]	; (8003bd0 <HAL_TIM_Base_MspInit+0xd0>)
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	613b      	str	r3, [r7, #16]
 8003b54:	693b      	ldr	r3, [r7, #16]
}
 8003b56:	e036      	b.n	8003bc6 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM10)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a1e      	ldr	r2, [pc, #120]	; (8003bd8 <HAL_TIM_Base_MspInit+0xd8>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d116      	bne.n	8003b90 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003b62:	2300      	movs	r3, #0
 8003b64:	60fb      	str	r3, [r7, #12]
 8003b66:	4b1a      	ldr	r3, [pc, #104]	; (8003bd0 <HAL_TIM_Base_MspInit+0xd0>)
 8003b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6a:	4a19      	ldr	r2, [pc, #100]	; (8003bd0 <HAL_TIM_Base_MspInit+0xd0>)
 8003b6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b70:	6453      	str	r3, [r2, #68]	; 0x44
 8003b72:	4b17      	ldr	r3, [pc, #92]	; (8003bd0 <HAL_TIM_Base_MspInit+0xd0>)
 8003b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b7a:	60fb      	str	r3, [r7, #12]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003b7e:	2200      	movs	r2, #0
 8003b80:	2100      	movs	r1, #0
 8003b82:	2019      	movs	r0, #25
 8003b84:	f000 ff7f 	bl	8004a86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003b88:	2019      	movs	r0, #25
 8003b8a:	f000 ff98 	bl	8004abe <HAL_NVIC_EnableIRQ>
}
 8003b8e:	e01a      	b.n	8003bc6 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM11)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a11      	ldr	r2, [pc, #68]	; (8003bdc <HAL_TIM_Base_MspInit+0xdc>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d115      	bne.n	8003bc6 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	60bb      	str	r3, [r7, #8]
 8003b9e:	4b0c      	ldr	r3, [pc, #48]	; (8003bd0 <HAL_TIM_Base_MspInit+0xd0>)
 8003ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba2:	4a0b      	ldr	r2, [pc, #44]	; (8003bd0 <HAL_TIM_Base_MspInit+0xd0>)
 8003ba4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ba8:	6453      	str	r3, [r2, #68]	; 0x44
 8003baa:	4b09      	ldr	r3, [pc, #36]	; (8003bd0 <HAL_TIM_Base_MspInit+0xd0>)
 8003bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bb2:	60bb      	str	r3, [r7, #8]
 8003bb4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	2100      	movs	r1, #0
 8003bba:	201a      	movs	r0, #26
 8003bbc:	f000 ff63 	bl	8004a86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003bc0:	201a      	movs	r0, #26
 8003bc2:	f000 ff7c 	bl	8004abe <HAL_NVIC_EnableIRQ>
}
 8003bc6:	bf00      	nop
 8003bc8:	3718      	adds	r7, #24
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	40023800 	.word	0x40023800
 8003bd4:	40000400 	.word	0x40000400
 8003bd8:	40014400 	.word	0x40014400
 8003bdc:	40014800 	.word	0x40014800

08003be0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b088      	sub	sp, #32
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003be8:	f107 030c 	add.w	r3, r7, #12
 8003bec:	2200      	movs	r2, #0
 8003bee:	601a      	str	r2, [r3, #0]
 8003bf0:	605a      	str	r2, [r3, #4]
 8003bf2:	609a      	str	r2, [r3, #8]
 8003bf4:	60da      	str	r2, [r3, #12]
 8003bf6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a12      	ldr	r2, [pc, #72]	; (8003c48 <HAL_TIM_MspPostInit+0x68>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d11d      	bne.n	8003c3e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c02:	2300      	movs	r3, #0
 8003c04:	60bb      	str	r3, [r7, #8]
 8003c06:	4b11      	ldr	r3, [pc, #68]	; (8003c4c <HAL_TIM_MspPostInit+0x6c>)
 8003c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0a:	4a10      	ldr	r2, [pc, #64]	; (8003c4c <HAL_TIM_MspPostInit+0x6c>)
 8003c0c:	f043 0302 	orr.w	r3, r3, #2
 8003c10:	6313      	str	r3, [r2, #48]	; 0x30
 8003c12:	4b0e      	ldr	r3, [pc, #56]	; (8003c4c <HAL_TIM_MspPostInit+0x6c>)
 8003c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c16:	f003 0302 	and.w	r3, r3, #2
 8003c1a:	60bb      	str	r3, [r7, #8]
 8003c1c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003c1e:	2310      	movs	r3, #16
 8003c20:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c22:	2302      	movs	r3, #2
 8003c24:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c26:	2300      	movs	r3, #0
 8003c28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003c2e:	2302      	movs	r3, #2
 8003c30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c32:	f107 030c 	add.w	r3, r7, #12
 8003c36:	4619      	mov	r1, r3
 8003c38:	4805      	ldr	r0, [pc, #20]	; (8003c50 <HAL_TIM_MspPostInit+0x70>)
 8003c3a:	f001 facb 	bl	80051d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003c3e:	bf00      	nop
 8003c40:	3720      	adds	r7, #32
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	40000400 	.word	0x40000400
 8003c4c:	40023800 	.word	0x40023800
 8003c50:	40020400 	.word	0x40020400

08003c54 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003c58:	4b11      	ldr	r3, [pc, #68]	; (8003ca0 <MX_USART2_UART_Init+0x4c>)
 8003c5a:	4a12      	ldr	r2, [pc, #72]	; (8003ca4 <MX_USART2_UART_Init+0x50>)
 8003c5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003c5e:	4b10      	ldr	r3, [pc, #64]	; (8003ca0 <MX_USART2_UART_Init+0x4c>)
 8003c60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003c64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003c66:	4b0e      	ldr	r3, [pc, #56]	; (8003ca0 <MX_USART2_UART_Init+0x4c>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003c6c:	4b0c      	ldr	r3, [pc, #48]	; (8003ca0 <MX_USART2_UART_Init+0x4c>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003c72:	4b0b      	ldr	r3, [pc, #44]	; (8003ca0 <MX_USART2_UART_Init+0x4c>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003c78:	4b09      	ldr	r3, [pc, #36]	; (8003ca0 <MX_USART2_UART_Init+0x4c>)
 8003c7a:	220c      	movs	r2, #12
 8003c7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c7e:	4b08      	ldr	r3, [pc, #32]	; (8003ca0 <MX_USART2_UART_Init+0x4c>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c84:	4b06      	ldr	r3, [pc, #24]	; (8003ca0 <MX_USART2_UART_Init+0x4c>)
 8003c86:	2200      	movs	r2, #0
 8003c88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003c8a:	4805      	ldr	r0, [pc, #20]	; (8003ca0 <MX_USART2_UART_Init+0x4c>)
 8003c8c:	f004 ff2a 	bl	8008ae4 <HAL_UART_Init>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d001      	beq.n	8003c9a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003c96:	f7fd fe9b 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003c9a:	bf00      	nop
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	20001dec 	.word	0x20001dec
 8003ca4:	40004400 	.word	0x40004400

08003ca8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b08a      	sub	sp, #40	; 0x28
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cb0:	f107 0314 	add.w	r3, r7, #20
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	601a      	str	r2, [r3, #0]
 8003cb8:	605a      	str	r2, [r3, #4]
 8003cba:	609a      	str	r2, [r3, #8]
 8003cbc:	60da      	str	r2, [r3, #12]
 8003cbe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a19      	ldr	r2, [pc, #100]	; (8003d2c <HAL_UART_MspInit+0x84>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d12b      	bne.n	8003d22 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003cca:	2300      	movs	r3, #0
 8003ccc:	613b      	str	r3, [r7, #16]
 8003cce:	4b18      	ldr	r3, [pc, #96]	; (8003d30 <HAL_UART_MspInit+0x88>)
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd2:	4a17      	ldr	r2, [pc, #92]	; (8003d30 <HAL_UART_MspInit+0x88>)
 8003cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8003cda:	4b15      	ldr	r3, [pc, #84]	; (8003d30 <HAL_UART_MspInit+0x88>)
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce2:	613b      	str	r3, [r7, #16]
 8003ce4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	60fb      	str	r3, [r7, #12]
 8003cea:	4b11      	ldr	r3, [pc, #68]	; (8003d30 <HAL_UART_MspInit+0x88>)
 8003cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cee:	4a10      	ldr	r2, [pc, #64]	; (8003d30 <HAL_UART_MspInit+0x88>)
 8003cf0:	f043 0301 	orr.w	r3, r3, #1
 8003cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8003cf6:	4b0e      	ldr	r3, [pc, #56]	; (8003d30 <HAL_UART_MspInit+0x88>)
 8003cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	60fb      	str	r3, [r7, #12]
 8003d00:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003d02:	230c      	movs	r3, #12
 8003d04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d06:	2302      	movs	r3, #2
 8003d08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003d12:	2307      	movs	r3, #7
 8003d14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d16:	f107 0314 	add.w	r3, r7, #20
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	4805      	ldr	r0, [pc, #20]	; (8003d34 <HAL_UART_MspInit+0x8c>)
 8003d1e:	f001 fa59 	bl	80051d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003d22:	bf00      	nop
 8003d24:	3728      	adds	r7, #40	; 0x28
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	40004400 	.word	0x40004400
 8003d30:	40023800 	.word	0x40023800
 8003d34:	40020000 	.word	0x40020000

08003d38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003d38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003d3c:	480d      	ldr	r0, [pc, #52]	; (8003d74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003d3e:	490e      	ldr	r1, [pc, #56]	; (8003d78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003d40:	4a0e      	ldr	r2, [pc, #56]	; (8003d7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003d42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d44:	e002      	b.n	8003d4c <LoopCopyDataInit>

08003d46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d4a:	3304      	adds	r3, #4

08003d4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d50:	d3f9      	bcc.n	8003d46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d52:	4a0b      	ldr	r2, [pc, #44]	; (8003d80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003d54:	4c0b      	ldr	r4, [pc, #44]	; (8003d84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003d56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d58:	e001      	b.n	8003d5e <LoopFillZerobss>

08003d5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d5c:	3204      	adds	r2, #4

08003d5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d60:	d3fb      	bcc.n	8003d5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003d62:	f7ff fa51 	bl	8003208 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d66:	f005 fa85 	bl	8009274 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d6a:	f7fd fbeb 	bl	8001544 <main>
  bx  lr    
 8003d6e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003d70:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003d74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d78:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8003d7c:	0800f074 	.word	0x0800f074
  ldr r2, =_sbss
 8003d80:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8003d84:	20001e44 	.word	0x20001e44

08003d88 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d88:	e7fe      	b.n	8003d88 <DMA1_Stream0_IRQHandler>
	...

08003d8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d90:	4b0e      	ldr	r3, [pc, #56]	; (8003dcc <HAL_Init+0x40>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a0d      	ldr	r2, [pc, #52]	; (8003dcc <HAL_Init+0x40>)
 8003d96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d9c:	4b0b      	ldr	r3, [pc, #44]	; (8003dcc <HAL_Init+0x40>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a0a      	ldr	r2, [pc, #40]	; (8003dcc <HAL_Init+0x40>)
 8003da2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003da6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003da8:	4b08      	ldr	r3, [pc, #32]	; (8003dcc <HAL_Init+0x40>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a07      	ldr	r2, [pc, #28]	; (8003dcc <HAL_Init+0x40>)
 8003dae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003db2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003db4:	2003      	movs	r0, #3
 8003db6:	f000 fe5b 	bl	8004a70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003dba:	2000      	movs	r0, #0
 8003dbc:	f000 f808 	bl	8003dd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003dc0:	f7ff f8d4 	bl	8002f6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	40023c00 	.word	0x40023c00

08003dd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003dd8:	4b12      	ldr	r3, [pc, #72]	; (8003e24 <HAL_InitTick+0x54>)
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	4b12      	ldr	r3, [pc, #72]	; (8003e28 <HAL_InitTick+0x58>)
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	4619      	mov	r1, r3
 8003de2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003de6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dee:	4618      	mov	r0, r3
 8003df0:	f000 fe73 	bl	8004ada <HAL_SYSTICK_Config>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d001      	beq.n	8003dfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e00e      	b.n	8003e1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2b0f      	cmp	r3, #15
 8003e02:	d80a      	bhi.n	8003e1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e04:	2200      	movs	r2, #0
 8003e06:	6879      	ldr	r1, [r7, #4]
 8003e08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e0c:	f000 fe3b 	bl	8004a86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e10:	4a06      	ldr	r2, [pc, #24]	; (8003e2c <HAL_InitTick+0x5c>)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
 8003e18:	e000      	b.n	8003e1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3708      	adds	r7, #8
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	2000000c 	.word	0x2000000c
 8003e28:	20000018 	.word	0x20000018
 8003e2c:	20000014 	.word	0x20000014

08003e30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e30:	b480      	push	{r7}
 8003e32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e34:	4b06      	ldr	r3, [pc, #24]	; (8003e50 <HAL_IncTick+0x20>)
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	461a      	mov	r2, r3
 8003e3a:	4b06      	ldr	r3, [pc, #24]	; (8003e54 <HAL_IncTick+0x24>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4413      	add	r3, r2
 8003e40:	4a04      	ldr	r2, [pc, #16]	; (8003e54 <HAL_IncTick+0x24>)
 8003e42:	6013      	str	r3, [r2, #0]
}
 8003e44:	bf00      	nop
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	20000018 	.word	0x20000018
 8003e54:	20001e30 	.word	0x20001e30

08003e58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	af00      	add	r7, sp, #0
  return uwTick;
 8003e5c:	4b03      	ldr	r3, [pc, #12]	; (8003e6c <HAL_GetTick+0x14>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	20001e30 	.word	0x20001e30

08003e70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e78:	f7ff ffee 	bl	8003e58 <HAL_GetTick>
 8003e7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e88:	d005      	beq.n	8003e96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e8a:	4b0a      	ldr	r3, [pc, #40]	; (8003eb4 <HAL_Delay+0x44>)
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	4413      	add	r3, r2
 8003e94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003e96:	bf00      	nop
 8003e98:	f7ff ffde 	bl	8003e58 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d8f7      	bhi.n	8003e98 <HAL_Delay+0x28>
  {
  }
}
 8003ea8:	bf00      	nop
 8003eaa:	bf00      	nop
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	20000018 	.word	0x20000018

08003eb8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d101      	bne.n	8003ece <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e033      	b.n	8003f36 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d109      	bne.n	8003eea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f7fd f8e8 	bl	80010ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eee:	f003 0310 	and.w	r3, r3, #16
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d118      	bne.n	8003f28 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003efe:	f023 0302 	bic.w	r3, r3, #2
 8003f02:	f043 0202 	orr.w	r2, r3, #2
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 fb58 	bl	80045c0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1a:	f023 0303 	bic.w	r3, r3, #3
 8003f1e:	f043 0201 	orr.w	r2, r3, #1
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	641a      	str	r2, [r3, #64]	; 0x40
 8003f26:	e001      	b.n	8003f2c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b086      	sub	sp, #24
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003f46:	2300      	movs	r3, #0
 8003f48:	617b      	str	r3, [r7, #20]
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f003 0302 	and.w	r3, r3, #2
 8003f64:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	f003 0320 	and.w	r3, r3, #32
 8003f6c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d049      	beq.n	8004008 <HAL_ADC_IRQHandler+0xca>
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d046      	beq.n	8004008 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7e:	f003 0310 	and.w	r3, r3, #16
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d105      	bne.n	8003f92 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d12b      	bne.n	8003ff8 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d127      	bne.n	8003ff8 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fae:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d006      	beq.n	8003fc4 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d119      	bne.n	8003ff8 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	685a      	ldr	r2, [r3, #4]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f022 0220 	bic.w	r2, r2, #32
 8003fd2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d105      	bne.n	8003ff8 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff0:	f043 0201 	orr.w	r2, r3, #1
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f7fd fc3b 	bl	8001874 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f06f 0212 	mvn.w	r2, #18
 8004006:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f003 0304 	and.w	r3, r3, #4
 800400e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004016:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d057      	beq.n	80040ce <HAL_ADC_IRQHandler+0x190>
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d054      	beq.n	80040ce <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004028:	f003 0310 	and.w	r3, r3, #16
 800402c:	2b00      	cmp	r3, #0
 800402e:	d105      	bne.n	800403c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004034:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d139      	bne.n	80040be <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004050:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004054:	2b00      	cmp	r3, #0
 8004056:	d006      	beq.n	8004066 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004062:	2b00      	cmp	r3, #0
 8004064:	d12b      	bne.n	80040be <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8004070:	2b00      	cmp	r3, #0
 8004072:	d124      	bne.n	80040be <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800407e:	2b00      	cmp	r3, #0
 8004080:	d11d      	bne.n	80040be <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004086:	2b00      	cmp	r3, #0
 8004088:	d119      	bne.n	80040be <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	685a      	ldr	r2, [r3, #4]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004098:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d105      	bne.n	80040be <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b6:	f043 0201 	orr.w	r2, r3, #1
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 fbfc 	bl	80048bc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f06f 020c 	mvn.w	r2, #12
 80040cc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f003 0301 	and.w	r3, r3, #1
 80040d4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040dc:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d017      	beq.n	8004114 <HAL_ADC_IRQHandler+0x1d6>
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d014      	beq.n	8004114 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0301 	and.w	r3, r3, #1
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d10d      	bne.n	8004114 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 f925 	bl	8004354 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f06f 0201 	mvn.w	r2, #1
 8004112:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f003 0320 	and.w	r3, r3, #32
 800411a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004122:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d015      	beq.n	8004156 <HAL_ADC_IRQHandler+0x218>
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d012      	beq.n	8004156 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004134:	f043 0202 	orr.w	r2, r3, #2
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f06f 0220 	mvn.w	r2, #32
 8004144:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f90e 	bl	8004368 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f06f 0220 	mvn.w	r2, #32
 8004154:	601a      	str	r2, [r3, #0]
  }
}
 8004156:	bf00      	nop
 8004158:	3718      	adds	r7, #24
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
	...

08004160 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b086      	sub	sp, #24
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800416c:	2300      	movs	r3, #0
 800416e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004176:	2b01      	cmp	r3, #1
 8004178:	d101      	bne.n	800417e <HAL_ADC_Start_DMA+0x1e>
 800417a:	2302      	movs	r3, #2
 800417c:	e0ce      	b.n	800431c <HAL_ADC_Start_DMA+0x1bc>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2201      	movs	r2, #1
 8004182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f003 0301 	and.w	r3, r3, #1
 8004190:	2b01      	cmp	r3, #1
 8004192:	d018      	beq.n	80041c6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	689a      	ldr	r2, [r3, #8]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f042 0201 	orr.w	r2, r2, #1
 80041a2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80041a4:	4b5f      	ldr	r3, [pc, #380]	; (8004324 <HAL_ADC_Start_DMA+0x1c4>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a5f      	ldr	r2, [pc, #380]	; (8004328 <HAL_ADC_Start_DMA+0x1c8>)
 80041aa:	fba2 2303 	umull	r2, r3, r2, r3
 80041ae:	0c9a      	lsrs	r2, r3, #18
 80041b0:	4613      	mov	r3, r2
 80041b2:	005b      	lsls	r3, r3, #1
 80041b4:	4413      	add	r3, r2
 80041b6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80041b8:	e002      	b.n	80041c0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	3b01      	subs	r3, #1
 80041be:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1f9      	bne.n	80041ba <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041d4:	d107      	bne.n	80041e6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	689a      	ldr	r2, [r3, #8]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	f003 0301 	and.w	r3, r3, #1
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	f040 8086 	bne.w	8004302 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80041fe:	f023 0301 	bic.w	r3, r3, #1
 8004202:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004214:	2b00      	cmp	r3, #0
 8004216:	d007      	beq.n	8004228 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004220:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004230:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004234:	d106      	bne.n	8004244 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423a:	f023 0206 	bic.w	r2, r3, #6
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	645a      	str	r2, [r3, #68]	; 0x44
 8004242:	e002      	b.n	800424a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004252:	4b36      	ldr	r3, [pc, #216]	; (800432c <HAL_ADC_Start_DMA+0x1cc>)
 8004254:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425a:	4a35      	ldr	r2, [pc, #212]	; (8004330 <HAL_ADC_Start_DMA+0x1d0>)
 800425c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004262:	4a34      	ldr	r2, [pc, #208]	; (8004334 <HAL_ADC_Start_DMA+0x1d4>)
 8004264:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426a:	4a33      	ldr	r2, [pc, #204]	; (8004338 <HAL_ADC_Start_DMA+0x1d8>)
 800426c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004276:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	685a      	ldr	r2, [r3, #4]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004286:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	689a      	ldr	r2, [r3, #8]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004296:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	334c      	adds	r3, #76	; 0x4c
 80042a2:	4619      	mov	r1, r3
 80042a4:	68ba      	ldr	r2, [r7, #8]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f000 fcd2 	bl	8004c50 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f003 031f 	and.w	r3, r3, #31
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d10f      	bne.n	80042d8 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d129      	bne.n	800431a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689a      	ldr	r2, [r3, #8]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80042d4:	609a      	str	r2, [r3, #8]
 80042d6:	e020      	b.n	800431a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a17      	ldr	r2, [pc, #92]	; (800433c <HAL_ADC_Start_DMA+0x1dc>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d11b      	bne.n	800431a <HAL_ADC_Start_DMA+0x1ba>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d114      	bne.n	800431a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	689a      	ldr	r2, [r3, #8]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80042fe:	609a      	str	r2, [r3, #8]
 8004300:	e00b      	b.n	800431a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004306:	f043 0210 	orr.w	r2, r3, #16
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004312:	f043 0201 	orr.w	r2, r3, #1
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3718      	adds	r7, #24
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	2000000c 	.word	0x2000000c
 8004328:	431bde83 	.word	0x431bde83
 800432c:	40012300 	.word	0x40012300
 8004330:	080047b9 	.word	0x080047b9
 8004334:	08004873 	.word	0x08004873
 8004338:	0800488f 	.word	0x0800488f
 800433c:	40012000 	.word	0x40012000

08004340 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004386:	2300      	movs	r3, #0
 8004388:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004390:	2b01      	cmp	r3, #1
 8004392:	d101      	bne.n	8004398 <HAL_ADC_ConfigChannel+0x1c>
 8004394:	2302      	movs	r3, #2
 8004396:	e105      	b.n	80045a4 <HAL_ADC_ConfigChannel+0x228>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2b09      	cmp	r3, #9
 80043a6:	d925      	bls.n	80043f4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68d9      	ldr	r1, [r3, #12]
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	461a      	mov	r2, r3
 80043b6:	4613      	mov	r3, r2
 80043b8:	005b      	lsls	r3, r3, #1
 80043ba:	4413      	add	r3, r2
 80043bc:	3b1e      	subs	r3, #30
 80043be:	2207      	movs	r2, #7
 80043c0:	fa02 f303 	lsl.w	r3, r2, r3
 80043c4:	43da      	mvns	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	400a      	ands	r2, r1
 80043cc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68d9      	ldr	r1, [r3, #12]
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	689a      	ldr	r2, [r3, #8]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	b29b      	uxth	r3, r3
 80043de:	4618      	mov	r0, r3
 80043e0:	4603      	mov	r3, r0
 80043e2:	005b      	lsls	r3, r3, #1
 80043e4:	4403      	add	r3, r0
 80043e6:	3b1e      	subs	r3, #30
 80043e8:	409a      	lsls	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	430a      	orrs	r2, r1
 80043f0:	60da      	str	r2, [r3, #12]
 80043f2:	e022      	b.n	800443a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	6919      	ldr	r1, [r3, #16]
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	b29b      	uxth	r3, r3
 8004400:	461a      	mov	r2, r3
 8004402:	4613      	mov	r3, r2
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	4413      	add	r3, r2
 8004408:	2207      	movs	r2, #7
 800440a:	fa02 f303 	lsl.w	r3, r2, r3
 800440e:	43da      	mvns	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	400a      	ands	r2, r1
 8004416:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	6919      	ldr	r1, [r3, #16]
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	689a      	ldr	r2, [r3, #8]
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	b29b      	uxth	r3, r3
 8004428:	4618      	mov	r0, r3
 800442a:	4603      	mov	r3, r0
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	4403      	add	r3, r0
 8004430:	409a      	lsls	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	430a      	orrs	r2, r1
 8004438:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	2b06      	cmp	r3, #6
 8004440:	d824      	bhi.n	800448c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	685a      	ldr	r2, [r3, #4]
 800444c:	4613      	mov	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4413      	add	r3, r2
 8004452:	3b05      	subs	r3, #5
 8004454:	221f      	movs	r2, #31
 8004456:	fa02 f303 	lsl.w	r3, r2, r3
 800445a:	43da      	mvns	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	400a      	ands	r2, r1
 8004462:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	b29b      	uxth	r3, r3
 8004470:	4618      	mov	r0, r3
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685a      	ldr	r2, [r3, #4]
 8004476:	4613      	mov	r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	4413      	add	r3, r2
 800447c:	3b05      	subs	r3, #5
 800447e:	fa00 f203 	lsl.w	r2, r0, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	430a      	orrs	r2, r1
 8004488:	635a      	str	r2, [r3, #52]	; 0x34
 800448a:	e04c      	b.n	8004526 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	2b0c      	cmp	r3, #12
 8004492:	d824      	bhi.n	80044de <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	685a      	ldr	r2, [r3, #4]
 800449e:	4613      	mov	r3, r2
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	4413      	add	r3, r2
 80044a4:	3b23      	subs	r3, #35	; 0x23
 80044a6:	221f      	movs	r2, #31
 80044a8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ac:	43da      	mvns	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	400a      	ands	r2, r1
 80044b4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	4618      	mov	r0, r3
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685a      	ldr	r2, [r3, #4]
 80044c8:	4613      	mov	r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	4413      	add	r3, r2
 80044ce:	3b23      	subs	r3, #35	; 0x23
 80044d0:	fa00 f203 	lsl.w	r2, r0, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	430a      	orrs	r2, r1
 80044da:	631a      	str	r2, [r3, #48]	; 0x30
 80044dc:	e023      	b.n	8004526 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685a      	ldr	r2, [r3, #4]
 80044e8:	4613      	mov	r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	4413      	add	r3, r2
 80044ee:	3b41      	subs	r3, #65	; 0x41
 80044f0:	221f      	movs	r2, #31
 80044f2:	fa02 f303 	lsl.w	r3, r2, r3
 80044f6:	43da      	mvns	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	400a      	ands	r2, r1
 80044fe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	b29b      	uxth	r3, r3
 800450c:	4618      	mov	r0, r3
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	685a      	ldr	r2, [r3, #4]
 8004512:	4613      	mov	r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4413      	add	r3, r2
 8004518:	3b41      	subs	r3, #65	; 0x41
 800451a:	fa00 f203 	lsl.w	r2, r0, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004526:	4b22      	ldr	r3, [pc, #136]	; (80045b0 <HAL_ADC_ConfigChannel+0x234>)
 8004528:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a21      	ldr	r2, [pc, #132]	; (80045b4 <HAL_ADC_ConfigChannel+0x238>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d109      	bne.n	8004548 <HAL_ADC_ConfigChannel+0x1cc>
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2b12      	cmp	r3, #18
 800453a:	d105      	bne.n	8004548 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a19      	ldr	r2, [pc, #100]	; (80045b4 <HAL_ADC_ConfigChannel+0x238>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d123      	bne.n	800459a <HAL_ADC_ConfigChannel+0x21e>
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2b10      	cmp	r3, #16
 8004558:	d003      	beq.n	8004562 <HAL_ADC_ConfigChannel+0x1e6>
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2b11      	cmp	r3, #17
 8004560:	d11b      	bne.n	800459a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2b10      	cmp	r3, #16
 8004574:	d111      	bne.n	800459a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004576:	4b10      	ldr	r3, [pc, #64]	; (80045b8 <HAL_ADC_ConfigChannel+0x23c>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a10      	ldr	r2, [pc, #64]	; (80045bc <HAL_ADC_ConfigChannel+0x240>)
 800457c:	fba2 2303 	umull	r2, r3, r2, r3
 8004580:	0c9a      	lsrs	r2, r3, #18
 8004582:	4613      	mov	r3, r2
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	4413      	add	r3, r2
 8004588:	005b      	lsls	r3, r3, #1
 800458a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800458c:	e002      	b.n	8004594 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	3b01      	subs	r3, #1
 8004592:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d1f9      	bne.n	800458e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3714      	adds	r7, #20
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr
 80045b0:	40012300 	.word	0x40012300
 80045b4:	40012000 	.word	0x40012000
 80045b8:	2000000c 	.word	0x2000000c
 80045bc:	431bde83 	.word	0x431bde83

080045c0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80045c8:	4b79      	ldr	r3, [pc, #484]	; (80047b0 <ADC_Init+0x1f0>)
 80045ca:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	685a      	ldr	r2, [r3, #4]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	431a      	orrs	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	685a      	ldr	r2, [r3, #4]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	6859      	ldr	r1, [r3, #4]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	021a      	lsls	r2, r3, #8
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	430a      	orrs	r2, r1
 8004608:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	685a      	ldr	r2, [r3, #4]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004618:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	6859      	ldr	r1, [r3, #4]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	689a      	ldr	r2, [r3, #8]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	430a      	orrs	r2, r1
 800462a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	689a      	ldr	r2, [r3, #8]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800463a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	6899      	ldr	r1, [r3, #8]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	68da      	ldr	r2, [r3, #12]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	430a      	orrs	r2, r1
 800464c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004652:	4a58      	ldr	r2, [pc, #352]	; (80047b4 <ADC_Init+0x1f4>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d022      	beq.n	800469e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	689a      	ldr	r2, [r3, #8]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004666:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	6899      	ldr	r1, [r3, #8]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	430a      	orrs	r2, r1
 8004678:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	689a      	ldr	r2, [r3, #8]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004688:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	6899      	ldr	r1, [r3, #8]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	430a      	orrs	r2, r1
 800469a:	609a      	str	r2, [r3, #8]
 800469c:	e00f      	b.n	80046be <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	689a      	ldr	r2, [r3, #8]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80046ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	689a      	ldr	r2, [r3, #8]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80046bc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f022 0202 	bic.w	r2, r2, #2
 80046cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	6899      	ldr	r1, [r3, #8]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	7e1b      	ldrb	r3, [r3, #24]
 80046d8:	005a      	lsls	r2, r3, #1
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	430a      	orrs	r2, r1
 80046e0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d01b      	beq.n	8004724 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046fa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800470a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6859      	ldr	r1, [r3, #4]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004716:	3b01      	subs	r3, #1
 8004718:	035a      	lsls	r2, r3, #13
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	430a      	orrs	r2, r1
 8004720:	605a      	str	r2, [r3, #4]
 8004722:	e007      	b.n	8004734 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	685a      	ldr	r2, [r3, #4]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004732:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004742:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	69db      	ldr	r3, [r3, #28]
 800474e:	3b01      	subs	r3, #1
 8004750:	051a      	lsls	r2, r3, #20
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	430a      	orrs	r2, r1
 8004758:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	689a      	ldr	r2, [r3, #8]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004768:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	6899      	ldr	r1, [r3, #8]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004776:	025a      	lsls	r2, r3, #9
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	430a      	orrs	r2, r1
 800477e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	689a      	ldr	r2, [r3, #8]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800478e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	6899      	ldr	r1, [r3, #8]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	029a      	lsls	r2, r3, #10
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	430a      	orrs	r2, r1
 80047a2:	609a      	str	r2, [r3, #8]
}
 80047a4:	bf00      	nop
 80047a6:	3714      	adds	r7, #20
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr
 80047b0:	40012300 	.word	0x40012300
 80047b4:	0f000001 	.word	0x0f000001

080047b8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ca:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d13c      	bne.n	800484c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d12b      	bne.n	8004844 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d127      	bne.n	8004844 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d006      	beq.n	8004810 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800480c:	2b00      	cmp	r3, #0
 800480e:	d119      	bne.n	8004844 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	685a      	ldr	r2, [r3, #4]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f022 0220 	bic.w	r2, r2, #32
 800481e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004824:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004830:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d105      	bne.n	8004844 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483c:	f043 0201 	orr.w	r2, r3, #1
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004844:	68f8      	ldr	r0, [r7, #12]
 8004846:	f7fd f815 	bl	8001874 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800484a:	e00e      	b.n	800486a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004850:	f003 0310 	and.w	r3, r3, #16
 8004854:	2b00      	cmp	r3, #0
 8004856:	d003      	beq.n	8004860 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	f7ff fd85 	bl	8004368 <HAL_ADC_ErrorCallback>
}
 800485e:	e004      	b.n	800486a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	4798      	blx	r3
}
 800486a:	bf00      	nop
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}

08004872 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004872:	b580      	push	{r7, lr}
 8004874:	b084      	sub	sp, #16
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004880:	68f8      	ldr	r0, [r7, #12]
 8004882:	f7ff fd5d 	bl	8004340 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004886:	bf00      	nop
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800488e:	b580      	push	{r7, lr}
 8004890:	b084      	sub	sp, #16
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2240      	movs	r2, #64	; 0x40
 80048a0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a6:	f043 0204 	orr.w	r2, r3, #4
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80048ae:	68f8      	ldr	r0, [r7, #12]
 80048b0:	f7ff fd5a 	bl	8004368 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80048b4:	bf00      	nop
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f003 0307 	and.w	r3, r3, #7
 80048de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048e0:	4b0c      	ldr	r3, [pc, #48]	; (8004914 <__NVIC_SetPriorityGrouping+0x44>)
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048e6:	68ba      	ldr	r2, [r7, #8]
 80048e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80048ec:	4013      	ands	r3, r2
 80048ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80048fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004902:	4a04      	ldr	r2, [pc, #16]	; (8004914 <__NVIC_SetPriorityGrouping+0x44>)
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	60d3      	str	r3, [r2, #12]
}
 8004908:	bf00      	nop
 800490a:	3714      	adds	r7, #20
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr
 8004914:	e000ed00 	.word	0xe000ed00

08004918 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004918:	b480      	push	{r7}
 800491a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800491c:	4b04      	ldr	r3, [pc, #16]	; (8004930 <__NVIC_GetPriorityGrouping+0x18>)
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	0a1b      	lsrs	r3, r3, #8
 8004922:	f003 0307 	and.w	r3, r3, #7
}
 8004926:	4618      	mov	r0, r3
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr
 8004930:	e000ed00 	.word	0xe000ed00

08004934 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	4603      	mov	r3, r0
 800493c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800493e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004942:	2b00      	cmp	r3, #0
 8004944:	db0b      	blt.n	800495e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004946:	79fb      	ldrb	r3, [r7, #7]
 8004948:	f003 021f 	and.w	r2, r3, #31
 800494c:	4907      	ldr	r1, [pc, #28]	; (800496c <__NVIC_EnableIRQ+0x38>)
 800494e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004952:	095b      	lsrs	r3, r3, #5
 8004954:	2001      	movs	r0, #1
 8004956:	fa00 f202 	lsl.w	r2, r0, r2
 800495a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800495e:	bf00      	nop
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	e000e100 	.word	0xe000e100

08004970 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	4603      	mov	r3, r0
 8004978:	6039      	str	r1, [r7, #0]
 800497a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800497c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004980:	2b00      	cmp	r3, #0
 8004982:	db0a      	blt.n	800499a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	b2da      	uxtb	r2, r3
 8004988:	490c      	ldr	r1, [pc, #48]	; (80049bc <__NVIC_SetPriority+0x4c>)
 800498a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800498e:	0112      	lsls	r2, r2, #4
 8004990:	b2d2      	uxtb	r2, r2
 8004992:	440b      	add	r3, r1
 8004994:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004998:	e00a      	b.n	80049b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	b2da      	uxtb	r2, r3
 800499e:	4908      	ldr	r1, [pc, #32]	; (80049c0 <__NVIC_SetPriority+0x50>)
 80049a0:	79fb      	ldrb	r3, [r7, #7]
 80049a2:	f003 030f 	and.w	r3, r3, #15
 80049a6:	3b04      	subs	r3, #4
 80049a8:	0112      	lsls	r2, r2, #4
 80049aa:	b2d2      	uxtb	r2, r2
 80049ac:	440b      	add	r3, r1
 80049ae:	761a      	strb	r2, [r3, #24]
}
 80049b0:	bf00      	nop
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr
 80049bc:	e000e100 	.word	0xe000e100
 80049c0:	e000ed00 	.word	0xe000ed00

080049c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b089      	sub	sp, #36	; 0x24
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f003 0307 	and.w	r3, r3, #7
 80049d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	f1c3 0307 	rsb	r3, r3, #7
 80049de:	2b04      	cmp	r3, #4
 80049e0:	bf28      	it	cs
 80049e2:	2304      	movcs	r3, #4
 80049e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	3304      	adds	r3, #4
 80049ea:	2b06      	cmp	r3, #6
 80049ec:	d902      	bls.n	80049f4 <NVIC_EncodePriority+0x30>
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	3b03      	subs	r3, #3
 80049f2:	e000      	b.n	80049f6 <NVIC_EncodePriority+0x32>
 80049f4:	2300      	movs	r3, #0
 80049f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004a02:	43da      	mvns	r2, r3
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	401a      	ands	r2, r3
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	fa01 f303 	lsl.w	r3, r1, r3
 8004a16:	43d9      	mvns	r1, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a1c:	4313      	orrs	r3, r2
         );
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3724      	adds	r7, #36	; 0x24
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
	...

08004a2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	3b01      	subs	r3, #1
 8004a38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a3c:	d301      	bcc.n	8004a42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e00f      	b.n	8004a62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a42:	4a0a      	ldr	r2, [pc, #40]	; (8004a6c <SysTick_Config+0x40>)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	3b01      	subs	r3, #1
 8004a48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a4a:	210f      	movs	r1, #15
 8004a4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a50:	f7ff ff8e 	bl	8004970 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a54:	4b05      	ldr	r3, [pc, #20]	; (8004a6c <SysTick_Config+0x40>)
 8004a56:	2200      	movs	r2, #0
 8004a58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a5a:	4b04      	ldr	r3, [pc, #16]	; (8004a6c <SysTick_Config+0x40>)
 8004a5c:	2207      	movs	r2, #7
 8004a5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3708      	adds	r7, #8
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	e000e010 	.word	0xe000e010

08004a70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f7ff ff29 	bl	80048d0 <__NVIC_SetPriorityGrouping>
}
 8004a7e:	bf00      	nop
 8004a80:	3708      	adds	r7, #8
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b086      	sub	sp, #24
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	60b9      	str	r1, [r7, #8]
 8004a90:	607a      	str	r2, [r7, #4]
 8004a92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004a94:	2300      	movs	r3, #0
 8004a96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004a98:	f7ff ff3e 	bl	8004918 <__NVIC_GetPriorityGrouping>
 8004a9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	68b9      	ldr	r1, [r7, #8]
 8004aa2:	6978      	ldr	r0, [r7, #20]
 8004aa4:	f7ff ff8e 	bl	80049c4 <NVIC_EncodePriority>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004aae:	4611      	mov	r1, r2
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f7ff ff5d 	bl	8004970 <__NVIC_SetPriority>
}
 8004ab6:	bf00      	nop
 8004ab8:	3718      	adds	r7, #24
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b082      	sub	sp, #8
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004acc:	4618      	mov	r0, r3
 8004ace:	f7ff ff31 	bl	8004934 <__NVIC_EnableIRQ>
}
 8004ad2:	bf00      	nop
 8004ad4:	3708      	adds	r7, #8
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b082      	sub	sp, #8
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f7ff ffa2 	bl	8004a2c <SysTick_Config>
 8004ae8:	4603      	mov	r3, r0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3708      	adds	r7, #8
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
	...

08004af4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b086      	sub	sp, #24
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004afc:	2300      	movs	r3, #0
 8004afe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004b00:	f7ff f9aa 	bl	8003e58 <HAL_GetTick>
 8004b04:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d101      	bne.n	8004b10 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e099      	b.n	8004c44 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2202      	movs	r2, #2
 8004b14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f022 0201 	bic.w	r2, r2, #1
 8004b2e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b30:	e00f      	b.n	8004b52 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b32:	f7ff f991 	bl	8003e58 <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	2b05      	cmp	r3, #5
 8004b3e:	d908      	bls.n	8004b52 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2220      	movs	r2, #32
 8004b44:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2203      	movs	r2, #3
 8004b4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e078      	b.n	8004c44 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0301 	and.w	r3, r3, #1
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d1e8      	bne.n	8004b32 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	4b38      	ldr	r3, [pc, #224]	; (8004c4c <HAL_DMA_Init+0x158>)
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685a      	ldr	r2, [r3, #4]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	699b      	ldr	r3, [r3, #24]
 8004b90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a1b      	ldr	r3, [r3, #32]
 8004b9c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b9e:	697a      	ldr	r2, [r7, #20]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba8:	2b04      	cmp	r3, #4
 8004baa:	d107      	bne.n	8004bbc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	697a      	ldr	r2, [r7, #20]
 8004bc2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	f023 0307 	bic.w	r3, r3, #7
 8004bd2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd8:	697a      	ldr	r2, [r7, #20]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be2:	2b04      	cmp	r3, #4
 8004be4:	d117      	bne.n	8004c16 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bea:	697a      	ldr	r2, [r7, #20]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00e      	beq.n	8004c16 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f000 fa6f 	bl	80050dc <DMA_CheckFifoParam>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d008      	beq.n	8004c16 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2240      	movs	r2, #64	; 0x40
 8004c08:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004c12:	2301      	movs	r3, #1
 8004c14:	e016      	b.n	8004c44 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 fa26 	bl	8005070 <DMA_CalcBaseAndBitshift>
 8004c24:	4603      	mov	r3, r0
 8004c26:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c2c:	223f      	movs	r2, #63	; 0x3f
 8004c2e:	409a      	lsls	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3718      	adds	r7, #24
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	f010803f 	.word	0xf010803f

08004c50 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b086      	sub	sp, #24
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	607a      	str	r2, [r7, #4]
 8004c5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c66:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d101      	bne.n	8004c76 <HAL_DMA_Start_IT+0x26>
 8004c72:	2302      	movs	r3, #2
 8004c74:	e040      	b.n	8004cf8 <HAL_DMA_Start_IT+0xa8>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d12f      	bne.n	8004cea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2202      	movs	r2, #2
 8004c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	68b9      	ldr	r1, [r7, #8]
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f000 f9b8 	bl	8005014 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ca8:	223f      	movs	r2, #63	; 0x3f
 8004caa:	409a      	lsls	r2, r3
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f042 0216 	orr.w	r2, r2, #22
 8004cbe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d007      	beq.n	8004cd8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f042 0208 	orr.w	r2, r2, #8
 8004cd6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f042 0201 	orr.w	r2, r2, #1
 8004ce6:	601a      	str	r2, [r3, #0]
 8004ce8:	e005      	b.n	8004cf6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004cf2:	2302      	movs	r3, #2
 8004cf4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3718      	adds	r7, #24
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b086      	sub	sp, #24
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004d0c:	4b8e      	ldr	r3, [pc, #568]	; (8004f48 <HAL_DMA_IRQHandler+0x248>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a8e      	ldr	r2, [pc, #568]	; (8004f4c <HAL_DMA_IRQHandler+0x24c>)
 8004d12:	fba2 2303 	umull	r2, r3, r2, r3
 8004d16:	0a9b      	lsrs	r3, r3, #10
 8004d18:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d1e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d2a:	2208      	movs	r2, #8
 8004d2c:	409a      	lsls	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	4013      	ands	r3, r2
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d01a      	beq.n	8004d6c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0304 	and.w	r3, r3, #4
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d013      	beq.n	8004d6c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f022 0204 	bic.w	r2, r2, #4
 8004d52:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d58:	2208      	movs	r2, #8
 8004d5a:	409a      	lsls	r2, r3
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d64:	f043 0201 	orr.w	r2, r3, #1
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d70:	2201      	movs	r2, #1
 8004d72:	409a      	lsls	r2, r3
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	4013      	ands	r3, r2
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d012      	beq.n	8004da2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00b      	beq.n	8004da2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d8e:	2201      	movs	r2, #1
 8004d90:	409a      	lsls	r2, r3
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d9a:	f043 0202 	orr.w	r2, r3, #2
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004da6:	2204      	movs	r2, #4
 8004da8:	409a      	lsls	r2, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	4013      	ands	r3, r2
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d012      	beq.n	8004dd8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0302 	and.w	r3, r3, #2
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d00b      	beq.n	8004dd8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dc4:	2204      	movs	r2, #4
 8004dc6:	409a      	lsls	r2, r3
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dd0:	f043 0204 	orr.w	r2, r3, #4
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ddc:	2210      	movs	r2, #16
 8004dde:	409a      	lsls	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	4013      	ands	r3, r2
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d043      	beq.n	8004e70 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0308 	and.w	r3, r3, #8
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d03c      	beq.n	8004e70 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dfa:	2210      	movs	r2, #16
 8004dfc:	409a      	lsls	r2, r3
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d018      	beq.n	8004e42 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d108      	bne.n	8004e30 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d024      	beq.n	8004e70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	4798      	blx	r3
 8004e2e:	e01f      	b.n	8004e70 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d01b      	beq.n	8004e70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	4798      	blx	r3
 8004e40:	e016      	b.n	8004e70 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d107      	bne.n	8004e60 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f022 0208 	bic.w	r2, r2, #8
 8004e5e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d003      	beq.n	8004e70 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e74:	2220      	movs	r2, #32
 8004e76:	409a      	lsls	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f000 808f 	beq.w	8004fa0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0310 	and.w	r3, r3, #16
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f000 8087 	beq.w	8004fa0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e96:	2220      	movs	r2, #32
 8004e98:	409a      	lsls	r2, r3
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	2b05      	cmp	r3, #5
 8004ea8:	d136      	bne.n	8004f18 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f022 0216 	bic.w	r2, r2, #22
 8004eb8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	695a      	ldr	r2, [r3, #20]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ec8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d103      	bne.n	8004eda <HAL_DMA_IRQHandler+0x1da>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d007      	beq.n	8004eea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f022 0208 	bic.w	r2, r2, #8
 8004ee8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eee:	223f      	movs	r2, #63	; 0x3f
 8004ef0:	409a      	lsls	r2, r3
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d07e      	beq.n	800500c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	4798      	blx	r3
        }
        return;
 8004f16:	e079      	b.n	800500c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d01d      	beq.n	8004f62 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d10d      	bne.n	8004f50 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d031      	beq.n	8004fa0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	4798      	blx	r3
 8004f44:	e02c      	b.n	8004fa0 <HAL_DMA_IRQHandler+0x2a0>
 8004f46:	bf00      	nop
 8004f48:	2000000c 	.word	0x2000000c
 8004f4c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d023      	beq.n	8004fa0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	4798      	blx	r3
 8004f60:	e01e      	b.n	8004fa0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d10f      	bne.n	8004f90 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f022 0210 	bic.w	r2, r2, #16
 8004f7e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d003      	beq.n	8004fa0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d032      	beq.n	800500e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fac:	f003 0301 	and.w	r3, r3, #1
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d022      	beq.n	8004ffa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2205      	movs	r2, #5
 8004fb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f022 0201 	bic.w	r2, r2, #1
 8004fca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	3301      	adds	r3, #1
 8004fd0:	60bb      	str	r3, [r7, #8]
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d307      	bcc.n	8004fe8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0301 	and.w	r3, r3, #1
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d1f2      	bne.n	8004fcc <HAL_DMA_IRQHandler+0x2cc>
 8004fe6:	e000      	b.n	8004fea <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004fe8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2201      	movs	r2, #1
 8004fee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d005      	beq.n	800500e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	4798      	blx	r3
 800500a:	e000      	b.n	800500e <HAL_DMA_IRQHandler+0x30e>
        return;
 800500c:	bf00      	nop
    }
  }
}
 800500e:	3718      	adds	r7, #24
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	607a      	str	r2, [r7, #4]
 8005020:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005030:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	683a      	ldr	r2, [r7, #0]
 8005038:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	2b40      	cmp	r3, #64	; 0x40
 8005040:	d108      	bne.n	8005054 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68ba      	ldr	r2, [r7, #8]
 8005050:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005052:	e007      	b.n	8005064 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	68ba      	ldr	r2, [r7, #8]
 800505a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	60da      	str	r2, [r3, #12]
}
 8005064:	bf00      	nop
 8005066:	3714      	adds	r7, #20
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	b2db      	uxtb	r3, r3
 800507e:	3b10      	subs	r3, #16
 8005080:	4a14      	ldr	r2, [pc, #80]	; (80050d4 <DMA_CalcBaseAndBitshift+0x64>)
 8005082:	fba2 2303 	umull	r2, r3, r2, r3
 8005086:	091b      	lsrs	r3, r3, #4
 8005088:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800508a:	4a13      	ldr	r2, [pc, #76]	; (80050d8 <DMA_CalcBaseAndBitshift+0x68>)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	4413      	add	r3, r2
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	461a      	mov	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2b03      	cmp	r3, #3
 800509c:	d909      	bls.n	80050b2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80050a6:	f023 0303 	bic.w	r3, r3, #3
 80050aa:	1d1a      	adds	r2, r3, #4
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	659a      	str	r2, [r3, #88]	; 0x58
 80050b0:	e007      	b.n	80050c2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80050ba:	f023 0303 	bic.w	r3, r3, #3
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3714      	adds	r7, #20
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	aaaaaaab 	.word	0xaaaaaaab
 80050d8:	0800ebb4 	.word	0x0800ebb4

080050dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80050dc:	b480      	push	{r7}
 80050de:	b085      	sub	sp, #20
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050e4:	2300      	movs	r3, #0
 80050e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d11f      	bne.n	8005136 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	2b03      	cmp	r3, #3
 80050fa:	d856      	bhi.n	80051aa <DMA_CheckFifoParam+0xce>
 80050fc:	a201      	add	r2, pc, #4	; (adr r2, 8005104 <DMA_CheckFifoParam+0x28>)
 80050fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005102:	bf00      	nop
 8005104:	08005115 	.word	0x08005115
 8005108:	08005127 	.word	0x08005127
 800510c:	08005115 	.word	0x08005115
 8005110:	080051ab 	.word	0x080051ab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005118:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800511c:	2b00      	cmp	r3, #0
 800511e:	d046      	beq.n	80051ae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005124:	e043      	b.n	80051ae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800512e:	d140      	bne.n	80051b2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005134:	e03d      	b.n	80051b2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800513e:	d121      	bne.n	8005184 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	2b03      	cmp	r3, #3
 8005144:	d837      	bhi.n	80051b6 <DMA_CheckFifoParam+0xda>
 8005146:	a201      	add	r2, pc, #4	; (adr r2, 800514c <DMA_CheckFifoParam+0x70>)
 8005148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800514c:	0800515d 	.word	0x0800515d
 8005150:	08005163 	.word	0x08005163
 8005154:	0800515d 	.word	0x0800515d
 8005158:	08005175 	.word	0x08005175
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	73fb      	strb	r3, [r7, #15]
      break;
 8005160:	e030      	b.n	80051c4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005166:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800516a:	2b00      	cmp	r3, #0
 800516c:	d025      	beq.n	80051ba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005172:	e022      	b.n	80051ba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005178:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800517c:	d11f      	bne.n	80051be <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005182:	e01c      	b.n	80051be <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	2b02      	cmp	r3, #2
 8005188:	d903      	bls.n	8005192 <DMA_CheckFifoParam+0xb6>
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	2b03      	cmp	r3, #3
 800518e:	d003      	beq.n	8005198 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005190:	e018      	b.n	80051c4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	73fb      	strb	r3, [r7, #15]
      break;
 8005196:	e015      	b.n	80051c4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d00e      	beq.n	80051c2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	73fb      	strb	r3, [r7, #15]
      break;
 80051a8:	e00b      	b.n	80051c2 <DMA_CheckFifoParam+0xe6>
      break;
 80051aa:	bf00      	nop
 80051ac:	e00a      	b.n	80051c4 <DMA_CheckFifoParam+0xe8>
      break;
 80051ae:	bf00      	nop
 80051b0:	e008      	b.n	80051c4 <DMA_CheckFifoParam+0xe8>
      break;
 80051b2:	bf00      	nop
 80051b4:	e006      	b.n	80051c4 <DMA_CheckFifoParam+0xe8>
      break;
 80051b6:	bf00      	nop
 80051b8:	e004      	b.n	80051c4 <DMA_CheckFifoParam+0xe8>
      break;
 80051ba:	bf00      	nop
 80051bc:	e002      	b.n	80051c4 <DMA_CheckFifoParam+0xe8>
      break;   
 80051be:	bf00      	nop
 80051c0:	e000      	b.n	80051c4 <DMA_CheckFifoParam+0xe8>
      break;
 80051c2:	bf00      	nop
    }
  } 
  
  return status; 
 80051c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3714      	adds	r7, #20
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop

080051d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b089      	sub	sp, #36	; 0x24
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80051de:	2300      	movs	r3, #0
 80051e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80051e2:	2300      	movs	r3, #0
 80051e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80051e6:	2300      	movs	r3, #0
 80051e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80051ea:	2300      	movs	r3, #0
 80051ec:	61fb      	str	r3, [r7, #28]
 80051ee:	e159      	b.n	80054a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80051f0:	2201      	movs	r2, #1
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	fa02 f303 	lsl.w	r3, r2, r3
 80051f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	4013      	ands	r3, r2
 8005202:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005204:	693a      	ldr	r2, [r7, #16]
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	429a      	cmp	r2, r3
 800520a:	f040 8148 	bne.w	800549e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	f003 0303 	and.w	r3, r3, #3
 8005216:	2b01      	cmp	r3, #1
 8005218:	d005      	beq.n	8005226 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005222:	2b02      	cmp	r3, #2
 8005224:	d130      	bne.n	8005288 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	005b      	lsls	r3, r3, #1
 8005230:	2203      	movs	r2, #3
 8005232:	fa02 f303 	lsl.w	r3, r2, r3
 8005236:	43db      	mvns	r3, r3
 8005238:	69ba      	ldr	r2, [r7, #24]
 800523a:	4013      	ands	r3, r2
 800523c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	68da      	ldr	r2, [r3, #12]
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	005b      	lsls	r3, r3, #1
 8005246:	fa02 f303 	lsl.w	r3, r2, r3
 800524a:	69ba      	ldr	r2, [r7, #24]
 800524c:	4313      	orrs	r3, r2
 800524e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	69ba      	ldr	r2, [r7, #24]
 8005254:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800525c:	2201      	movs	r2, #1
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	fa02 f303 	lsl.w	r3, r2, r3
 8005264:	43db      	mvns	r3, r3
 8005266:	69ba      	ldr	r2, [r7, #24]
 8005268:	4013      	ands	r3, r2
 800526a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	091b      	lsrs	r3, r3, #4
 8005272:	f003 0201 	and.w	r2, r3, #1
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	fa02 f303 	lsl.w	r3, r2, r3
 800527c:	69ba      	ldr	r2, [r7, #24]
 800527e:	4313      	orrs	r3, r2
 8005280:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	69ba      	ldr	r2, [r7, #24]
 8005286:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f003 0303 	and.w	r3, r3, #3
 8005290:	2b03      	cmp	r3, #3
 8005292:	d017      	beq.n	80052c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	005b      	lsls	r3, r3, #1
 800529e:	2203      	movs	r2, #3
 80052a0:	fa02 f303 	lsl.w	r3, r2, r3
 80052a4:	43db      	mvns	r3, r3
 80052a6:	69ba      	ldr	r2, [r7, #24]
 80052a8:	4013      	ands	r3, r2
 80052aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	689a      	ldr	r2, [r3, #8]
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	005b      	lsls	r3, r3, #1
 80052b4:	fa02 f303 	lsl.w	r3, r2, r3
 80052b8:	69ba      	ldr	r2, [r7, #24]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	69ba      	ldr	r2, [r7, #24]
 80052c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	f003 0303 	and.w	r3, r3, #3
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d123      	bne.n	8005318 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	08da      	lsrs	r2, r3, #3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	3208      	adds	r2, #8
 80052d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	f003 0307 	and.w	r3, r3, #7
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	220f      	movs	r2, #15
 80052e8:	fa02 f303 	lsl.w	r3, r2, r3
 80052ec:	43db      	mvns	r3, r3
 80052ee:	69ba      	ldr	r2, [r7, #24]
 80052f0:	4013      	ands	r3, r2
 80052f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	691a      	ldr	r2, [r3, #16]
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	f003 0307 	and.w	r3, r3, #7
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	fa02 f303 	lsl.w	r3, r2, r3
 8005304:	69ba      	ldr	r2, [r7, #24]
 8005306:	4313      	orrs	r3, r2
 8005308:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	08da      	lsrs	r2, r3, #3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	3208      	adds	r2, #8
 8005312:	69b9      	ldr	r1, [r7, #24]
 8005314:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	005b      	lsls	r3, r3, #1
 8005322:	2203      	movs	r2, #3
 8005324:	fa02 f303 	lsl.w	r3, r2, r3
 8005328:	43db      	mvns	r3, r3
 800532a:	69ba      	ldr	r2, [r7, #24]
 800532c:	4013      	ands	r3, r2
 800532e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	f003 0203 	and.w	r2, r3, #3
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	005b      	lsls	r3, r3, #1
 800533c:	fa02 f303 	lsl.w	r3, r2, r3
 8005340:	69ba      	ldr	r2, [r7, #24]
 8005342:	4313      	orrs	r3, r2
 8005344:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	69ba      	ldr	r2, [r7, #24]
 800534a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005354:	2b00      	cmp	r3, #0
 8005356:	f000 80a2 	beq.w	800549e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800535a:	2300      	movs	r3, #0
 800535c:	60fb      	str	r3, [r7, #12]
 800535e:	4b57      	ldr	r3, [pc, #348]	; (80054bc <HAL_GPIO_Init+0x2e8>)
 8005360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005362:	4a56      	ldr	r2, [pc, #344]	; (80054bc <HAL_GPIO_Init+0x2e8>)
 8005364:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005368:	6453      	str	r3, [r2, #68]	; 0x44
 800536a:	4b54      	ldr	r3, [pc, #336]	; (80054bc <HAL_GPIO_Init+0x2e8>)
 800536c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800536e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005372:	60fb      	str	r3, [r7, #12]
 8005374:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005376:	4a52      	ldr	r2, [pc, #328]	; (80054c0 <HAL_GPIO_Init+0x2ec>)
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	089b      	lsrs	r3, r3, #2
 800537c:	3302      	adds	r3, #2
 800537e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005382:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	f003 0303 	and.w	r3, r3, #3
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	220f      	movs	r2, #15
 800538e:	fa02 f303 	lsl.w	r3, r2, r3
 8005392:	43db      	mvns	r3, r3
 8005394:	69ba      	ldr	r2, [r7, #24]
 8005396:	4013      	ands	r3, r2
 8005398:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a49      	ldr	r2, [pc, #292]	; (80054c4 <HAL_GPIO_Init+0x2f0>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d019      	beq.n	80053d6 <HAL_GPIO_Init+0x202>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a48      	ldr	r2, [pc, #288]	; (80054c8 <HAL_GPIO_Init+0x2f4>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d013      	beq.n	80053d2 <HAL_GPIO_Init+0x1fe>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a47      	ldr	r2, [pc, #284]	; (80054cc <HAL_GPIO_Init+0x2f8>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d00d      	beq.n	80053ce <HAL_GPIO_Init+0x1fa>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a46      	ldr	r2, [pc, #280]	; (80054d0 <HAL_GPIO_Init+0x2fc>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d007      	beq.n	80053ca <HAL_GPIO_Init+0x1f6>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a45      	ldr	r2, [pc, #276]	; (80054d4 <HAL_GPIO_Init+0x300>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d101      	bne.n	80053c6 <HAL_GPIO_Init+0x1f2>
 80053c2:	2304      	movs	r3, #4
 80053c4:	e008      	b.n	80053d8 <HAL_GPIO_Init+0x204>
 80053c6:	2307      	movs	r3, #7
 80053c8:	e006      	b.n	80053d8 <HAL_GPIO_Init+0x204>
 80053ca:	2303      	movs	r3, #3
 80053cc:	e004      	b.n	80053d8 <HAL_GPIO_Init+0x204>
 80053ce:	2302      	movs	r3, #2
 80053d0:	e002      	b.n	80053d8 <HAL_GPIO_Init+0x204>
 80053d2:	2301      	movs	r3, #1
 80053d4:	e000      	b.n	80053d8 <HAL_GPIO_Init+0x204>
 80053d6:	2300      	movs	r3, #0
 80053d8:	69fa      	ldr	r2, [r7, #28]
 80053da:	f002 0203 	and.w	r2, r2, #3
 80053de:	0092      	lsls	r2, r2, #2
 80053e0:	4093      	lsls	r3, r2
 80053e2:	69ba      	ldr	r2, [r7, #24]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80053e8:	4935      	ldr	r1, [pc, #212]	; (80054c0 <HAL_GPIO_Init+0x2ec>)
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	089b      	lsrs	r3, r3, #2
 80053ee:	3302      	adds	r3, #2
 80053f0:	69ba      	ldr	r2, [r7, #24]
 80053f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80053f6:	4b38      	ldr	r3, [pc, #224]	; (80054d8 <HAL_GPIO_Init+0x304>)
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	43db      	mvns	r3, r3
 8005400:	69ba      	ldr	r2, [r7, #24]
 8005402:	4013      	ands	r3, r2
 8005404:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d003      	beq.n	800541a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005412:	69ba      	ldr	r2, [r7, #24]
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	4313      	orrs	r3, r2
 8005418:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800541a:	4a2f      	ldr	r2, [pc, #188]	; (80054d8 <HAL_GPIO_Init+0x304>)
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005420:	4b2d      	ldr	r3, [pc, #180]	; (80054d8 <HAL_GPIO_Init+0x304>)
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	43db      	mvns	r3, r3
 800542a:	69ba      	ldr	r2, [r7, #24]
 800542c:	4013      	ands	r3, r2
 800542e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005438:	2b00      	cmp	r3, #0
 800543a:	d003      	beq.n	8005444 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800543c:	69ba      	ldr	r2, [r7, #24]
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	4313      	orrs	r3, r2
 8005442:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005444:	4a24      	ldr	r2, [pc, #144]	; (80054d8 <HAL_GPIO_Init+0x304>)
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800544a:	4b23      	ldr	r3, [pc, #140]	; (80054d8 <HAL_GPIO_Init+0x304>)
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	43db      	mvns	r3, r3
 8005454:	69ba      	ldr	r2, [r7, #24]
 8005456:	4013      	ands	r3, r2
 8005458:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d003      	beq.n	800546e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005466:	69ba      	ldr	r2, [r7, #24]
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	4313      	orrs	r3, r2
 800546c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800546e:	4a1a      	ldr	r2, [pc, #104]	; (80054d8 <HAL_GPIO_Init+0x304>)
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005474:	4b18      	ldr	r3, [pc, #96]	; (80054d8 <HAL_GPIO_Init+0x304>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	43db      	mvns	r3, r3
 800547e:	69ba      	ldr	r2, [r7, #24]
 8005480:	4013      	ands	r3, r2
 8005482:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800548c:	2b00      	cmp	r3, #0
 800548e:	d003      	beq.n	8005498 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005490:	69ba      	ldr	r2, [r7, #24]
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	4313      	orrs	r3, r2
 8005496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005498:	4a0f      	ldr	r2, [pc, #60]	; (80054d8 <HAL_GPIO_Init+0x304>)
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	3301      	adds	r3, #1
 80054a2:	61fb      	str	r3, [r7, #28]
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	2b0f      	cmp	r3, #15
 80054a8:	f67f aea2 	bls.w	80051f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80054ac:	bf00      	nop
 80054ae:	bf00      	nop
 80054b0:	3724      	adds	r7, #36	; 0x24
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr
 80054ba:	bf00      	nop
 80054bc:	40023800 	.word	0x40023800
 80054c0:	40013800 	.word	0x40013800
 80054c4:	40020000 	.word	0x40020000
 80054c8:	40020400 	.word	0x40020400
 80054cc:	40020800 	.word	0x40020800
 80054d0:	40020c00 	.word	0x40020c00
 80054d4:	40021000 	.word	0x40021000
 80054d8:	40013c00 	.word	0x40013c00

080054dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	460b      	mov	r3, r1
 80054e6:	807b      	strh	r3, [r7, #2]
 80054e8:	4613      	mov	r3, r2
 80054ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80054ec:	787b      	ldrb	r3, [r7, #1]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d003      	beq.n	80054fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80054f2:	887a      	ldrh	r2, [r7, #2]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80054f8:	e003      	b.n	8005502 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80054fa:	887b      	ldrh	r3, [r7, #2]
 80054fc:	041a      	lsls	r2, r3, #16
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	619a      	str	r2, [r3, #24]
}
 8005502:	bf00      	nop
 8005504:	370c      	adds	r7, #12
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
	...

08005510 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
 8005516:	4603      	mov	r3, r0
 8005518:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800551a:	4b08      	ldr	r3, [pc, #32]	; (800553c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800551c:	695a      	ldr	r2, [r3, #20]
 800551e:	88fb      	ldrh	r3, [r7, #6]
 8005520:	4013      	ands	r3, r2
 8005522:	2b00      	cmp	r3, #0
 8005524:	d006      	beq.n	8005534 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005526:	4a05      	ldr	r2, [pc, #20]	; (800553c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005528:	88fb      	ldrh	r3, [r7, #6]
 800552a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800552c:	88fb      	ldrh	r3, [r7, #6]
 800552e:	4618      	mov	r0, r3
 8005530:	f7fc f9bc 	bl	80018ac <HAL_GPIO_EXTI_Callback>
  }
}
 8005534:	bf00      	nop
 8005536:	3708      	adds	r7, #8
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	40013c00 	.word	0x40013c00

08005540 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d101      	bne.n	8005552 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e12b      	b.n	80057aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005558:	b2db      	uxtb	r3, r3
 800555a:	2b00      	cmp	r3, #0
 800555c:	d106      	bne.n	800556c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f7fb ffa4 	bl	80014b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2224      	movs	r2, #36	; 0x24
 8005570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f022 0201 	bic.w	r2, r2, #1
 8005582:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005592:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80055a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80055a4:	f002 f99e 	bl	80078e4 <HAL_RCC_GetPCLK1Freq>
 80055a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	4a81      	ldr	r2, [pc, #516]	; (80057b4 <HAL_I2C_Init+0x274>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d807      	bhi.n	80055c4 <HAL_I2C_Init+0x84>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	4a80      	ldr	r2, [pc, #512]	; (80057b8 <HAL_I2C_Init+0x278>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	bf94      	ite	ls
 80055bc:	2301      	movls	r3, #1
 80055be:	2300      	movhi	r3, #0
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	e006      	b.n	80055d2 <HAL_I2C_Init+0x92>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	4a7d      	ldr	r2, [pc, #500]	; (80057bc <HAL_I2C_Init+0x27c>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	bf94      	ite	ls
 80055cc:	2301      	movls	r3, #1
 80055ce:	2300      	movhi	r3, #0
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d001      	beq.n	80055da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e0e7      	b.n	80057aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	4a78      	ldr	r2, [pc, #480]	; (80057c0 <HAL_I2C_Init+0x280>)
 80055de:	fba2 2303 	umull	r2, r3, r2, r3
 80055e2:	0c9b      	lsrs	r3, r3, #18
 80055e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68ba      	ldr	r2, [r7, #8]
 80055f6:	430a      	orrs	r2, r1
 80055f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	6a1b      	ldr	r3, [r3, #32]
 8005600:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	4a6a      	ldr	r2, [pc, #424]	; (80057b4 <HAL_I2C_Init+0x274>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d802      	bhi.n	8005614 <HAL_I2C_Init+0xd4>
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	3301      	adds	r3, #1
 8005612:	e009      	b.n	8005628 <HAL_I2C_Init+0xe8>
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800561a:	fb02 f303 	mul.w	r3, r2, r3
 800561e:	4a69      	ldr	r2, [pc, #420]	; (80057c4 <HAL_I2C_Init+0x284>)
 8005620:	fba2 2303 	umull	r2, r3, r2, r3
 8005624:	099b      	lsrs	r3, r3, #6
 8005626:	3301      	adds	r3, #1
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	6812      	ldr	r2, [r2, #0]
 800562c:	430b      	orrs	r3, r1
 800562e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	69db      	ldr	r3, [r3, #28]
 8005636:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800563a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	495c      	ldr	r1, [pc, #368]	; (80057b4 <HAL_I2C_Init+0x274>)
 8005644:	428b      	cmp	r3, r1
 8005646:	d819      	bhi.n	800567c <HAL_I2C_Init+0x13c>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	1e59      	subs	r1, r3, #1
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	005b      	lsls	r3, r3, #1
 8005652:	fbb1 f3f3 	udiv	r3, r1, r3
 8005656:	1c59      	adds	r1, r3, #1
 8005658:	f640 73fc 	movw	r3, #4092	; 0xffc
 800565c:	400b      	ands	r3, r1
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00a      	beq.n	8005678 <HAL_I2C_Init+0x138>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	1e59      	subs	r1, r3, #1
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	005b      	lsls	r3, r3, #1
 800566c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005670:	3301      	adds	r3, #1
 8005672:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005676:	e051      	b.n	800571c <HAL_I2C_Init+0x1dc>
 8005678:	2304      	movs	r3, #4
 800567a:	e04f      	b.n	800571c <HAL_I2C_Init+0x1dc>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d111      	bne.n	80056a8 <HAL_I2C_Init+0x168>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	1e58      	subs	r0, r3, #1
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6859      	ldr	r1, [r3, #4]
 800568c:	460b      	mov	r3, r1
 800568e:	005b      	lsls	r3, r3, #1
 8005690:	440b      	add	r3, r1
 8005692:	fbb0 f3f3 	udiv	r3, r0, r3
 8005696:	3301      	adds	r3, #1
 8005698:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800569c:	2b00      	cmp	r3, #0
 800569e:	bf0c      	ite	eq
 80056a0:	2301      	moveq	r3, #1
 80056a2:	2300      	movne	r3, #0
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	e012      	b.n	80056ce <HAL_I2C_Init+0x18e>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	1e58      	subs	r0, r3, #1
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6859      	ldr	r1, [r3, #4]
 80056b0:	460b      	mov	r3, r1
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	440b      	add	r3, r1
 80056b6:	0099      	lsls	r1, r3, #2
 80056b8:	440b      	add	r3, r1
 80056ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80056be:	3301      	adds	r3, #1
 80056c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	bf0c      	ite	eq
 80056c8:	2301      	moveq	r3, #1
 80056ca:	2300      	movne	r3, #0
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d001      	beq.n	80056d6 <HAL_I2C_Init+0x196>
 80056d2:	2301      	movs	r3, #1
 80056d4:	e022      	b.n	800571c <HAL_I2C_Init+0x1dc>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d10e      	bne.n	80056fc <HAL_I2C_Init+0x1bc>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	1e58      	subs	r0, r3, #1
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6859      	ldr	r1, [r3, #4]
 80056e6:	460b      	mov	r3, r1
 80056e8:	005b      	lsls	r3, r3, #1
 80056ea:	440b      	add	r3, r1
 80056ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80056f0:	3301      	adds	r3, #1
 80056f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056fa:	e00f      	b.n	800571c <HAL_I2C_Init+0x1dc>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	1e58      	subs	r0, r3, #1
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6859      	ldr	r1, [r3, #4]
 8005704:	460b      	mov	r3, r1
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	440b      	add	r3, r1
 800570a:	0099      	lsls	r1, r3, #2
 800570c:	440b      	add	r3, r1
 800570e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005712:	3301      	adds	r3, #1
 8005714:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005718:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800571c:	6879      	ldr	r1, [r7, #4]
 800571e:	6809      	ldr	r1, [r1, #0]
 8005720:	4313      	orrs	r3, r2
 8005722:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	69da      	ldr	r2, [r3, #28]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a1b      	ldr	r3, [r3, #32]
 8005736:	431a      	orrs	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	430a      	orrs	r2, r1
 800573e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800574a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	6911      	ldr	r1, [r2, #16]
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	68d2      	ldr	r2, [r2, #12]
 8005756:	4311      	orrs	r1, r2
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	6812      	ldr	r2, [r2, #0]
 800575c:	430b      	orrs	r3, r1
 800575e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	695a      	ldr	r2, [r3, #20]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	431a      	orrs	r2, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	430a      	orrs	r2, r1
 800577a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f042 0201 	orr.w	r2, r2, #1
 800578a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2220      	movs	r2, #32
 8005796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3710      	adds	r7, #16
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	000186a0 	.word	0x000186a0
 80057b8:	001e847f 	.word	0x001e847f
 80057bc:	003d08ff 	.word	0x003d08ff
 80057c0:	431bde83 	.word	0x431bde83
 80057c4:	10624dd3 	.word	0x10624dd3

080057c8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b088      	sub	sp, #32
 80057cc:	af02      	add	r7, sp, #8
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	607a      	str	r2, [r7, #4]
 80057d2:	461a      	mov	r2, r3
 80057d4:	460b      	mov	r3, r1
 80057d6:	817b      	strh	r3, [r7, #10]
 80057d8:	4613      	mov	r3, r2
 80057da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80057dc:	f7fe fb3c 	bl	8003e58 <HAL_GetTick>
 80057e0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	2b20      	cmp	r3, #32
 80057ec:	f040 80e0 	bne.w	80059b0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	9300      	str	r3, [sp, #0]
 80057f4:	2319      	movs	r3, #25
 80057f6:	2201      	movs	r2, #1
 80057f8:	4970      	ldr	r1, [pc, #448]	; (80059bc <HAL_I2C_Master_Transmit+0x1f4>)
 80057fa:	68f8      	ldr	r0, [r7, #12]
 80057fc:	f001 fa24 	bl	8006c48 <I2C_WaitOnFlagUntilTimeout>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d001      	beq.n	800580a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005806:	2302      	movs	r3, #2
 8005808:	e0d3      	b.n	80059b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005810:	2b01      	cmp	r3, #1
 8005812:	d101      	bne.n	8005818 <HAL_I2C_Master_Transmit+0x50>
 8005814:	2302      	movs	r3, #2
 8005816:	e0cc      	b.n	80059b2 <HAL_I2C_Master_Transmit+0x1ea>
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 0301 	and.w	r3, r3, #1
 800582a:	2b01      	cmp	r3, #1
 800582c:	d007      	beq.n	800583e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f042 0201 	orr.w	r2, r2, #1
 800583c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800584c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2221      	movs	r2, #33	; 0x21
 8005852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2210      	movs	r2, #16
 800585a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	893a      	ldrh	r2, [r7, #8]
 800586e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005874:	b29a      	uxth	r2, r3
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	4a50      	ldr	r2, [pc, #320]	; (80059c0 <HAL_I2C_Master_Transmit+0x1f8>)
 800587e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005880:	8979      	ldrh	r1, [r7, #10]
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	6a3a      	ldr	r2, [r7, #32]
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	f000 ff10 	bl	80066ac <I2C_MasterRequestWrite>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d001      	beq.n	8005896 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e08d      	b.n	80059b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005896:	2300      	movs	r3, #0
 8005898:	613b      	str	r3, [r7, #16]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	695b      	ldr	r3, [r3, #20]
 80058a0:	613b      	str	r3, [r7, #16]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	699b      	ldr	r3, [r3, #24]
 80058a8:	613b      	str	r3, [r7, #16]
 80058aa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80058ac:	e066      	b.n	800597c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	6a39      	ldr	r1, [r7, #32]
 80058b2:	68f8      	ldr	r0, [r7, #12]
 80058b4:	f001 fa9e 	bl	8006df4 <I2C_WaitOnTXEFlagUntilTimeout>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d00d      	beq.n	80058da <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c2:	2b04      	cmp	r3, #4
 80058c4:	d107      	bne.n	80058d6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e06b      	b.n	80059b2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058de:	781a      	ldrb	r2, [r3, #0]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ea:	1c5a      	adds	r2, r3, #1
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	3b01      	subs	r3, #1
 80058f8:	b29a      	uxth	r2, r3
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005902:	3b01      	subs	r3, #1
 8005904:	b29a      	uxth	r2, r3
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	695b      	ldr	r3, [r3, #20]
 8005910:	f003 0304 	and.w	r3, r3, #4
 8005914:	2b04      	cmp	r3, #4
 8005916:	d11b      	bne.n	8005950 <HAL_I2C_Master_Transmit+0x188>
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800591c:	2b00      	cmp	r3, #0
 800591e:	d017      	beq.n	8005950 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005924:	781a      	ldrb	r2, [r3, #0]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005930:	1c5a      	adds	r2, r3, #1
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800593a:	b29b      	uxth	r3, r3
 800593c:	3b01      	subs	r3, #1
 800593e:	b29a      	uxth	r2, r3
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005948:	3b01      	subs	r3, #1
 800594a:	b29a      	uxth	r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005950:	697a      	ldr	r2, [r7, #20]
 8005952:	6a39      	ldr	r1, [r7, #32]
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	f001 fa8e 	bl	8006e76 <I2C_WaitOnBTFFlagUntilTimeout>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d00d      	beq.n	800597c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005964:	2b04      	cmp	r3, #4
 8005966:	d107      	bne.n	8005978 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005976:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e01a      	b.n	80059b2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005980:	2b00      	cmp	r3, #0
 8005982:	d194      	bne.n	80058ae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005992:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2220      	movs	r2, #32
 8005998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80059ac:	2300      	movs	r3, #0
 80059ae:	e000      	b.n	80059b2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80059b0:	2302      	movs	r3, #2
  }
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3718      	adds	r7, #24
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	00100002 	.word	0x00100002
 80059c0:	ffff0000 	.word	0xffff0000

080059c4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b08c      	sub	sp, #48	; 0x30
 80059c8:	af02      	add	r7, sp, #8
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	607a      	str	r2, [r7, #4]
 80059ce:	461a      	mov	r2, r3
 80059d0:	460b      	mov	r3, r1
 80059d2:	817b      	strh	r3, [r7, #10]
 80059d4:	4613      	mov	r3, r2
 80059d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80059d8:	f7fe fa3e 	bl	8003e58 <HAL_GetTick>
 80059dc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	2b20      	cmp	r3, #32
 80059e8:	f040 820b 	bne.w	8005e02 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80059ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ee:	9300      	str	r3, [sp, #0]
 80059f0:	2319      	movs	r3, #25
 80059f2:	2201      	movs	r2, #1
 80059f4:	497c      	ldr	r1, [pc, #496]	; (8005be8 <HAL_I2C_Master_Receive+0x224>)
 80059f6:	68f8      	ldr	r0, [r7, #12]
 80059f8:	f001 f926 	bl	8006c48 <I2C_WaitOnFlagUntilTimeout>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d001      	beq.n	8005a06 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005a02:	2302      	movs	r3, #2
 8005a04:	e1fe      	b.n	8005e04 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d101      	bne.n	8005a14 <HAL_I2C_Master_Receive+0x50>
 8005a10:	2302      	movs	r3, #2
 8005a12:	e1f7      	b.n	8005e04 <HAL_I2C_Master_Receive+0x440>
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 0301 	and.w	r3, r3, #1
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d007      	beq.n	8005a3a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f042 0201 	orr.w	r2, r2, #1
 8005a38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a48:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2222      	movs	r2, #34	; 0x22
 8005a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2210      	movs	r2, #16
 8005a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	893a      	ldrh	r2, [r7, #8]
 8005a6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a70:	b29a      	uxth	r2, r3
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	4a5c      	ldr	r2, [pc, #368]	; (8005bec <HAL_I2C_Master_Receive+0x228>)
 8005a7a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005a7c:	8979      	ldrh	r1, [r7, #10]
 8005a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a82:	68f8      	ldr	r0, [r7, #12]
 8005a84:	f000 fe94 	bl	80067b0 <I2C_MasterRequestRead>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d001      	beq.n	8005a92 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e1b8      	b.n	8005e04 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d113      	bne.n	8005ac2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	623b      	str	r3, [r7, #32]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	695b      	ldr	r3, [r3, #20]
 8005aa4:	623b      	str	r3, [r7, #32]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	699b      	ldr	r3, [r3, #24]
 8005aac:	623b      	str	r3, [r7, #32]
 8005aae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005abe:	601a      	str	r2, [r3, #0]
 8005ac0:	e18c      	b.n	8005ddc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d11b      	bne.n	8005b02 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ad8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ada:	2300      	movs	r3, #0
 8005adc:	61fb      	str	r3, [r7, #28]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	695b      	ldr	r3, [r3, #20]
 8005ae4:	61fb      	str	r3, [r7, #28]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	61fb      	str	r3, [r7, #28]
 8005aee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005afe:	601a      	str	r2, [r3, #0]
 8005b00:	e16c      	b.n	8005ddc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d11b      	bne.n	8005b42 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b18:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	61bb      	str	r3, [r7, #24]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	695b      	ldr	r3, [r3, #20]
 8005b34:	61bb      	str	r3, [r7, #24]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	699b      	ldr	r3, [r3, #24]
 8005b3c:	61bb      	str	r3, [r7, #24]
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	e14c      	b.n	8005ddc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b52:	2300      	movs	r3, #0
 8005b54:	617b      	str	r3, [r7, #20]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	695b      	ldr	r3, [r3, #20]
 8005b5c:	617b      	str	r3, [r7, #20]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	699b      	ldr	r3, [r3, #24]
 8005b64:	617b      	str	r3, [r7, #20]
 8005b66:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005b68:	e138      	b.n	8005ddc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b6e:	2b03      	cmp	r3, #3
 8005b70:	f200 80f1 	bhi.w	8005d56 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d123      	bne.n	8005bc4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b80:	68f8      	ldr	r0, [r7, #12]
 8005b82:	f001 f9b9 	bl	8006ef8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d001      	beq.n	8005b90 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e139      	b.n	8005e04 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	691a      	ldr	r2, [r3, #16]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9a:	b2d2      	uxtb	r2, r2
 8005b9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba2:	1c5a      	adds	r2, r3, #1
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bac:	3b01      	subs	r3, #1
 8005bae:	b29a      	uxth	r2, r3
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	b29a      	uxth	r2, r3
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005bc2:	e10b      	b.n	8005ddc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	d14e      	bne.n	8005c6a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bce:	9300      	str	r3, [sp, #0]
 8005bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	4906      	ldr	r1, [pc, #24]	; (8005bf0 <HAL_I2C_Master_Receive+0x22c>)
 8005bd6:	68f8      	ldr	r0, [r7, #12]
 8005bd8:	f001 f836 	bl	8006c48 <I2C_WaitOnFlagUntilTimeout>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d008      	beq.n	8005bf4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e10e      	b.n	8005e04 <HAL_I2C_Master_Receive+0x440>
 8005be6:	bf00      	nop
 8005be8:	00100002 	.word	0x00100002
 8005bec:	ffff0000 	.word	0xffff0000
 8005bf0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	691a      	ldr	r2, [r3, #16]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0e:	b2d2      	uxtb	r2, r2
 8005c10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c16:	1c5a      	adds	r2, r3, #1
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c20:	3b01      	subs	r3, #1
 8005c22:	b29a      	uxth	r2, r3
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	3b01      	subs	r3, #1
 8005c30:	b29a      	uxth	r2, r3
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	691a      	ldr	r2, [r3, #16]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c40:	b2d2      	uxtb	r2, r2
 8005c42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c48:	1c5a      	adds	r2, r3, #1
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c52:	3b01      	subs	r3, #1
 8005c54:	b29a      	uxth	r2, r3
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	3b01      	subs	r3, #1
 8005c62:	b29a      	uxth	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005c68:	e0b8      	b.n	8005ddc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6c:	9300      	str	r3, [sp, #0]
 8005c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c70:	2200      	movs	r2, #0
 8005c72:	4966      	ldr	r1, [pc, #408]	; (8005e0c <HAL_I2C_Master_Receive+0x448>)
 8005c74:	68f8      	ldr	r0, [r7, #12]
 8005c76:	f000 ffe7 	bl	8006c48 <I2C_WaitOnFlagUntilTimeout>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d001      	beq.n	8005c84 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e0bf      	b.n	8005e04 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	691a      	ldr	r2, [r3, #16]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9e:	b2d2      	uxtb	r2, r2
 8005ca0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca6:	1c5a      	adds	r2, r3, #1
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	b29a      	uxth	r2, r3
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	b29a      	uxth	r2, r3
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc8:	9300      	str	r3, [sp, #0]
 8005cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ccc:	2200      	movs	r2, #0
 8005cce:	494f      	ldr	r1, [pc, #316]	; (8005e0c <HAL_I2C_Master_Receive+0x448>)
 8005cd0:	68f8      	ldr	r0, [r7, #12]
 8005cd2:	f000 ffb9 	bl	8006c48 <I2C_WaitOnFlagUntilTimeout>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d001      	beq.n	8005ce0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e091      	b.n	8005e04 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	691a      	ldr	r2, [r3, #16]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfa:	b2d2      	uxtb	r2, r2
 8005cfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d02:	1c5a      	adds	r2, r3, #1
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d0c:	3b01      	subs	r3, #1
 8005d0e:	b29a      	uxth	r2, r3
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	b29a      	uxth	r2, r3
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	691a      	ldr	r2, [r3, #16]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2c:	b2d2      	uxtb	r2, r2
 8005d2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d34:	1c5a      	adds	r2, r3, #1
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d3e:	3b01      	subs	r3, #1
 8005d40:	b29a      	uxth	r2, r3
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	3b01      	subs	r3, #1
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005d54:	e042      	b.n	8005ddc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	f001 f8cc 	bl	8006ef8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d001      	beq.n	8005d6a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e04c      	b.n	8005e04 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	691a      	ldr	r2, [r3, #16]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d74:	b2d2      	uxtb	r2, r2
 8005d76:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7c:	1c5a      	adds	r2, r3, #1
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d86:	3b01      	subs	r3, #1
 8005d88:	b29a      	uxth	r2, r3
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	3b01      	subs	r3, #1
 8005d96:	b29a      	uxth	r2, r3
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	695b      	ldr	r3, [r3, #20]
 8005da2:	f003 0304 	and.w	r3, r3, #4
 8005da6:	2b04      	cmp	r3, #4
 8005da8:	d118      	bne.n	8005ddc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	691a      	ldr	r2, [r3, #16]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db4:	b2d2      	uxtb	r2, r2
 8005db6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dbc:	1c5a      	adds	r2, r3, #1
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dc6:	3b01      	subs	r3, #1
 8005dc8:	b29a      	uxth	r2, r3
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	f47f aec2 	bne.w	8005b6a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2220      	movs	r2, #32
 8005dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	e000      	b.n	8005e04 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005e02:	2302      	movs	r3, #2
  }
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3728      	adds	r7, #40	; 0x28
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	00010004 	.word	0x00010004

08005e10 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b088      	sub	sp, #32
 8005e14:	af02      	add	r7, sp, #8
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	4608      	mov	r0, r1
 8005e1a:	4611      	mov	r1, r2
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	4603      	mov	r3, r0
 8005e20:	817b      	strh	r3, [r7, #10]
 8005e22:	460b      	mov	r3, r1
 8005e24:	813b      	strh	r3, [r7, #8]
 8005e26:	4613      	mov	r3, r2
 8005e28:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005e2a:	f7fe f815 	bl	8003e58 <HAL_GetTick>
 8005e2e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	2b20      	cmp	r3, #32
 8005e3a:	f040 80d9 	bne.w	8005ff0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	9300      	str	r3, [sp, #0]
 8005e42:	2319      	movs	r3, #25
 8005e44:	2201      	movs	r2, #1
 8005e46:	496d      	ldr	r1, [pc, #436]	; (8005ffc <HAL_I2C_Mem_Write+0x1ec>)
 8005e48:	68f8      	ldr	r0, [r7, #12]
 8005e4a:	f000 fefd 	bl	8006c48 <I2C_WaitOnFlagUntilTimeout>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d001      	beq.n	8005e58 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005e54:	2302      	movs	r3, #2
 8005e56:	e0cc      	b.n	8005ff2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d101      	bne.n	8005e66 <HAL_I2C_Mem_Write+0x56>
 8005e62:	2302      	movs	r3, #2
 8005e64:	e0c5      	b.n	8005ff2 <HAL_I2C_Mem_Write+0x1e2>
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0301 	and.w	r3, r3, #1
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d007      	beq.n	8005e8c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f042 0201 	orr.w	r2, r2, #1
 8005e8a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e9a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2221      	movs	r2, #33	; 0x21
 8005ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2240      	movs	r2, #64	; 0x40
 8005ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6a3a      	ldr	r2, [r7, #32]
 8005eb6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005ebc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ec2:	b29a      	uxth	r2, r3
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	4a4d      	ldr	r2, [pc, #308]	; (8006000 <HAL_I2C_Mem_Write+0x1f0>)
 8005ecc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005ece:	88f8      	ldrh	r0, [r7, #6]
 8005ed0:	893a      	ldrh	r2, [r7, #8]
 8005ed2:	8979      	ldrh	r1, [r7, #10]
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	9301      	str	r3, [sp, #4]
 8005ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eda:	9300      	str	r3, [sp, #0]
 8005edc:	4603      	mov	r3, r0
 8005ede:	68f8      	ldr	r0, [r7, #12]
 8005ee0:	f000 fd34 	bl	800694c <I2C_RequestMemoryWrite>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d052      	beq.n	8005f90 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e081      	b.n	8005ff2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005eee:	697a      	ldr	r2, [r7, #20]
 8005ef0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ef2:	68f8      	ldr	r0, [r7, #12]
 8005ef4:	f000 ff7e 	bl	8006df4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00d      	beq.n	8005f1a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f02:	2b04      	cmp	r3, #4
 8005f04:	d107      	bne.n	8005f16 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f14:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	e06b      	b.n	8005ff2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1e:	781a      	ldrb	r2, [r3, #0]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2a:	1c5a      	adds	r2, r3, #1
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f34:	3b01      	subs	r3, #1
 8005f36:	b29a      	uxth	r2, r3
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	3b01      	subs	r3, #1
 8005f44:	b29a      	uxth	r2, r3
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	695b      	ldr	r3, [r3, #20]
 8005f50:	f003 0304 	and.w	r3, r3, #4
 8005f54:	2b04      	cmp	r3, #4
 8005f56:	d11b      	bne.n	8005f90 <HAL_I2C_Mem_Write+0x180>
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d017      	beq.n	8005f90 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f64:	781a      	ldrb	r2, [r3, #0]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f70:	1c5a      	adds	r2, r3, #1
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	b29a      	uxth	r2, r3
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	3b01      	subs	r3, #1
 8005f8a:	b29a      	uxth	r2, r3
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d1aa      	bne.n	8005eee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f98:	697a      	ldr	r2, [r7, #20]
 8005f9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f9c:	68f8      	ldr	r0, [r7, #12]
 8005f9e:	f000 ff6a 	bl	8006e76 <I2C_WaitOnBTFFlagUntilTimeout>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00d      	beq.n	8005fc4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fac:	2b04      	cmp	r3, #4
 8005fae:	d107      	bne.n	8005fc0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fbe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e016      	b.n	8005ff2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2220      	movs	r2, #32
 8005fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005fec:	2300      	movs	r3, #0
 8005fee:	e000      	b.n	8005ff2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005ff0:	2302      	movs	r3, #2
  }
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3718      	adds	r7, #24
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	00100002 	.word	0x00100002
 8006000:	ffff0000 	.word	0xffff0000

08006004 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b08c      	sub	sp, #48	; 0x30
 8006008:	af02      	add	r7, sp, #8
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	4608      	mov	r0, r1
 800600e:	4611      	mov	r1, r2
 8006010:	461a      	mov	r2, r3
 8006012:	4603      	mov	r3, r0
 8006014:	817b      	strh	r3, [r7, #10]
 8006016:	460b      	mov	r3, r1
 8006018:	813b      	strh	r3, [r7, #8]
 800601a:	4613      	mov	r3, r2
 800601c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800601e:	f7fd ff1b 	bl	8003e58 <HAL_GetTick>
 8006022:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800602a:	b2db      	uxtb	r3, r3
 800602c:	2b20      	cmp	r3, #32
 800602e:	f040 8208 	bne.w	8006442 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006034:	9300      	str	r3, [sp, #0]
 8006036:	2319      	movs	r3, #25
 8006038:	2201      	movs	r2, #1
 800603a:	497b      	ldr	r1, [pc, #492]	; (8006228 <HAL_I2C_Mem_Read+0x224>)
 800603c:	68f8      	ldr	r0, [r7, #12]
 800603e:	f000 fe03 	bl	8006c48 <I2C_WaitOnFlagUntilTimeout>
 8006042:	4603      	mov	r3, r0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d001      	beq.n	800604c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006048:	2302      	movs	r3, #2
 800604a:	e1fb      	b.n	8006444 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006052:	2b01      	cmp	r3, #1
 8006054:	d101      	bne.n	800605a <HAL_I2C_Mem_Read+0x56>
 8006056:	2302      	movs	r3, #2
 8006058:	e1f4      	b.n	8006444 <HAL_I2C_Mem_Read+0x440>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2201      	movs	r2, #1
 800605e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 0301 	and.w	r3, r3, #1
 800606c:	2b01      	cmp	r3, #1
 800606e:	d007      	beq.n	8006080 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f042 0201 	orr.w	r2, r2, #1
 800607e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800608e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2222      	movs	r2, #34	; 0x22
 8006094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2240      	movs	r2, #64	; 0x40
 800609c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2200      	movs	r2, #0
 80060a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80060b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060b6:	b29a      	uxth	r2, r3
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	4a5b      	ldr	r2, [pc, #364]	; (800622c <HAL_I2C_Mem_Read+0x228>)
 80060c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80060c2:	88f8      	ldrh	r0, [r7, #6]
 80060c4:	893a      	ldrh	r2, [r7, #8]
 80060c6:	8979      	ldrh	r1, [r7, #10]
 80060c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ca:	9301      	str	r3, [sp, #4]
 80060cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ce:	9300      	str	r3, [sp, #0]
 80060d0:	4603      	mov	r3, r0
 80060d2:	68f8      	ldr	r0, [r7, #12]
 80060d4:	f000 fcd0 	bl	8006a78 <I2C_RequestMemoryRead>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d001      	beq.n	80060e2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e1b0      	b.n	8006444 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d113      	bne.n	8006112 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060ea:	2300      	movs	r3, #0
 80060ec:	623b      	str	r3, [r7, #32]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	695b      	ldr	r3, [r3, #20]
 80060f4:	623b      	str	r3, [r7, #32]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	699b      	ldr	r3, [r3, #24]
 80060fc:	623b      	str	r3, [r7, #32]
 80060fe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800610e:	601a      	str	r2, [r3, #0]
 8006110:	e184      	b.n	800641c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006116:	2b01      	cmp	r3, #1
 8006118:	d11b      	bne.n	8006152 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006128:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800612a:	2300      	movs	r3, #0
 800612c:	61fb      	str	r3, [r7, #28]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	695b      	ldr	r3, [r3, #20]
 8006134:	61fb      	str	r3, [r7, #28]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	699b      	ldr	r3, [r3, #24]
 800613c:	61fb      	str	r3, [r7, #28]
 800613e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800614e:	601a      	str	r2, [r3, #0]
 8006150:	e164      	b.n	800641c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006156:	2b02      	cmp	r3, #2
 8006158:	d11b      	bne.n	8006192 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006168:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006178:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800617a:	2300      	movs	r3, #0
 800617c:	61bb      	str	r3, [r7, #24]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	695b      	ldr	r3, [r3, #20]
 8006184:	61bb      	str	r3, [r7, #24]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	699b      	ldr	r3, [r3, #24]
 800618c:	61bb      	str	r3, [r7, #24]
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	e144      	b.n	800641c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006192:	2300      	movs	r3, #0
 8006194:	617b      	str	r3, [r7, #20]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	695b      	ldr	r3, [r3, #20]
 800619c:	617b      	str	r3, [r7, #20]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	699b      	ldr	r3, [r3, #24]
 80061a4:	617b      	str	r3, [r7, #20]
 80061a6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80061a8:	e138      	b.n	800641c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061ae:	2b03      	cmp	r3, #3
 80061b0:	f200 80f1 	bhi.w	8006396 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d123      	bne.n	8006204 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80061c0:	68f8      	ldr	r0, [r7, #12]
 80061c2:	f000 fe99 	bl	8006ef8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d001      	beq.n	80061d0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e139      	b.n	8006444 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	691a      	ldr	r2, [r3, #16]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061da:	b2d2      	uxtb	r2, r2
 80061dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e2:	1c5a      	adds	r2, r3, #1
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061ec:	3b01      	subs	r3, #1
 80061ee:	b29a      	uxth	r2, r3
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	3b01      	subs	r3, #1
 80061fc:	b29a      	uxth	r2, r3
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006202:	e10b      	b.n	800641c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006208:	2b02      	cmp	r3, #2
 800620a:	d14e      	bne.n	80062aa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800620c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620e:	9300      	str	r3, [sp, #0]
 8006210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006212:	2200      	movs	r2, #0
 8006214:	4906      	ldr	r1, [pc, #24]	; (8006230 <HAL_I2C_Mem_Read+0x22c>)
 8006216:	68f8      	ldr	r0, [r7, #12]
 8006218:	f000 fd16 	bl	8006c48 <I2C_WaitOnFlagUntilTimeout>
 800621c:	4603      	mov	r3, r0
 800621e:	2b00      	cmp	r3, #0
 8006220:	d008      	beq.n	8006234 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e10e      	b.n	8006444 <HAL_I2C_Mem_Read+0x440>
 8006226:	bf00      	nop
 8006228:	00100002 	.word	0x00100002
 800622c:	ffff0000 	.word	0xffff0000
 8006230:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006242:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	691a      	ldr	r2, [r3, #16]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624e:	b2d2      	uxtb	r2, r2
 8006250:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006256:	1c5a      	adds	r2, r3, #1
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006260:	3b01      	subs	r3, #1
 8006262:	b29a      	uxth	r2, r3
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800626c:	b29b      	uxth	r3, r3
 800626e:	3b01      	subs	r3, #1
 8006270:	b29a      	uxth	r2, r3
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	691a      	ldr	r2, [r3, #16]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006280:	b2d2      	uxtb	r2, r2
 8006282:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006288:	1c5a      	adds	r2, r3, #1
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006292:	3b01      	subs	r3, #1
 8006294:	b29a      	uxth	r2, r3
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800629e:	b29b      	uxth	r3, r3
 80062a0:	3b01      	subs	r3, #1
 80062a2:	b29a      	uxth	r2, r3
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80062a8:	e0b8      	b.n	800641c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80062aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ac:	9300      	str	r3, [sp, #0]
 80062ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b0:	2200      	movs	r2, #0
 80062b2:	4966      	ldr	r1, [pc, #408]	; (800644c <HAL_I2C_Mem_Read+0x448>)
 80062b4:	68f8      	ldr	r0, [r7, #12]
 80062b6:	f000 fcc7 	bl	8006c48 <I2C_WaitOnFlagUntilTimeout>
 80062ba:	4603      	mov	r3, r0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d001      	beq.n	80062c4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e0bf      	b.n	8006444 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	691a      	ldr	r2, [r3, #16]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062de:	b2d2      	uxtb	r2, r2
 80062e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e6:	1c5a      	adds	r2, r3, #1
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062f0:	3b01      	subs	r3, #1
 80062f2:	b29a      	uxth	r2, r3
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	3b01      	subs	r3, #1
 8006300:	b29a      	uxth	r2, r3
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006308:	9300      	str	r3, [sp, #0]
 800630a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800630c:	2200      	movs	r2, #0
 800630e:	494f      	ldr	r1, [pc, #316]	; (800644c <HAL_I2C_Mem_Read+0x448>)
 8006310:	68f8      	ldr	r0, [r7, #12]
 8006312:	f000 fc99 	bl	8006c48 <I2C_WaitOnFlagUntilTimeout>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d001      	beq.n	8006320 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	e091      	b.n	8006444 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800632e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	691a      	ldr	r2, [r3, #16]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633a:	b2d2      	uxtb	r2, r2
 800633c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006342:	1c5a      	adds	r2, r3, #1
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800634c:	3b01      	subs	r3, #1
 800634e:	b29a      	uxth	r2, r3
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006358:	b29b      	uxth	r3, r3
 800635a:	3b01      	subs	r3, #1
 800635c:	b29a      	uxth	r2, r3
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	691a      	ldr	r2, [r3, #16]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636c:	b2d2      	uxtb	r2, r2
 800636e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006374:	1c5a      	adds	r2, r3, #1
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800637e:	3b01      	subs	r3, #1
 8006380:	b29a      	uxth	r2, r3
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800638a:	b29b      	uxth	r3, r3
 800638c:	3b01      	subs	r3, #1
 800638e:	b29a      	uxth	r2, r3
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006394:	e042      	b.n	800641c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006398:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800639a:	68f8      	ldr	r0, [r7, #12]
 800639c:	f000 fdac 	bl	8006ef8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80063a0:	4603      	mov	r3, r0
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d001      	beq.n	80063aa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e04c      	b.n	8006444 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	691a      	ldr	r2, [r3, #16]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b4:	b2d2      	uxtb	r2, r2
 80063b6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063bc:	1c5a      	adds	r2, r3, #1
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063c6:	3b01      	subs	r3, #1
 80063c8:	b29a      	uxth	r2, r3
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	3b01      	subs	r3, #1
 80063d6:	b29a      	uxth	r2, r3
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	695b      	ldr	r3, [r3, #20]
 80063e2:	f003 0304 	and.w	r3, r3, #4
 80063e6:	2b04      	cmp	r3, #4
 80063e8:	d118      	bne.n	800641c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	691a      	ldr	r2, [r3, #16]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f4:	b2d2      	uxtb	r2, r2
 80063f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fc:	1c5a      	adds	r2, r3, #1
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006406:	3b01      	subs	r3, #1
 8006408:	b29a      	uxth	r2, r3
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006412:	b29b      	uxth	r3, r3
 8006414:	3b01      	subs	r3, #1
 8006416:	b29a      	uxth	r2, r3
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006420:	2b00      	cmp	r3, #0
 8006422:	f47f aec2 	bne.w	80061aa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2220      	movs	r2, #32
 800642a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2200      	movs	r2, #0
 8006432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800643e:	2300      	movs	r3, #0
 8006440:	e000      	b.n	8006444 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006442:	2302      	movs	r3, #2
  }
}
 8006444:	4618      	mov	r0, r3
 8006446:	3728      	adds	r7, #40	; 0x28
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}
 800644c:	00010004 	.word	0x00010004

08006450 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b08a      	sub	sp, #40	; 0x28
 8006454:	af02      	add	r7, sp, #8
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	607a      	str	r2, [r7, #4]
 800645a:	603b      	str	r3, [r7, #0]
 800645c:	460b      	mov	r3, r1
 800645e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006460:	f7fd fcfa 	bl	8003e58 <HAL_GetTick>
 8006464:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8006466:	2300      	movs	r3, #0
 8006468:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006470:	b2db      	uxtb	r3, r3
 8006472:	2b20      	cmp	r3, #32
 8006474:	f040 8111 	bne.w	800669a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	9300      	str	r3, [sp, #0]
 800647c:	2319      	movs	r3, #25
 800647e:	2201      	movs	r2, #1
 8006480:	4988      	ldr	r1, [pc, #544]	; (80066a4 <HAL_I2C_IsDeviceReady+0x254>)
 8006482:	68f8      	ldr	r0, [r7, #12]
 8006484:	f000 fbe0 	bl	8006c48 <I2C_WaitOnFlagUntilTimeout>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d001      	beq.n	8006492 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800648e:	2302      	movs	r3, #2
 8006490:	e104      	b.n	800669c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006498:	2b01      	cmp	r3, #1
 800649a:	d101      	bne.n	80064a0 <HAL_I2C_IsDeviceReady+0x50>
 800649c:	2302      	movs	r3, #2
 800649e:	e0fd      	b.n	800669c <HAL_I2C_IsDeviceReady+0x24c>
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 0301 	and.w	r3, r3, #1
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d007      	beq.n	80064c6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f042 0201 	orr.w	r2, r2, #1
 80064c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80064d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2224      	movs	r2, #36	; 0x24
 80064da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2200      	movs	r2, #0
 80064e2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	4a70      	ldr	r2, [pc, #448]	; (80066a8 <HAL_I2C_IsDeviceReady+0x258>)
 80064e8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064f8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	9300      	str	r3, [sp, #0]
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	2200      	movs	r2, #0
 8006502:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006506:	68f8      	ldr	r0, [r7, #12]
 8006508:	f000 fb9e 	bl	8006c48 <I2C_WaitOnFlagUntilTimeout>
 800650c:	4603      	mov	r3, r0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00d      	beq.n	800652e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800651c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006520:	d103      	bne.n	800652a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006528:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800652a:	2303      	movs	r3, #3
 800652c:	e0b6      	b.n	800669c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800652e:	897b      	ldrh	r3, [r7, #10]
 8006530:	b2db      	uxtb	r3, r3
 8006532:	461a      	mov	r2, r3
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800653c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800653e:	f7fd fc8b 	bl	8003e58 <HAL_GetTick>
 8006542:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	695b      	ldr	r3, [r3, #20]
 800654a:	f003 0302 	and.w	r3, r3, #2
 800654e:	2b02      	cmp	r3, #2
 8006550:	bf0c      	ite	eq
 8006552:	2301      	moveq	r3, #1
 8006554:	2300      	movne	r3, #0
 8006556:	b2db      	uxtb	r3, r3
 8006558:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	695b      	ldr	r3, [r3, #20]
 8006560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006564:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006568:	bf0c      	ite	eq
 800656a:	2301      	moveq	r3, #1
 800656c:	2300      	movne	r3, #0
 800656e:	b2db      	uxtb	r3, r3
 8006570:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006572:	e025      	b.n	80065c0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006574:	f7fd fc70 	bl	8003e58 <HAL_GetTick>
 8006578:	4602      	mov	r2, r0
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	1ad3      	subs	r3, r2, r3
 800657e:	683a      	ldr	r2, [r7, #0]
 8006580:	429a      	cmp	r2, r3
 8006582:	d302      	bcc.n	800658a <HAL_I2C_IsDeviceReady+0x13a>
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d103      	bne.n	8006592 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	22a0      	movs	r2, #160	; 0xa0
 800658e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	695b      	ldr	r3, [r3, #20]
 8006598:	f003 0302 	and.w	r3, r3, #2
 800659c:	2b02      	cmp	r3, #2
 800659e:	bf0c      	ite	eq
 80065a0:	2301      	moveq	r3, #1
 80065a2:	2300      	movne	r3, #0
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	695b      	ldr	r3, [r3, #20]
 80065ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065b6:	bf0c      	ite	eq
 80065b8:	2301      	moveq	r3, #1
 80065ba:	2300      	movne	r3, #0
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	2ba0      	cmp	r3, #160	; 0xa0
 80065ca:	d005      	beq.n	80065d8 <HAL_I2C_IsDeviceReady+0x188>
 80065cc:	7dfb      	ldrb	r3, [r7, #23]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d102      	bne.n	80065d8 <HAL_I2C_IsDeviceReady+0x188>
 80065d2:	7dbb      	ldrb	r3, [r7, #22]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d0cd      	beq.n	8006574 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2220      	movs	r2, #32
 80065dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	695b      	ldr	r3, [r3, #20]
 80065e6:	f003 0302 	and.w	r3, r3, #2
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	d129      	bne.n	8006642 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065fc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065fe:	2300      	movs	r3, #0
 8006600:	613b      	str	r3, [r7, #16]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	695b      	ldr	r3, [r3, #20]
 8006608:	613b      	str	r3, [r7, #16]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	699b      	ldr	r3, [r3, #24]
 8006610:	613b      	str	r3, [r7, #16]
 8006612:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	9300      	str	r3, [sp, #0]
 8006618:	2319      	movs	r3, #25
 800661a:	2201      	movs	r2, #1
 800661c:	4921      	ldr	r1, [pc, #132]	; (80066a4 <HAL_I2C_IsDeviceReady+0x254>)
 800661e:	68f8      	ldr	r0, [r7, #12]
 8006620:	f000 fb12 	bl	8006c48 <I2C_WaitOnFlagUntilTimeout>
 8006624:	4603      	mov	r3, r0
 8006626:	2b00      	cmp	r3, #0
 8006628:	d001      	beq.n	800662e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	e036      	b.n	800669c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2220      	movs	r2, #32
 8006632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800663e:	2300      	movs	r3, #0
 8006640:	e02c      	b.n	800669c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006650:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800665a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	9300      	str	r3, [sp, #0]
 8006660:	2319      	movs	r3, #25
 8006662:	2201      	movs	r2, #1
 8006664:	490f      	ldr	r1, [pc, #60]	; (80066a4 <HAL_I2C_IsDeviceReady+0x254>)
 8006666:	68f8      	ldr	r0, [r7, #12]
 8006668:	f000 faee 	bl	8006c48 <I2C_WaitOnFlagUntilTimeout>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d001      	beq.n	8006676 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	e012      	b.n	800669c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	3301      	adds	r3, #1
 800667a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800667c:	69ba      	ldr	r2, [r7, #24]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	429a      	cmp	r2, r3
 8006682:	f4ff af32 	bcc.w	80064ea <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2220      	movs	r2, #32
 800668a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2200      	movs	r2, #0
 8006692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	e000      	b.n	800669c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800669a:	2302      	movs	r3, #2
  }
}
 800669c:	4618      	mov	r0, r3
 800669e:	3720      	adds	r7, #32
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}
 80066a4:	00100002 	.word	0x00100002
 80066a8:	ffff0000 	.word	0xffff0000

080066ac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b088      	sub	sp, #32
 80066b0:	af02      	add	r7, sp, #8
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	607a      	str	r2, [r7, #4]
 80066b6:	603b      	str	r3, [r7, #0]
 80066b8:	460b      	mov	r3, r1
 80066ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	2b08      	cmp	r3, #8
 80066c6:	d006      	beq.n	80066d6 <I2C_MasterRequestWrite+0x2a>
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d003      	beq.n	80066d6 <I2C_MasterRequestWrite+0x2a>
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80066d4:	d108      	bne.n	80066e8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066e4:	601a      	str	r2, [r3, #0]
 80066e6:	e00b      	b.n	8006700 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ec:	2b12      	cmp	r3, #18
 80066ee:	d107      	bne.n	8006700 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	9300      	str	r3, [sp, #0]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800670c:	68f8      	ldr	r0, [r7, #12]
 800670e:	f000 fa9b 	bl	8006c48 <I2C_WaitOnFlagUntilTimeout>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00d      	beq.n	8006734 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006726:	d103      	bne.n	8006730 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800672e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006730:	2303      	movs	r3, #3
 8006732:	e035      	b.n	80067a0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	691b      	ldr	r3, [r3, #16]
 8006738:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800673c:	d108      	bne.n	8006750 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800673e:	897b      	ldrh	r3, [r7, #10]
 8006740:	b2db      	uxtb	r3, r3
 8006742:	461a      	mov	r2, r3
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800674c:	611a      	str	r2, [r3, #16]
 800674e:	e01b      	b.n	8006788 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006750:	897b      	ldrh	r3, [r7, #10]
 8006752:	11db      	asrs	r3, r3, #7
 8006754:	b2db      	uxtb	r3, r3
 8006756:	f003 0306 	and.w	r3, r3, #6
 800675a:	b2db      	uxtb	r3, r3
 800675c:	f063 030f 	orn	r3, r3, #15
 8006760:	b2da      	uxtb	r2, r3
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	490e      	ldr	r1, [pc, #56]	; (80067a8 <I2C_MasterRequestWrite+0xfc>)
 800676e:	68f8      	ldr	r0, [r7, #12]
 8006770:	f000 fac1 	bl	8006cf6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006774:	4603      	mov	r3, r0
 8006776:	2b00      	cmp	r3, #0
 8006778:	d001      	beq.n	800677e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	e010      	b.n	80067a0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800677e:	897b      	ldrh	r3, [r7, #10]
 8006780:	b2da      	uxtb	r2, r3
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	4907      	ldr	r1, [pc, #28]	; (80067ac <I2C_MasterRequestWrite+0x100>)
 800678e:	68f8      	ldr	r0, [r7, #12]
 8006790:	f000 fab1 	bl	8006cf6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006794:	4603      	mov	r3, r0
 8006796:	2b00      	cmp	r3, #0
 8006798:	d001      	beq.n	800679e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e000      	b.n	80067a0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800679e:	2300      	movs	r3, #0
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3718      	adds	r7, #24
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}
 80067a8:	00010008 	.word	0x00010008
 80067ac:	00010002 	.word	0x00010002

080067b0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b088      	sub	sp, #32
 80067b4:	af02      	add	r7, sp, #8
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	607a      	str	r2, [r7, #4]
 80067ba:	603b      	str	r3, [r7, #0]
 80067bc:	460b      	mov	r3, r1
 80067be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80067d4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	2b08      	cmp	r3, #8
 80067da:	d006      	beq.n	80067ea <I2C_MasterRequestRead+0x3a>
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d003      	beq.n	80067ea <I2C_MasterRequestRead+0x3a>
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80067e8:	d108      	bne.n	80067fc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067f8:	601a      	str	r2, [r3, #0]
 80067fa:	e00b      	b.n	8006814 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006800:	2b11      	cmp	r3, #17
 8006802:	d107      	bne.n	8006814 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006812:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	9300      	str	r3, [sp, #0]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006820:	68f8      	ldr	r0, [r7, #12]
 8006822:	f000 fa11 	bl	8006c48 <I2C_WaitOnFlagUntilTimeout>
 8006826:	4603      	mov	r3, r0
 8006828:	2b00      	cmp	r3, #0
 800682a:	d00d      	beq.n	8006848 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006836:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800683a:	d103      	bne.n	8006844 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006842:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006844:	2303      	movs	r3, #3
 8006846:	e079      	b.n	800693c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	691b      	ldr	r3, [r3, #16]
 800684c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006850:	d108      	bne.n	8006864 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006852:	897b      	ldrh	r3, [r7, #10]
 8006854:	b2db      	uxtb	r3, r3
 8006856:	f043 0301 	orr.w	r3, r3, #1
 800685a:	b2da      	uxtb	r2, r3
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	611a      	str	r2, [r3, #16]
 8006862:	e05f      	b.n	8006924 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006864:	897b      	ldrh	r3, [r7, #10]
 8006866:	11db      	asrs	r3, r3, #7
 8006868:	b2db      	uxtb	r3, r3
 800686a:	f003 0306 	and.w	r3, r3, #6
 800686e:	b2db      	uxtb	r3, r3
 8006870:	f063 030f 	orn	r3, r3, #15
 8006874:	b2da      	uxtb	r2, r3
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	4930      	ldr	r1, [pc, #192]	; (8006944 <I2C_MasterRequestRead+0x194>)
 8006882:	68f8      	ldr	r0, [r7, #12]
 8006884:	f000 fa37 	bl	8006cf6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006888:	4603      	mov	r3, r0
 800688a:	2b00      	cmp	r3, #0
 800688c:	d001      	beq.n	8006892 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	e054      	b.n	800693c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006892:	897b      	ldrh	r3, [r7, #10]
 8006894:	b2da      	uxtb	r2, r3
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	4929      	ldr	r1, [pc, #164]	; (8006948 <I2C_MasterRequestRead+0x198>)
 80068a2:	68f8      	ldr	r0, [r7, #12]
 80068a4:	f000 fa27 	bl	8006cf6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80068a8:	4603      	mov	r3, r0
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d001      	beq.n	80068b2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e044      	b.n	800693c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068b2:	2300      	movs	r3, #0
 80068b4:	613b      	str	r3, [r7, #16]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	695b      	ldr	r3, [r3, #20]
 80068bc:	613b      	str	r3, [r7, #16]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	699b      	ldr	r3, [r3, #24]
 80068c4:	613b      	str	r3, [r7, #16]
 80068c6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068d6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	9300      	str	r3, [sp, #0]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80068e4:	68f8      	ldr	r0, [r7, #12]
 80068e6:	f000 f9af 	bl	8006c48 <I2C_WaitOnFlagUntilTimeout>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d00d      	beq.n	800690c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068fe:	d103      	bne.n	8006908 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006906:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006908:	2303      	movs	r3, #3
 800690a:	e017      	b.n	800693c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800690c:	897b      	ldrh	r3, [r7, #10]
 800690e:	11db      	asrs	r3, r3, #7
 8006910:	b2db      	uxtb	r3, r3
 8006912:	f003 0306 	and.w	r3, r3, #6
 8006916:	b2db      	uxtb	r3, r3
 8006918:	f063 030e 	orn	r3, r3, #14
 800691c:	b2da      	uxtb	r2, r3
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	4907      	ldr	r1, [pc, #28]	; (8006948 <I2C_MasterRequestRead+0x198>)
 800692a:	68f8      	ldr	r0, [r7, #12]
 800692c:	f000 f9e3 	bl	8006cf6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006930:	4603      	mov	r3, r0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d001      	beq.n	800693a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e000      	b.n	800693c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800693a:	2300      	movs	r3, #0
}
 800693c:	4618      	mov	r0, r3
 800693e:	3718      	adds	r7, #24
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}
 8006944:	00010008 	.word	0x00010008
 8006948:	00010002 	.word	0x00010002

0800694c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b088      	sub	sp, #32
 8006950:	af02      	add	r7, sp, #8
 8006952:	60f8      	str	r0, [r7, #12]
 8006954:	4608      	mov	r0, r1
 8006956:	4611      	mov	r1, r2
 8006958:	461a      	mov	r2, r3
 800695a:	4603      	mov	r3, r0
 800695c:	817b      	strh	r3, [r7, #10]
 800695e:	460b      	mov	r3, r1
 8006960:	813b      	strh	r3, [r7, #8]
 8006962:	4613      	mov	r3, r2
 8006964:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006974:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006978:	9300      	str	r3, [sp, #0]
 800697a:	6a3b      	ldr	r3, [r7, #32]
 800697c:	2200      	movs	r2, #0
 800697e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006982:	68f8      	ldr	r0, [r7, #12]
 8006984:	f000 f960 	bl	8006c48 <I2C_WaitOnFlagUntilTimeout>
 8006988:	4603      	mov	r3, r0
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00d      	beq.n	80069aa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006998:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800699c:	d103      	bne.n	80069a6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80069a6:	2303      	movs	r3, #3
 80069a8:	e05f      	b.n	8006a6a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80069aa:	897b      	ldrh	r3, [r7, #10]
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	461a      	mov	r2, r3
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80069b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80069ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069bc:	6a3a      	ldr	r2, [r7, #32]
 80069be:	492d      	ldr	r1, [pc, #180]	; (8006a74 <I2C_RequestMemoryWrite+0x128>)
 80069c0:	68f8      	ldr	r0, [r7, #12]
 80069c2:	f000 f998 	bl	8006cf6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d001      	beq.n	80069d0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	e04c      	b.n	8006a6a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069d0:	2300      	movs	r3, #0
 80069d2:	617b      	str	r3, [r7, #20]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	695b      	ldr	r3, [r3, #20]
 80069da:	617b      	str	r3, [r7, #20]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	699b      	ldr	r3, [r3, #24]
 80069e2:	617b      	str	r3, [r7, #20]
 80069e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069e8:	6a39      	ldr	r1, [r7, #32]
 80069ea:	68f8      	ldr	r0, [r7, #12]
 80069ec:	f000 fa02 	bl	8006df4 <I2C_WaitOnTXEFlagUntilTimeout>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d00d      	beq.n	8006a12 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fa:	2b04      	cmp	r3, #4
 80069fc:	d107      	bne.n	8006a0e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a0c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e02b      	b.n	8006a6a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006a12:	88fb      	ldrh	r3, [r7, #6]
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d105      	bne.n	8006a24 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a18:	893b      	ldrh	r3, [r7, #8]
 8006a1a:	b2da      	uxtb	r2, r3
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	611a      	str	r2, [r3, #16]
 8006a22:	e021      	b.n	8006a68 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006a24:	893b      	ldrh	r3, [r7, #8]
 8006a26:	0a1b      	lsrs	r3, r3, #8
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	b2da      	uxtb	r2, r3
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a34:	6a39      	ldr	r1, [r7, #32]
 8006a36:	68f8      	ldr	r0, [r7, #12]
 8006a38:	f000 f9dc 	bl	8006df4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00d      	beq.n	8006a5e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a46:	2b04      	cmp	r3, #4
 8006a48:	d107      	bne.n	8006a5a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a58:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e005      	b.n	8006a6a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a5e:	893b      	ldrh	r3, [r7, #8]
 8006a60:	b2da      	uxtb	r2, r3
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006a68:	2300      	movs	r3, #0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3718      	adds	r7, #24
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	00010002 	.word	0x00010002

08006a78 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b088      	sub	sp, #32
 8006a7c:	af02      	add	r7, sp, #8
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	4608      	mov	r0, r1
 8006a82:	4611      	mov	r1, r2
 8006a84:	461a      	mov	r2, r3
 8006a86:	4603      	mov	r3, r0
 8006a88:	817b      	strh	r3, [r7, #10]
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	813b      	strh	r3, [r7, #8]
 8006a8e:	4613      	mov	r3, r2
 8006a90:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006aa0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ab0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab4:	9300      	str	r3, [sp, #0]
 8006ab6:	6a3b      	ldr	r3, [r7, #32]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006abe:	68f8      	ldr	r0, [r7, #12]
 8006ac0:	f000 f8c2 	bl	8006c48 <I2C_WaitOnFlagUntilTimeout>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00d      	beq.n	8006ae6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ad4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ad8:	d103      	bne.n	8006ae2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ae0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006ae2:	2303      	movs	r3, #3
 8006ae4:	e0aa      	b.n	8006c3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006ae6:	897b      	ldrh	r3, [r7, #10]
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	461a      	mov	r2, r3
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006af4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af8:	6a3a      	ldr	r2, [r7, #32]
 8006afa:	4952      	ldr	r1, [pc, #328]	; (8006c44 <I2C_RequestMemoryRead+0x1cc>)
 8006afc:	68f8      	ldr	r0, [r7, #12]
 8006afe:	f000 f8fa 	bl	8006cf6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b02:	4603      	mov	r3, r0
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d001      	beq.n	8006b0c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e097      	b.n	8006c3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	617b      	str	r3, [r7, #20]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	695b      	ldr	r3, [r3, #20]
 8006b16:	617b      	str	r3, [r7, #20]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	699b      	ldr	r3, [r3, #24]
 8006b1e:	617b      	str	r3, [r7, #20]
 8006b20:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b24:	6a39      	ldr	r1, [r7, #32]
 8006b26:	68f8      	ldr	r0, [r7, #12]
 8006b28:	f000 f964 	bl	8006df4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d00d      	beq.n	8006b4e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b36:	2b04      	cmp	r3, #4
 8006b38:	d107      	bne.n	8006b4a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b48:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e076      	b.n	8006c3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b4e:	88fb      	ldrh	r3, [r7, #6]
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d105      	bne.n	8006b60 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b54:	893b      	ldrh	r3, [r7, #8]
 8006b56:	b2da      	uxtb	r2, r3
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	611a      	str	r2, [r3, #16]
 8006b5e:	e021      	b.n	8006ba4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006b60:	893b      	ldrh	r3, [r7, #8]
 8006b62:	0a1b      	lsrs	r3, r3, #8
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	b2da      	uxtb	r2, r3
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b70:	6a39      	ldr	r1, [r7, #32]
 8006b72:	68f8      	ldr	r0, [r7, #12]
 8006b74:	f000 f93e 	bl	8006df4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00d      	beq.n	8006b9a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b82:	2b04      	cmp	r3, #4
 8006b84:	d107      	bne.n	8006b96 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b94:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e050      	b.n	8006c3c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b9a:	893b      	ldrh	r3, [r7, #8]
 8006b9c:	b2da      	uxtb	r2, r3
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ba6:	6a39      	ldr	r1, [r7, #32]
 8006ba8:	68f8      	ldr	r0, [r7, #12]
 8006baa:	f000 f923 	bl	8006df4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d00d      	beq.n	8006bd0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb8:	2b04      	cmp	r3, #4
 8006bba:	d107      	bne.n	8006bcc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bca:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	e035      	b.n	8006c3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bde:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be2:	9300      	str	r3, [sp, #0]
 8006be4:	6a3b      	ldr	r3, [r7, #32]
 8006be6:	2200      	movs	r2, #0
 8006be8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006bec:	68f8      	ldr	r0, [r7, #12]
 8006bee:	f000 f82b 	bl	8006c48 <I2C_WaitOnFlagUntilTimeout>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d00d      	beq.n	8006c14 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c06:	d103      	bne.n	8006c10 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c0e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006c10:	2303      	movs	r3, #3
 8006c12:	e013      	b.n	8006c3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006c14:	897b      	ldrh	r3, [r7, #10]
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	f043 0301 	orr.w	r3, r3, #1
 8006c1c:	b2da      	uxtb	r2, r3
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c26:	6a3a      	ldr	r2, [r7, #32]
 8006c28:	4906      	ldr	r1, [pc, #24]	; (8006c44 <I2C_RequestMemoryRead+0x1cc>)
 8006c2a:	68f8      	ldr	r0, [r7, #12]
 8006c2c:	f000 f863 	bl	8006cf6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c30:	4603      	mov	r3, r0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d001      	beq.n	8006c3a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	e000      	b.n	8006c3c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006c3a:	2300      	movs	r3, #0
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3718      	adds	r7, #24
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	00010002 	.word	0x00010002

08006c48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	603b      	str	r3, [r7, #0]
 8006c54:	4613      	mov	r3, r2
 8006c56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c58:	e025      	b.n	8006ca6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c60:	d021      	beq.n	8006ca6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c62:	f7fd f8f9 	bl	8003e58 <HAL_GetTick>
 8006c66:	4602      	mov	r2, r0
 8006c68:	69bb      	ldr	r3, [r7, #24]
 8006c6a:	1ad3      	subs	r3, r2, r3
 8006c6c:	683a      	ldr	r2, [r7, #0]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d302      	bcc.n	8006c78 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d116      	bne.n	8006ca6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2220      	movs	r2, #32
 8006c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c92:	f043 0220 	orr.w	r2, r3, #32
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e023      	b.n	8006cee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	0c1b      	lsrs	r3, r3, #16
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d10d      	bne.n	8006ccc <I2C_WaitOnFlagUntilTimeout+0x84>
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	695b      	ldr	r3, [r3, #20]
 8006cb6:	43da      	mvns	r2, r3
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	4013      	ands	r3, r2
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	bf0c      	ite	eq
 8006cc2:	2301      	moveq	r3, #1
 8006cc4:	2300      	movne	r3, #0
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	461a      	mov	r2, r3
 8006cca:	e00c      	b.n	8006ce6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	699b      	ldr	r3, [r3, #24]
 8006cd2:	43da      	mvns	r2, r3
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	bf0c      	ite	eq
 8006cde:	2301      	moveq	r3, #1
 8006ce0:	2300      	movne	r3, #0
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	79fb      	ldrb	r3, [r7, #7]
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d0b6      	beq.n	8006c5a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006cec:	2300      	movs	r3, #0
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3710      	adds	r7, #16
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}

08006cf6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006cf6:	b580      	push	{r7, lr}
 8006cf8:	b084      	sub	sp, #16
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	60f8      	str	r0, [r7, #12]
 8006cfe:	60b9      	str	r1, [r7, #8]
 8006d00:	607a      	str	r2, [r7, #4]
 8006d02:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006d04:	e051      	b.n	8006daa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	695b      	ldr	r3, [r3, #20]
 8006d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d14:	d123      	bne.n	8006d5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d24:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006d2e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2200      	movs	r2, #0
 8006d34:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2220      	movs	r2, #32
 8006d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2200      	movs	r2, #0
 8006d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4a:	f043 0204 	orr.w	r2, r3, #4
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2200      	movs	r2, #0
 8006d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e046      	b.n	8006dec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d64:	d021      	beq.n	8006daa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d66:	f7fd f877 	bl	8003e58 <HAL_GetTick>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d302      	bcc.n	8006d7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d116      	bne.n	8006daa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2220      	movs	r2, #32
 8006d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d96:	f043 0220 	orr.w	r2, r3, #32
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	e020      	b.n	8006dec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	0c1b      	lsrs	r3, r3, #16
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d10c      	bne.n	8006dce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	695b      	ldr	r3, [r3, #20]
 8006dba:	43da      	mvns	r2, r3
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	4013      	ands	r3, r2
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	bf14      	ite	ne
 8006dc6:	2301      	movne	r3, #1
 8006dc8:	2300      	moveq	r3, #0
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	e00b      	b.n	8006de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	699b      	ldr	r3, [r3, #24]
 8006dd4:	43da      	mvns	r2, r3
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	4013      	ands	r3, r2
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	bf14      	ite	ne
 8006de0:	2301      	movne	r3, #1
 8006de2:	2300      	moveq	r3, #0
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d18d      	bne.n	8006d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006dea:	2300      	movs	r3, #0
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3710      	adds	r7, #16
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	60f8      	str	r0, [r7, #12]
 8006dfc:	60b9      	str	r1, [r7, #8]
 8006dfe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006e00:	e02d      	b.n	8006e5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006e02:	68f8      	ldr	r0, [r7, #12]
 8006e04:	f000 f8ce 	bl	8006fa4 <I2C_IsAcknowledgeFailed>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d001      	beq.n	8006e12 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e02d      	b.n	8006e6e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e18:	d021      	beq.n	8006e5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e1a:	f7fd f81d 	bl	8003e58 <HAL_GetTick>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	1ad3      	subs	r3, r2, r3
 8006e24:	68ba      	ldr	r2, [r7, #8]
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d302      	bcc.n	8006e30 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d116      	bne.n	8006e5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2200      	movs	r2, #0
 8006e34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2220      	movs	r2, #32
 8006e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e4a:	f043 0220 	orr.w	r2, r3, #32
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2200      	movs	r2, #0
 8006e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e007      	b.n	8006e6e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	695b      	ldr	r3, [r3, #20]
 8006e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e68:	2b80      	cmp	r3, #128	; 0x80
 8006e6a:	d1ca      	bne.n	8006e02 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3710      	adds	r7, #16
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}

08006e76 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e76:	b580      	push	{r7, lr}
 8006e78:	b084      	sub	sp, #16
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	60f8      	str	r0, [r7, #12]
 8006e7e:	60b9      	str	r1, [r7, #8]
 8006e80:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006e82:	e02d      	b.n	8006ee0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006e84:	68f8      	ldr	r0, [r7, #12]
 8006e86:	f000 f88d 	bl	8006fa4 <I2C_IsAcknowledgeFailed>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d001      	beq.n	8006e94 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006e90:	2301      	movs	r3, #1
 8006e92:	e02d      	b.n	8006ef0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e9a:	d021      	beq.n	8006ee0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e9c:	f7fc ffdc 	bl	8003e58 <HAL_GetTick>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	1ad3      	subs	r3, r2, r3
 8006ea6:	68ba      	ldr	r2, [r7, #8]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d302      	bcc.n	8006eb2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d116      	bne.n	8006ee0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2220      	movs	r2, #32
 8006ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ecc:	f043 0220 	orr.w	r2, r3, #32
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	e007      	b.n	8006ef0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	695b      	ldr	r3, [r3, #20]
 8006ee6:	f003 0304 	and.w	r3, r3, #4
 8006eea:	2b04      	cmp	r3, #4
 8006eec:	d1ca      	bne.n	8006e84 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006eee:	2300      	movs	r3, #0
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3710      	adds	r7, #16
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b084      	sub	sp, #16
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	60b9      	str	r1, [r7, #8]
 8006f02:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006f04:	e042      	b.n	8006f8c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	695b      	ldr	r3, [r3, #20]
 8006f0c:	f003 0310 	and.w	r3, r3, #16
 8006f10:	2b10      	cmp	r3, #16
 8006f12:	d119      	bne.n	8006f48 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f06f 0210 	mvn.w	r2, #16
 8006f1c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2200      	movs	r2, #0
 8006f22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2220      	movs	r2, #32
 8006f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006f44:	2301      	movs	r3, #1
 8006f46:	e029      	b.n	8006f9c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f48:	f7fc ff86 	bl	8003e58 <HAL_GetTick>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	1ad3      	subs	r3, r2, r3
 8006f52:	68ba      	ldr	r2, [r7, #8]
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d302      	bcc.n	8006f5e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d116      	bne.n	8006f8c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2200      	movs	r2, #0
 8006f62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2220      	movs	r2, #32
 8006f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f78:	f043 0220 	orr.w	r2, r3, #32
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e007      	b.n	8006f9c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	695b      	ldr	r3, [r3, #20]
 8006f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f96:	2b40      	cmp	r3, #64	; 0x40
 8006f98:	d1b5      	bne.n	8006f06 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3710      	adds	r7, #16
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	695b      	ldr	r3, [r3, #20]
 8006fb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fba:	d11b      	bne.n	8006ff4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006fc4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2220      	movs	r2, #32
 8006fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe0:	f043 0204 	orr.w	r2, r3, #4
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e000      	b.n	8006ff6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006ff4:	2300      	movs	r3, #0
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	370c      	adds	r7, #12
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr
	...

08007004 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b086      	sub	sp, #24
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d101      	bne.n	8007016 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	e267      	b.n	80074e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f003 0301 	and.w	r3, r3, #1
 800701e:	2b00      	cmp	r3, #0
 8007020:	d075      	beq.n	800710e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007022:	4b88      	ldr	r3, [pc, #544]	; (8007244 <HAL_RCC_OscConfig+0x240>)
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	f003 030c 	and.w	r3, r3, #12
 800702a:	2b04      	cmp	r3, #4
 800702c:	d00c      	beq.n	8007048 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800702e:	4b85      	ldr	r3, [pc, #532]	; (8007244 <HAL_RCC_OscConfig+0x240>)
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007036:	2b08      	cmp	r3, #8
 8007038:	d112      	bne.n	8007060 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800703a:	4b82      	ldr	r3, [pc, #520]	; (8007244 <HAL_RCC_OscConfig+0x240>)
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007042:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007046:	d10b      	bne.n	8007060 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007048:	4b7e      	ldr	r3, [pc, #504]	; (8007244 <HAL_RCC_OscConfig+0x240>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007050:	2b00      	cmp	r3, #0
 8007052:	d05b      	beq.n	800710c <HAL_RCC_OscConfig+0x108>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d157      	bne.n	800710c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800705c:	2301      	movs	r3, #1
 800705e:	e242      	b.n	80074e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007068:	d106      	bne.n	8007078 <HAL_RCC_OscConfig+0x74>
 800706a:	4b76      	ldr	r3, [pc, #472]	; (8007244 <HAL_RCC_OscConfig+0x240>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a75      	ldr	r2, [pc, #468]	; (8007244 <HAL_RCC_OscConfig+0x240>)
 8007070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007074:	6013      	str	r3, [r2, #0]
 8007076:	e01d      	b.n	80070b4 <HAL_RCC_OscConfig+0xb0>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007080:	d10c      	bne.n	800709c <HAL_RCC_OscConfig+0x98>
 8007082:	4b70      	ldr	r3, [pc, #448]	; (8007244 <HAL_RCC_OscConfig+0x240>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a6f      	ldr	r2, [pc, #444]	; (8007244 <HAL_RCC_OscConfig+0x240>)
 8007088:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800708c:	6013      	str	r3, [r2, #0]
 800708e:	4b6d      	ldr	r3, [pc, #436]	; (8007244 <HAL_RCC_OscConfig+0x240>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a6c      	ldr	r2, [pc, #432]	; (8007244 <HAL_RCC_OscConfig+0x240>)
 8007094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007098:	6013      	str	r3, [r2, #0]
 800709a:	e00b      	b.n	80070b4 <HAL_RCC_OscConfig+0xb0>
 800709c:	4b69      	ldr	r3, [pc, #420]	; (8007244 <HAL_RCC_OscConfig+0x240>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a68      	ldr	r2, [pc, #416]	; (8007244 <HAL_RCC_OscConfig+0x240>)
 80070a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070a6:	6013      	str	r3, [r2, #0]
 80070a8:	4b66      	ldr	r3, [pc, #408]	; (8007244 <HAL_RCC_OscConfig+0x240>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a65      	ldr	r2, [pc, #404]	; (8007244 <HAL_RCC_OscConfig+0x240>)
 80070ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d013      	beq.n	80070e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070bc:	f7fc fecc 	bl	8003e58 <HAL_GetTick>
 80070c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070c2:	e008      	b.n	80070d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80070c4:	f7fc fec8 	bl	8003e58 <HAL_GetTick>
 80070c8:	4602      	mov	r2, r0
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	1ad3      	subs	r3, r2, r3
 80070ce:	2b64      	cmp	r3, #100	; 0x64
 80070d0:	d901      	bls.n	80070d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80070d2:	2303      	movs	r3, #3
 80070d4:	e207      	b.n	80074e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070d6:	4b5b      	ldr	r3, [pc, #364]	; (8007244 <HAL_RCC_OscConfig+0x240>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d0f0      	beq.n	80070c4 <HAL_RCC_OscConfig+0xc0>
 80070e2:	e014      	b.n	800710e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070e4:	f7fc feb8 	bl	8003e58 <HAL_GetTick>
 80070e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070ea:	e008      	b.n	80070fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80070ec:	f7fc feb4 	bl	8003e58 <HAL_GetTick>
 80070f0:	4602      	mov	r2, r0
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	1ad3      	subs	r3, r2, r3
 80070f6:	2b64      	cmp	r3, #100	; 0x64
 80070f8:	d901      	bls.n	80070fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80070fa:	2303      	movs	r3, #3
 80070fc:	e1f3      	b.n	80074e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070fe:	4b51      	ldr	r3, [pc, #324]	; (8007244 <HAL_RCC_OscConfig+0x240>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007106:	2b00      	cmp	r3, #0
 8007108:	d1f0      	bne.n	80070ec <HAL_RCC_OscConfig+0xe8>
 800710a:	e000      	b.n	800710e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800710c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f003 0302 	and.w	r3, r3, #2
 8007116:	2b00      	cmp	r3, #0
 8007118:	d063      	beq.n	80071e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800711a:	4b4a      	ldr	r3, [pc, #296]	; (8007244 <HAL_RCC_OscConfig+0x240>)
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	f003 030c 	and.w	r3, r3, #12
 8007122:	2b00      	cmp	r3, #0
 8007124:	d00b      	beq.n	800713e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007126:	4b47      	ldr	r3, [pc, #284]	; (8007244 <HAL_RCC_OscConfig+0x240>)
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800712e:	2b08      	cmp	r3, #8
 8007130:	d11c      	bne.n	800716c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007132:	4b44      	ldr	r3, [pc, #272]	; (8007244 <HAL_RCC_OscConfig+0x240>)
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800713a:	2b00      	cmp	r3, #0
 800713c:	d116      	bne.n	800716c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800713e:	4b41      	ldr	r3, [pc, #260]	; (8007244 <HAL_RCC_OscConfig+0x240>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f003 0302 	and.w	r3, r3, #2
 8007146:	2b00      	cmp	r3, #0
 8007148:	d005      	beq.n	8007156 <HAL_RCC_OscConfig+0x152>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	2b01      	cmp	r3, #1
 8007150:	d001      	beq.n	8007156 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	e1c7      	b.n	80074e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007156:	4b3b      	ldr	r3, [pc, #236]	; (8007244 <HAL_RCC_OscConfig+0x240>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	691b      	ldr	r3, [r3, #16]
 8007162:	00db      	lsls	r3, r3, #3
 8007164:	4937      	ldr	r1, [pc, #220]	; (8007244 <HAL_RCC_OscConfig+0x240>)
 8007166:	4313      	orrs	r3, r2
 8007168:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800716a:	e03a      	b.n	80071e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d020      	beq.n	80071b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007174:	4b34      	ldr	r3, [pc, #208]	; (8007248 <HAL_RCC_OscConfig+0x244>)
 8007176:	2201      	movs	r2, #1
 8007178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800717a:	f7fc fe6d 	bl	8003e58 <HAL_GetTick>
 800717e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007180:	e008      	b.n	8007194 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007182:	f7fc fe69 	bl	8003e58 <HAL_GetTick>
 8007186:	4602      	mov	r2, r0
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	1ad3      	subs	r3, r2, r3
 800718c:	2b02      	cmp	r3, #2
 800718e:	d901      	bls.n	8007194 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007190:	2303      	movs	r3, #3
 8007192:	e1a8      	b.n	80074e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007194:	4b2b      	ldr	r3, [pc, #172]	; (8007244 <HAL_RCC_OscConfig+0x240>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f003 0302 	and.w	r3, r3, #2
 800719c:	2b00      	cmp	r3, #0
 800719e:	d0f0      	beq.n	8007182 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071a0:	4b28      	ldr	r3, [pc, #160]	; (8007244 <HAL_RCC_OscConfig+0x240>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	691b      	ldr	r3, [r3, #16]
 80071ac:	00db      	lsls	r3, r3, #3
 80071ae:	4925      	ldr	r1, [pc, #148]	; (8007244 <HAL_RCC_OscConfig+0x240>)
 80071b0:	4313      	orrs	r3, r2
 80071b2:	600b      	str	r3, [r1, #0]
 80071b4:	e015      	b.n	80071e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80071b6:	4b24      	ldr	r3, [pc, #144]	; (8007248 <HAL_RCC_OscConfig+0x244>)
 80071b8:	2200      	movs	r2, #0
 80071ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071bc:	f7fc fe4c 	bl	8003e58 <HAL_GetTick>
 80071c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071c2:	e008      	b.n	80071d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80071c4:	f7fc fe48 	bl	8003e58 <HAL_GetTick>
 80071c8:	4602      	mov	r2, r0
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	1ad3      	subs	r3, r2, r3
 80071ce:	2b02      	cmp	r3, #2
 80071d0:	d901      	bls.n	80071d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80071d2:	2303      	movs	r3, #3
 80071d4:	e187      	b.n	80074e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071d6:	4b1b      	ldr	r3, [pc, #108]	; (8007244 <HAL_RCC_OscConfig+0x240>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f003 0302 	and.w	r3, r3, #2
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d1f0      	bne.n	80071c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f003 0308 	and.w	r3, r3, #8
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d036      	beq.n	800725c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	695b      	ldr	r3, [r3, #20]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d016      	beq.n	8007224 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071f6:	4b15      	ldr	r3, [pc, #84]	; (800724c <HAL_RCC_OscConfig+0x248>)
 80071f8:	2201      	movs	r2, #1
 80071fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071fc:	f7fc fe2c 	bl	8003e58 <HAL_GetTick>
 8007200:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007202:	e008      	b.n	8007216 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007204:	f7fc fe28 	bl	8003e58 <HAL_GetTick>
 8007208:	4602      	mov	r2, r0
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	1ad3      	subs	r3, r2, r3
 800720e:	2b02      	cmp	r3, #2
 8007210:	d901      	bls.n	8007216 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007212:	2303      	movs	r3, #3
 8007214:	e167      	b.n	80074e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007216:	4b0b      	ldr	r3, [pc, #44]	; (8007244 <HAL_RCC_OscConfig+0x240>)
 8007218:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800721a:	f003 0302 	and.w	r3, r3, #2
 800721e:	2b00      	cmp	r3, #0
 8007220:	d0f0      	beq.n	8007204 <HAL_RCC_OscConfig+0x200>
 8007222:	e01b      	b.n	800725c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007224:	4b09      	ldr	r3, [pc, #36]	; (800724c <HAL_RCC_OscConfig+0x248>)
 8007226:	2200      	movs	r2, #0
 8007228:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800722a:	f7fc fe15 	bl	8003e58 <HAL_GetTick>
 800722e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007230:	e00e      	b.n	8007250 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007232:	f7fc fe11 	bl	8003e58 <HAL_GetTick>
 8007236:	4602      	mov	r2, r0
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	1ad3      	subs	r3, r2, r3
 800723c:	2b02      	cmp	r3, #2
 800723e:	d907      	bls.n	8007250 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007240:	2303      	movs	r3, #3
 8007242:	e150      	b.n	80074e6 <HAL_RCC_OscConfig+0x4e2>
 8007244:	40023800 	.word	0x40023800
 8007248:	42470000 	.word	0x42470000
 800724c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007250:	4b88      	ldr	r3, [pc, #544]	; (8007474 <HAL_RCC_OscConfig+0x470>)
 8007252:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007254:	f003 0302 	and.w	r3, r3, #2
 8007258:	2b00      	cmp	r3, #0
 800725a:	d1ea      	bne.n	8007232 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f003 0304 	and.w	r3, r3, #4
 8007264:	2b00      	cmp	r3, #0
 8007266:	f000 8097 	beq.w	8007398 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800726a:	2300      	movs	r3, #0
 800726c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800726e:	4b81      	ldr	r3, [pc, #516]	; (8007474 <HAL_RCC_OscConfig+0x470>)
 8007270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007276:	2b00      	cmp	r3, #0
 8007278:	d10f      	bne.n	800729a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800727a:	2300      	movs	r3, #0
 800727c:	60bb      	str	r3, [r7, #8]
 800727e:	4b7d      	ldr	r3, [pc, #500]	; (8007474 <HAL_RCC_OscConfig+0x470>)
 8007280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007282:	4a7c      	ldr	r2, [pc, #496]	; (8007474 <HAL_RCC_OscConfig+0x470>)
 8007284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007288:	6413      	str	r3, [r2, #64]	; 0x40
 800728a:	4b7a      	ldr	r3, [pc, #488]	; (8007474 <HAL_RCC_OscConfig+0x470>)
 800728c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800728e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007292:	60bb      	str	r3, [r7, #8]
 8007294:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007296:	2301      	movs	r3, #1
 8007298:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800729a:	4b77      	ldr	r3, [pc, #476]	; (8007478 <HAL_RCC_OscConfig+0x474>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d118      	bne.n	80072d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80072a6:	4b74      	ldr	r3, [pc, #464]	; (8007478 <HAL_RCC_OscConfig+0x474>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a73      	ldr	r2, [pc, #460]	; (8007478 <HAL_RCC_OscConfig+0x474>)
 80072ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80072b2:	f7fc fdd1 	bl	8003e58 <HAL_GetTick>
 80072b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072b8:	e008      	b.n	80072cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072ba:	f7fc fdcd 	bl	8003e58 <HAL_GetTick>
 80072be:	4602      	mov	r2, r0
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	1ad3      	subs	r3, r2, r3
 80072c4:	2b02      	cmp	r3, #2
 80072c6:	d901      	bls.n	80072cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80072c8:	2303      	movs	r3, #3
 80072ca:	e10c      	b.n	80074e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072cc:	4b6a      	ldr	r3, [pc, #424]	; (8007478 <HAL_RCC_OscConfig+0x474>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d0f0      	beq.n	80072ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d106      	bne.n	80072ee <HAL_RCC_OscConfig+0x2ea>
 80072e0:	4b64      	ldr	r3, [pc, #400]	; (8007474 <HAL_RCC_OscConfig+0x470>)
 80072e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072e4:	4a63      	ldr	r2, [pc, #396]	; (8007474 <HAL_RCC_OscConfig+0x470>)
 80072e6:	f043 0301 	orr.w	r3, r3, #1
 80072ea:	6713      	str	r3, [r2, #112]	; 0x70
 80072ec:	e01c      	b.n	8007328 <HAL_RCC_OscConfig+0x324>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	2b05      	cmp	r3, #5
 80072f4:	d10c      	bne.n	8007310 <HAL_RCC_OscConfig+0x30c>
 80072f6:	4b5f      	ldr	r3, [pc, #380]	; (8007474 <HAL_RCC_OscConfig+0x470>)
 80072f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072fa:	4a5e      	ldr	r2, [pc, #376]	; (8007474 <HAL_RCC_OscConfig+0x470>)
 80072fc:	f043 0304 	orr.w	r3, r3, #4
 8007300:	6713      	str	r3, [r2, #112]	; 0x70
 8007302:	4b5c      	ldr	r3, [pc, #368]	; (8007474 <HAL_RCC_OscConfig+0x470>)
 8007304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007306:	4a5b      	ldr	r2, [pc, #364]	; (8007474 <HAL_RCC_OscConfig+0x470>)
 8007308:	f043 0301 	orr.w	r3, r3, #1
 800730c:	6713      	str	r3, [r2, #112]	; 0x70
 800730e:	e00b      	b.n	8007328 <HAL_RCC_OscConfig+0x324>
 8007310:	4b58      	ldr	r3, [pc, #352]	; (8007474 <HAL_RCC_OscConfig+0x470>)
 8007312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007314:	4a57      	ldr	r2, [pc, #348]	; (8007474 <HAL_RCC_OscConfig+0x470>)
 8007316:	f023 0301 	bic.w	r3, r3, #1
 800731a:	6713      	str	r3, [r2, #112]	; 0x70
 800731c:	4b55      	ldr	r3, [pc, #340]	; (8007474 <HAL_RCC_OscConfig+0x470>)
 800731e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007320:	4a54      	ldr	r2, [pc, #336]	; (8007474 <HAL_RCC_OscConfig+0x470>)
 8007322:	f023 0304 	bic.w	r3, r3, #4
 8007326:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d015      	beq.n	800735c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007330:	f7fc fd92 	bl	8003e58 <HAL_GetTick>
 8007334:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007336:	e00a      	b.n	800734e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007338:	f7fc fd8e 	bl	8003e58 <HAL_GetTick>
 800733c:	4602      	mov	r2, r0
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	1ad3      	subs	r3, r2, r3
 8007342:	f241 3288 	movw	r2, #5000	; 0x1388
 8007346:	4293      	cmp	r3, r2
 8007348:	d901      	bls.n	800734e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800734a:	2303      	movs	r3, #3
 800734c:	e0cb      	b.n	80074e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800734e:	4b49      	ldr	r3, [pc, #292]	; (8007474 <HAL_RCC_OscConfig+0x470>)
 8007350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007352:	f003 0302 	and.w	r3, r3, #2
 8007356:	2b00      	cmp	r3, #0
 8007358:	d0ee      	beq.n	8007338 <HAL_RCC_OscConfig+0x334>
 800735a:	e014      	b.n	8007386 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800735c:	f7fc fd7c 	bl	8003e58 <HAL_GetTick>
 8007360:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007362:	e00a      	b.n	800737a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007364:	f7fc fd78 	bl	8003e58 <HAL_GetTick>
 8007368:	4602      	mov	r2, r0
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	1ad3      	subs	r3, r2, r3
 800736e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007372:	4293      	cmp	r3, r2
 8007374:	d901      	bls.n	800737a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007376:	2303      	movs	r3, #3
 8007378:	e0b5      	b.n	80074e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800737a:	4b3e      	ldr	r3, [pc, #248]	; (8007474 <HAL_RCC_OscConfig+0x470>)
 800737c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800737e:	f003 0302 	and.w	r3, r3, #2
 8007382:	2b00      	cmp	r3, #0
 8007384:	d1ee      	bne.n	8007364 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007386:	7dfb      	ldrb	r3, [r7, #23]
 8007388:	2b01      	cmp	r3, #1
 800738a:	d105      	bne.n	8007398 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800738c:	4b39      	ldr	r3, [pc, #228]	; (8007474 <HAL_RCC_OscConfig+0x470>)
 800738e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007390:	4a38      	ldr	r2, [pc, #224]	; (8007474 <HAL_RCC_OscConfig+0x470>)
 8007392:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007396:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	699b      	ldr	r3, [r3, #24]
 800739c:	2b00      	cmp	r3, #0
 800739e:	f000 80a1 	beq.w	80074e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80073a2:	4b34      	ldr	r3, [pc, #208]	; (8007474 <HAL_RCC_OscConfig+0x470>)
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	f003 030c 	and.w	r3, r3, #12
 80073aa:	2b08      	cmp	r3, #8
 80073ac:	d05c      	beq.n	8007468 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	699b      	ldr	r3, [r3, #24]
 80073b2:	2b02      	cmp	r3, #2
 80073b4:	d141      	bne.n	800743a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073b6:	4b31      	ldr	r3, [pc, #196]	; (800747c <HAL_RCC_OscConfig+0x478>)
 80073b8:	2200      	movs	r2, #0
 80073ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073bc:	f7fc fd4c 	bl	8003e58 <HAL_GetTick>
 80073c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073c2:	e008      	b.n	80073d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80073c4:	f7fc fd48 	bl	8003e58 <HAL_GetTick>
 80073c8:	4602      	mov	r2, r0
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	1ad3      	subs	r3, r2, r3
 80073ce:	2b02      	cmp	r3, #2
 80073d0:	d901      	bls.n	80073d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80073d2:	2303      	movs	r3, #3
 80073d4:	e087      	b.n	80074e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073d6:	4b27      	ldr	r3, [pc, #156]	; (8007474 <HAL_RCC_OscConfig+0x470>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d1f0      	bne.n	80073c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	69da      	ldr	r2, [r3, #28]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6a1b      	ldr	r3, [r3, #32]
 80073ea:	431a      	orrs	r2, r3
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f0:	019b      	lsls	r3, r3, #6
 80073f2:	431a      	orrs	r2, r3
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f8:	085b      	lsrs	r3, r3, #1
 80073fa:	3b01      	subs	r3, #1
 80073fc:	041b      	lsls	r3, r3, #16
 80073fe:	431a      	orrs	r2, r3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007404:	061b      	lsls	r3, r3, #24
 8007406:	491b      	ldr	r1, [pc, #108]	; (8007474 <HAL_RCC_OscConfig+0x470>)
 8007408:	4313      	orrs	r3, r2
 800740a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800740c:	4b1b      	ldr	r3, [pc, #108]	; (800747c <HAL_RCC_OscConfig+0x478>)
 800740e:	2201      	movs	r2, #1
 8007410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007412:	f7fc fd21 	bl	8003e58 <HAL_GetTick>
 8007416:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007418:	e008      	b.n	800742c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800741a:	f7fc fd1d 	bl	8003e58 <HAL_GetTick>
 800741e:	4602      	mov	r2, r0
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	1ad3      	subs	r3, r2, r3
 8007424:	2b02      	cmp	r3, #2
 8007426:	d901      	bls.n	800742c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007428:	2303      	movs	r3, #3
 800742a:	e05c      	b.n	80074e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800742c:	4b11      	ldr	r3, [pc, #68]	; (8007474 <HAL_RCC_OscConfig+0x470>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007434:	2b00      	cmp	r3, #0
 8007436:	d0f0      	beq.n	800741a <HAL_RCC_OscConfig+0x416>
 8007438:	e054      	b.n	80074e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800743a:	4b10      	ldr	r3, [pc, #64]	; (800747c <HAL_RCC_OscConfig+0x478>)
 800743c:	2200      	movs	r2, #0
 800743e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007440:	f7fc fd0a 	bl	8003e58 <HAL_GetTick>
 8007444:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007446:	e008      	b.n	800745a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007448:	f7fc fd06 	bl	8003e58 <HAL_GetTick>
 800744c:	4602      	mov	r2, r0
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	1ad3      	subs	r3, r2, r3
 8007452:	2b02      	cmp	r3, #2
 8007454:	d901      	bls.n	800745a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007456:	2303      	movs	r3, #3
 8007458:	e045      	b.n	80074e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800745a:	4b06      	ldr	r3, [pc, #24]	; (8007474 <HAL_RCC_OscConfig+0x470>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007462:	2b00      	cmp	r3, #0
 8007464:	d1f0      	bne.n	8007448 <HAL_RCC_OscConfig+0x444>
 8007466:	e03d      	b.n	80074e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	699b      	ldr	r3, [r3, #24]
 800746c:	2b01      	cmp	r3, #1
 800746e:	d107      	bne.n	8007480 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	e038      	b.n	80074e6 <HAL_RCC_OscConfig+0x4e2>
 8007474:	40023800 	.word	0x40023800
 8007478:	40007000 	.word	0x40007000
 800747c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007480:	4b1b      	ldr	r3, [pc, #108]	; (80074f0 <HAL_RCC_OscConfig+0x4ec>)
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	699b      	ldr	r3, [r3, #24]
 800748a:	2b01      	cmp	r3, #1
 800748c:	d028      	beq.n	80074e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007498:	429a      	cmp	r2, r3
 800749a:	d121      	bne.n	80074e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d11a      	bne.n	80074e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80074aa:	68fa      	ldr	r2, [r7, #12]
 80074ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80074b0:	4013      	ands	r3, r2
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80074b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d111      	bne.n	80074e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c6:	085b      	lsrs	r3, r3, #1
 80074c8:	3b01      	subs	r3, #1
 80074ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d107      	bne.n	80074e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80074dc:	429a      	cmp	r2, r3
 80074de:	d001      	beq.n	80074e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80074e0:	2301      	movs	r3, #1
 80074e2:	e000      	b.n	80074e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3718      	adds	r7, #24
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	40023800 	.word	0x40023800

080074f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d101      	bne.n	8007508 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	e0cc      	b.n	80076a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007508:	4b68      	ldr	r3, [pc, #416]	; (80076ac <HAL_RCC_ClockConfig+0x1b8>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f003 0307 	and.w	r3, r3, #7
 8007510:	683a      	ldr	r2, [r7, #0]
 8007512:	429a      	cmp	r2, r3
 8007514:	d90c      	bls.n	8007530 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007516:	4b65      	ldr	r3, [pc, #404]	; (80076ac <HAL_RCC_ClockConfig+0x1b8>)
 8007518:	683a      	ldr	r2, [r7, #0]
 800751a:	b2d2      	uxtb	r2, r2
 800751c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800751e:	4b63      	ldr	r3, [pc, #396]	; (80076ac <HAL_RCC_ClockConfig+0x1b8>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f003 0307 	and.w	r3, r3, #7
 8007526:	683a      	ldr	r2, [r7, #0]
 8007528:	429a      	cmp	r2, r3
 800752a:	d001      	beq.n	8007530 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	e0b8      	b.n	80076a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f003 0302 	and.w	r3, r3, #2
 8007538:	2b00      	cmp	r3, #0
 800753a:	d020      	beq.n	800757e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f003 0304 	and.w	r3, r3, #4
 8007544:	2b00      	cmp	r3, #0
 8007546:	d005      	beq.n	8007554 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007548:	4b59      	ldr	r3, [pc, #356]	; (80076b0 <HAL_RCC_ClockConfig+0x1bc>)
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	4a58      	ldr	r2, [pc, #352]	; (80076b0 <HAL_RCC_ClockConfig+0x1bc>)
 800754e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007552:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f003 0308 	and.w	r3, r3, #8
 800755c:	2b00      	cmp	r3, #0
 800755e:	d005      	beq.n	800756c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007560:	4b53      	ldr	r3, [pc, #332]	; (80076b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	4a52      	ldr	r2, [pc, #328]	; (80076b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007566:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800756a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800756c:	4b50      	ldr	r3, [pc, #320]	; (80076b0 <HAL_RCC_ClockConfig+0x1bc>)
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	494d      	ldr	r1, [pc, #308]	; (80076b0 <HAL_RCC_ClockConfig+0x1bc>)
 800757a:	4313      	orrs	r3, r2
 800757c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f003 0301 	and.w	r3, r3, #1
 8007586:	2b00      	cmp	r3, #0
 8007588:	d044      	beq.n	8007614 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	2b01      	cmp	r3, #1
 8007590:	d107      	bne.n	80075a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007592:	4b47      	ldr	r3, [pc, #284]	; (80076b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800759a:	2b00      	cmp	r3, #0
 800759c:	d119      	bne.n	80075d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800759e:	2301      	movs	r3, #1
 80075a0:	e07f      	b.n	80076a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	2b02      	cmp	r3, #2
 80075a8:	d003      	beq.n	80075b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80075ae:	2b03      	cmp	r3, #3
 80075b0:	d107      	bne.n	80075c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075b2:	4b3f      	ldr	r3, [pc, #252]	; (80076b0 <HAL_RCC_ClockConfig+0x1bc>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d109      	bne.n	80075d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	e06f      	b.n	80076a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075c2:	4b3b      	ldr	r3, [pc, #236]	; (80076b0 <HAL_RCC_ClockConfig+0x1bc>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f003 0302 	and.w	r3, r3, #2
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d101      	bne.n	80075d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	e067      	b.n	80076a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80075d2:	4b37      	ldr	r3, [pc, #220]	; (80076b0 <HAL_RCC_ClockConfig+0x1bc>)
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	f023 0203 	bic.w	r2, r3, #3
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	4934      	ldr	r1, [pc, #208]	; (80076b0 <HAL_RCC_ClockConfig+0x1bc>)
 80075e0:	4313      	orrs	r3, r2
 80075e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80075e4:	f7fc fc38 	bl	8003e58 <HAL_GetTick>
 80075e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075ea:	e00a      	b.n	8007602 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075ec:	f7fc fc34 	bl	8003e58 <HAL_GetTick>
 80075f0:	4602      	mov	r2, r0
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	1ad3      	subs	r3, r2, r3
 80075f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d901      	bls.n	8007602 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80075fe:	2303      	movs	r3, #3
 8007600:	e04f      	b.n	80076a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007602:	4b2b      	ldr	r3, [pc, #172]	; (80076b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	f003 020c 	and.w	r2, r3, #12
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	429a      	cmp	r2, r3
 8007612:	d1eb      	bne.n	80075ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007614:	4b25      	ldr	r3, [pc, #148]	; (80076ac <HAL_RCC_ClockConfig+0x1b8>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f003 0307 	and.w	r3, r3, #7
 800761c:	683a      	ldr	r2, [r7, #0]
 800761e:	429a      	cmp	r2, r3
 8007620:	d20c      	bcs.n	800763c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007622:	4b22      	ldr	r3, [pc, #136]	; (80076ac <HAL_RCC_ClockConfig+0x1b8>)
 8007624:	683a      	ldr	r2, [r7, #0]
 8007626:	b2d2      	uxtb	r2, r2
 8007628:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800762a:	4b20      	ldr	r3, [pc, #128]	; (80076ac <HAL_RCC_ClockConfig+0x1b8>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f003 0307 	and.w	r3, r3, #7
 8007632:	683a      	ldr	r2, [r7, #0]
 8007634:	429a      	cmp	r2, r3
 8007636:	d001      	beq.n	800763c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007638:	2301      	movs	r3, #1
 800763a:	e032      	b.n	80076a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 0304 	and.w	r3, r3, #4
 8007644:	2b00      	cmp	r3, #0
 8007646:	d008      	beq.n	800765a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007648:	4b19      	ldr	r3, [pc, #100]	; (80076b0 <HAL_RCC_ClockConfig+0x1bc>)
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	4916      	ldr	r1, [pc, #88]	; (80076b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007656:	4313      	orrs	r3, r2
 8007658:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f003 0308 	and.w	r3, r3, #8
 8007662:	2b00      	cmp	r3, #0
 8007664:	d009      	beq.n	800767a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007666:	4b12      	ldr	r3, [pc, #72]	; (80076b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	691b      	ldr	r3, [r3, #16]
 8007672:	00db      	lsls	r3, r3, #3
 8007674:	490e      	ldr	r1, [pc, #56]	; (80076b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007676:	4313      	orrs	r3, r2
 8007678:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800767a:	f000 f821 	bl	80076c0 <HAL_RCC_GetSysClockFreq>
 800767e:	4602      	mov	r2, r0
 8007680:	4b0b      	ldr	r3, [pc, #44]	; (80076b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	091b      	lsrs	r3, r3, #4
 8007686:	f003 030f 	and.w	r3, r3, #15
 800768a:	490a      	ldr	r1, [pc, #40]	; (80076b4 <HAL_RCC_ClockConfig+0x1c0>)
 800768c:	5ccb      	ldrb	r3, [r1, r3]
 800768e:	fa22 f303 	lsr.w	r3, r2, r3
 8007692:	4a09      	ldr	r2, [pc, #36]	; (80076b8 <HAL_RCC_ClockConfig+0x1c4>)
 8007694:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007696:	4b09      	ldr	r3, [pc, #36]	; (80076bc <HAL_RCC_ClockConfig+0x1c8>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4618      	mov	r0, r3
 800769c:	f7fc fb98 	bl	8003dd0 <HAL_InitTick>

  return HAL_OK;
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3710      	adds	r7, #16
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
 80076aa:	bf00      	nop
 80076ac:	40023c00 	.word	0x40023c00
 80076b0:	40023800 	.word	0x40023800
 80076b4:	0800eb9c 	.word	0x0800eb9c
 80076b8:	2000000c 	.word	0x2000000c
 80076bc:	20000014 	.word	0x20000014

080076c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80076c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076c4:	b094      	sub	sp, #80	; 0x50
 80076c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80076c8:	2300      	movs	r3, #0
 80076ca:	647b      	str	r3, [r7, #68]	; 0x44
 80076cc:	2300      	movs	r3, #0
 80076ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076d0:	2300      	movs	r3, #0
 80076d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80076d4:	2300      	movs	r3, #0
 80076d6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80076d8:	4b79      	ldr	r3, [pc, #484]	; (80078c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	f003 030c 	and.w	r3, r3, #12
 80076e0:	2b08      	cmp	r3, #8
 80076e2:	d00d      	beq.n	8007700 <HAL_RCC_GetSysClockFreq+0x40>
 80076e4:	2b08      	cmp	r3, #8
 80076e6:	f200 80e1 	bhi.w	80078ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d002      	beq.n	80076f4 <HAL_RCC_GetSysClockFreq+0x34>
 80076ee:	2b04      	cmp	r3, #4
 80076f0:	d003      	beq.n	80076fa <HAL_RCC_GetSysClockFreq+0x3a>
 80076f2:	e0db      	b.n	80078ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80076f4:	4b73      	ldr	r3, [pc, #460]	; (80078c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80076f6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80076f8:	e0db      	b.n	80078b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80076fa:	4b73      	ldr	r3, [pc, #460]	; (80078c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80076fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80076fe:	e0d8      	b.n	80078b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007700:	4b6f      	ldr	r3, [pc, #444]	; (80078c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007708:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800770a:	4b6d      	ldr	r3, [pc, #436]	; (80078c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007712:	2b00      	cmp	r3, #0
 8007714:	d063      	beq.n	80077de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007716:	4b6a      	ldr	r3, [pc, #424]	; (80078c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	099b      	lsrs	r3, r3, #6
 800771c:	2200      	movs	r2, #0
 800771e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007720:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007724:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007728:	633b      	str	r3, [r7, #48]	; 0x30
 800772a:	2300      	movs	r3, #0
 800772c:	637b      	str	r3, [r7, #52]	; 0x34
 800772e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007732:	4622      	mov	r2, r4
 8007734:	462b      	mov	r3, r5
 8007736:	f04f 0000 	mov.w	r0, #0
 800773a:	f04f 0100 	mov.w	r1, #0
 800773e:	0159      	lsls	r1, r3, #5
 8007740:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007744:	0150      	lsls	r0, r2, #5
 8007746:	4602      	mov	r2, r0
 8007748:	460b      	mov	r3, r1
 800774a:	4621      	mov	r1, r4
 800774c:	1a51      	subs	r1, r2, r1
 800774e:	6139      	str	r1, [r7, #16]
 8007750:	4629      	mov	r1, r5
 8007752:	eb63 0301 	sbc.w	r3, r3, r1
 8007756:	617b      	str	r3, [r7, #20]
 8007758:	f04f 0200 	mov.w	r2, #0
 800775c:	f04f 0300 	mov.w	r3, #0
 8007760:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007764:	4659      	mov	r1, fp
 8007766:	018b      	lsls	r3, r1, #6
 8007768:	4651      	mov	r1, sl
 800776a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800776e:	4651      	mov	r1, sl
 8007770:	018a      	lsls	r2, r1, #6
 8007772:	4651      	mov	r1, sl
 8007774:	ebb2 0801 	subs.w	r8, r2, r1
 8007778:	4659      	mov	r1, fp
 800777a:	eb63 0901 	sbc.w	r9, r3, r1
 800777e:	f04f 0200 	mov.w	r2, #0
 8007782:	f04f 0300 	mov.w	r3, #0
 8007786:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800778a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800778e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007792:	4690      	mov	r8, r2
 8007794:	4699      	mov	r9, r3
 8007796:	4623      	mov	r3, r4
 8007798:	eb18 0303 	adds.w	r3, r8, r3
 800779c:	60bb      	str	r3, [r7, #8]
 800779e:	462b      	mov	r3, r5
 80077a0:	eb49 0303 	adc.w	r3, r9, r3
 80077a4:	60fb      	str	r3, [r7, #12]
 80077a6:	f04f 0200 	mov.w	r2, #0
 80077aa:	f04f 0300 	mov.w	r3, #0
 80077ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80077b2:	4629      	mov	r1, r5
 80077b4:	024b      	lsls	r3, r1, #9
 80077b6:	4621      	mov	r1, r4
 80077b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80077bc:	4621      	mov	r1, r4
 80077be:	024a      	lsls	r2, r1, #9
 80077c0:	4610      	mov	r0, r2
 80077c2:	4619      	mov	r1, r3
 80077c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077c6:	2200      	movs	r2, #0
 80077c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80077ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80077cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80077d0:	f7f9 fa62 	bl	8000c98 <__aeabi_uldivmod>
 80077d4:	4602      	mov	r2, r0
 80077d6:	460b      	mov	r3, r1
 80077d8:	4613      	mov	r3, r2
 80077da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077dc:	e058      	b.n	8007890 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80077de:	4b38      	ldr	r3, [pc, #224]	; (80078c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	099b      	lsrs	r3, r3, #6
 80077e4:	2200      	movs	r2, #0
 80077e6:	4618      	mov	r0, r3
 80077e8:	4611      	mov	r1, r2
 80077ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80077ee:	623b      	str	r3, [r7, #32]
 80077f0:	2300      	movs	r3, #0
 80077f2:	627b      	str	r3, [r7, #36]	; 0x24
 80077f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80077f8:	4642      	mov	r2, r8
 80077fa:	464b      	mov	r3, r9
 80077fc:	f04f 0000 	mov.w	r0, #0
 8007800:	f04f 0100 	mov.w	r1, #0
 8007804:	0159      	lsls	r1, r3, #5
 8007806:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800780a:	0150      	lsls	r0, r2, #5
 800780c:	4602      	mov	r2, r0
 800780e:	460b      	mov	r3, r1
 8007810:	4641      	mov	r1, r8
 8007812:	ebb2 0a01 	subs.w	sl, r2, r1
 8007816:	4649      	mov	r1, r9
 8007818:	eb63 0b01 	sbc.w	fp, r3, r1
 800781c:	f04f 0200 	mov.w	r2, #0
 8007820:	f04f 0300 	mov.w	r3, #0
 8007824:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007828:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800782c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007830:	ebb2 040a 	subs.w	r4, r2, sl
 8007834:	eb63 050b 	sbc.w	r5, r3, fp
 8007838:	f04f 0200 	mov.w	r2, #0
 800783c:	f04f 0300 	mov.w	r3, #0
 8007840:	00eb      	lsls	r3, r5, #3
 8007842:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007846:	00e2      	lsls	r2, r4, #3
 8007848:	4614      	mov	r4, r2
 800784a:	461d      	mov	r5, r3
 800784c:	4643      	mov	r3, r8
 800784e:	18e3      	adds	r3, r4, r3
 8007850:	603b      	str	r3, [r7, #0]
 8007852:	464b      	mov	r3, r9
 8007854:	eb45 0303 	adc.w	r3, r5, r3
 8007858:	607b      	str	r3, [r7, #4]
 800785a:	f04f 0200 	mov.w	r2, #0
 800785e:	f04f 0300 	mov.w	r3, #0
 8007862:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007866:	4629      	mov	r1, r5
 8007868:	028b      	lsls	r3, r1, #10
 800786a:	4621      	mov	r1, r4
 800786c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007870:	4621      	mov	r1, r4
 8007872:	028a      	lsls	r2, r1, #10
 8007874:	4610      	mov	r0, r2
 8007876:	4619      	mov	r1, r3
 8007878:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800787a:	2200      	movs	r2, #0
 800787c:	61bb      	str	r3, [r7, #24]
 800787e:	61fa      	str	r2, [r7, #28]
 8007880:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007884:	f7f9 fa08 	bl	8000c98 <__aeabi_uldivmod>
 8007888:	4602      	mov	r2, r0
 800788a:	460b      	mov	r3, r1
 800788c:	4613      	mov	r3, r2
 800788e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007890:	4b0b      	ldr	r3, [pc, #44]	; (80078c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	0c1b      	lsrs	r3, r3, #16
 8007896:	f003 0303 	and.w	r3, r3, #3
 800789a:	3301      	adds	r3, #1
 800789c:	005b      	lsls	r3, r3, #1
 800789e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80078a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80078a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80078a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80078aa:	e002      	b.n	80078b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80078ac:	4b05      	ldr	r3, [pc, #20]	; (80078c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80078ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80078b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80078b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3750      	adds	r7, #80	; 0x50
 80078b8:	46bd      	mov	sp, r7
 80078ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078be:	bf00      	nop
 80078c0:	40023800 	.word	0x40023800
 80078c4:	00f42400 	.word	0x00f42400
 80078c8:	007a1200 	.word	0x007a1200

080078cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80078cc:	b480      	push	{r7}
 80078ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80078d0:	4b03      	ldr	r3, [pc, #12]	; (80078e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80078d2:	681b      	ldr	r3, [r3, #0]
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr
 80078de:	bf00      	nop
 80078e0:	2000000c 	.word	0x2000000c

080078e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80078e8:	f7ff fff0 	bl	80078cc <HAL_RCC_GetHCLKFreq>
 80078ec:	4602      	mov	r2, r0
 80078ee:	4b05      	ldr	r3, [pc, #20]	; (8007904 <HAL_RCC_GetPCLK1Freq+0x20>)
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	0a9b      	lsrs	r3, r3, #10
 80078f4:	f003 0307 	and.w	r3, r3, #7
 80078f8:	4903      	ldr	r1, [pc, #12]	; (8007908 <HAL_RCC_GetPCLK1Freq+0x24>)
 80078fa:	5ccb      	ldrb	r3, [r1, r3]
 80078fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007900:	4618      	mov	r0, r3
 8007902:	bd80      	pop	{r7, pc}
 8007904:	40023800 	.word	0x40023800
 8007908:	0800ebac 	.word	0x0800ebac

0800790c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007910:	f7ff ffdc 	bl	80078cc <HAL_RCC_GetHCLKFreq>
 8007914:	4602      	mov	r2, r0
 8007916:	4b05      	ldr	r3, [pc, #20]	; (800792c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	0b5b      	lsrs	r3, r3, #13
 800791c:	f003 0307 	and.w	r3, r3, #7
 8007920:	4903      	ldr	r1, [pc, #12]	; (8007930 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007922:	5ccb      	ldrb	r3, [r1, r3]
 8007924:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007928:	4618      	mov	r0, r3
 800792a:	bd80      	pop	{r7, pc}
 800792c:	40023800 	.word	0x40023800
 8007930:	0800ebac 	.word	0x0800ebac

08007934 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d101      	bne.n	8007946 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	e041      	b.n	80079ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800794c:	b2db      	uxtb	r3, r3
 800794e:	2b00      	cmp	r3, #0
 8007950:	d106      	bne.n	8007960 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f7fc f8d0 	bl	8003b00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2202      	movs	r2, #2
 8007964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	3304      	adds	r3, #4
 8007970:	4619      	mov	r1, r3
 8007972:	4610      	mov	r0, r2
 8007974:	f000 fd68 	bl	8008448 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2201      	movs	r2, #1
 800797c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2201      	movs	r2, #1
 8007984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2201      	movs	r2, #1
 800798c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2201      	movs	r2, #1
 8007994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2201      	movs	r2, #1
 800799c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2201      	movs	r2, #1
 80079a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2201      	movs	r2, #1
 80079b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80079c8:	2300      	movs	r3, #0
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3708      	adds	r7, #8
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}
	...

080079d4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b085      	sub	sp, #20
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d001      	beq.n	80079ec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	e03c      	b.n	8007a66 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2202      	movs	r2, #2
 80079f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a1e      	ldr	r2, [pc, #120]	; (8007a74 <HAL_TIM_Base_Start+0xa0>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d018      	beq.n	8007a30 <HAL_TIM_Base_Start+0x5c>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a06:	d013      	beq.n	8007a30 <HAL_TIM_Base_Start+0x5c>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a1a      	ldr	r2, [pc, #104]	; (8007a78 <HAL_TIM_Base_Start+0xa4>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d00e      	beq.n	8007a30 <HAL_TIM_Base_Start+0x5c>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a19      	ldr	r2, [pc, #100]	; (8007a7c <HAL_TIM_Base_Start+0xa8>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d009      	beq.n	8007a30 <HAL_TIM_Base_Start+0x5c>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a17      	ldr	r2, [pc, #92]	; (8007a80 <HAL_TIM_Base_Start+0xac>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d004      	beq.n	8007a30 <HAL_TIM_Base_Start+0x5c>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a16      	ldr	r2, [pc, #88]	; (8007a84 <HAL_TIM_Base_Start+0xb0>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d111      	bne.n	8007a54 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	689b      	ldr	r3, [r3, #8]
 8007a36:	f003 0307 	and.w	r3, r3, #7
 8007a3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2b06      	cmp	r3, #6
 8007a40:	d010      	beq.n	8007a64 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f042 0201 	orr.w	r2, r2, #1
 8007a50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a52:	e007      	b.n	8007a64 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f042 0201 	orr.w	r2, r2, #1
 8007a62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a64:	2300      	movs	r3, #0
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3714      	adds	r7, #20
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr
 8007a72:	bf00      	nop
 8007a74:	40010000 	.word	0x40010000
 8007a78:	40000400 	.word	0x40000400
 8007a7c:	40000800 	.word	0x40000800
 8007a80:	40000c00 	.word	0x40000c00
 8007a84:	40014000 	.word	0x40014000

08007a88 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	6a1a      	ldr	r2, [r3, #32]
 8007a96:	f241 1311 	movw	r3, #4369	; 0x1111
 8007a9a:	4013      	ands	r3, r2
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d10f      	bne.n	8007ac0 <HAL_TIM_Base_Stop+0x38>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	6a1a      	ldr	r2, [r3, #32]
 8007aa6:	f240 4344 	movw	r3, #1092	; 0x444
 8007aaa:	4013      	ands	r3, r2
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d107      	bne.n	8007ac0 <HAL_TIM_Base_Stop+0x38>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	681a      	ldr	r2, [r3, #0]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f022 0201 	bic.w	r2, r2, #1
 8007abe:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007ac8:	2300      	movs	r3, #0
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	370c      	adds	r7, #12
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad4:	4770      	bx	lr
	...

08007ad8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b085      	sub	sp, #20
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ae6:	b2db      	uxtb	r3, r3
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d001      	beq.n	8007af0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007aec:	2301      	movs	r3, #1
 8007aee:	e044      	b.n	8007b7a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2202      	movs	r2, #2
 8007af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	68da      	ldr	r2, [r3, #12]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f042 0201 	orr.w	r2, r2, #1
 8007b06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a1e      	ldr	r2, [pc, #120]	; (8007b88 <HAL_TIM_Base_Start_IT+0xb0>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d018      	beq.n	8007b44 <HAL_TIM_Base_Start_IT+0x6c>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b1a:	d013      	beq.n	8007b44 <HAL_TIM_Base_Start_IT+0x6c>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a1a      	ldr	r2, [pc, #104]	; (8007b8c <HAL_TIM_Base_Start_IT+0xb4>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d00e      	beq.n	8007b44 <HAL_TIM_Base_Start_IT+0x6c>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a19      	ldr	r2, [pc, #100]	; (8007b90 <HAL_TIM_Base_Start_IT+0xb8>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d009      	beq.n	8007b44 <HAL_TIM_Base_Start_IT+0x6c>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a17      	ldr	r2, [pc, #92]	; (8007b94 <HAL_TIM_Base_Start_IT+0xbc>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d004      	beq.n	8007b44 <HAL_TIM_Base_Start_IT+0x6c>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a16      	ldr	r2, [pc, #88]	; (8007b98 <HAL_TIM_Base_Start_IT+0xc0>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d111      	bne.n	8007b68 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	f003 0307 	and.w	r3, r3, #7
 8007b4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2b06      	cmp	r3, #6
 8007b54:	d010      	beq.n	8007b78 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	681a      	ldr	r2, [r3, #0]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f042 0201 	orr.w	r2, r2, #1
 8007b64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b66:	e007      	b.n	8007b78 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f042 0201 	orr.w	r2, r2, #1
 8007b76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b78:	2300      	movs	r3, #0
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3714      	adds	r7, #20
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b84:	4770      	bx	lr
 8007b86:	bf00      	nop
 8007b88:	40010000 	.word	0x40010000
 8007b8c:	40000400 	.word	0x40000400
 8007b90:	40000800 	.word	0x40000800
 8007b94:	40000c00 	.word	0x40000c00
 8007b98:	40014000 	.word	0x40014000

08007b9c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	68da      	ldr	r2, [r3, #12]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f022 0201 	bic.w	r2, r2, #1
 8007bb2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	6a1a      	ldr	r2, [r3, #32]
 8007bba:	f241 1311 	movw	r3, #4369	; 0x1111
 8007bbe:	4013      	ands	r3, r2
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d10f      	bne.n	8007be4 <HAL_TIM_Base_Stop_IT+0x48>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	6a1a      	ldr	r2, [r3, #32]
 8007bca:	f240 4344 	movw	r3, #1092	; 0x444
 8007bce:	4013      	ands	r3, r2
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d107      	bne.n	8007be4 <HAL_TIM_Base_Stop_IT+0x48>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f022 0201 	bic.w	r2, r2, #1
 8007be2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2201      	movs	r2, #1
 8007be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007bec:	2300      	movs	r3, #0
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	370c      	adds	r7, #12
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr

08007bfa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007bfa:	b580      	push	{r7, lr}
 8007bfc:	b082      	sub	sp, #8
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d101      	bne.n	8007c0c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	e041      	b.n	8007c90 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c12:	b2db      	uxtb	r3, r3
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d106      	bne.n	8007c26 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 f839 	bl	8007c98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2202      	movs	r2, #2
 8007c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	3304      	adds	r3, #4
 8007c36:	4619      	mov	r1, r3
 8007c38:	4610      	mov	r0, r2
 8007c3a:	f000 fc05 	bl	8008448 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2201      	movs	r2, #1
 8007c42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2201      	movs	r2, #1
 8007c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2201      	movs	r2, #1
 8007c52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2201      	movs	r2, #1
 8007c5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2201      	movs	r2, #1
 8007c62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2201      	movs	r2, #1
 8007c6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2201      	movs	r2, #1
 8007c72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2201      	movs	r2, #1
 8007c7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2201      	movs	r2, #1
 8007c82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2201      	movs	r2, #1
 8007c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c8e:	2300      	movs	r3, #0
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3708      	adds	r7, #8
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b083      	sub	sp, #12
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007ca0:	bf00      	nop
 8007ca2:	370c      	adds	r7, #12
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr

08007cac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b084      	sub	sp, #16
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d109      	bne.n	8007cd0 <HAL_TIM_PWM_Start+0x24>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	bf14      	ite	ne
 8007cc8:	2301      	movne	r3, #1
 8007cca:	2300      	moveq	r3, #0
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	e022      	b.n	8007d16 <HAL_TIM_PWM_Start+0x6a>
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	2b04      	cmp	r3, #4
 8007cd4:	d109      	bne.n	8007cea <HAL_TIM_PWM_Start+0x3e>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	bf14      	ite	ne
 8007ce2:	2301      	movne	r3, #1
 8007ce4:	2300      	moveq	r3, #0
 8007ce6:	b2db      	uxtb	r3, r3
 8007ce8:	e015      	b.n	8007d16 <HAL_TIM_PWM_Start+0x6a>
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	2b08      	cmp	r3, #8
 8007cee:	d109      	bne.n	8007d04 <HAL_TIM_PWM_Start+0x58>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007cf6:	b2db      	uxtb	r3, r3
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	bf14      	ite	ne
 8007cfc:	2301      	movne	r3, #1
 8007cfe:	2300      	moveq	r3, #0
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	e008      	b.n	8007d16 <HAL_TIM_PWM_Start+0x6a>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d0a:	b2db      	uxtb	r3, r3
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	bf14      	ite	ne
 8007d10:	2301      	movne	r3, #1
 8007d12:	2300      	moveq	r3, #0
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d001      	beq.n	8007d1e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	e068      	b.n	8007df0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d104      	bne.n	8007d2e <HAL_TIM_PWM_Start+0x82>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2202      	movs	r2, #2
 8007d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d2c:	e013      	b.n	8007d56 <HAL_TIM_PWM_Start+0xaa>
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	2b04      	cmp	r3, #4
 8007d32:	d104      	bne.n	8007d3e <HAL_TIM_PWM_Start+0x92>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2202      	movs	r2, #2
 8007d38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d3c:	e00b      	b.n	8007d56 <HAL_TIM_PWM_Start+0xaa>
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	2b08      	cmp	r3, #8
 8007d42:	d104      	bne.n	8007d4e <HAL_TIM_PWM_Start+0xa2>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2202      	movs	r2, #2
 8007d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d4c:	e003      	b.n	8007d56 <HAL_TIM_PWM_Start+0xaa>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2202      	movs	r2, #2
 8007d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	6839      	ldr	r1, [r7, #0]
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f000 fe18 	bl	8008994 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a23      	ldr	r2, [pc, #140]	; (8007df8 <HAL_TIM_PWM_Start+0x14c>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d107      	bne.n	8007d7e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d7c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a1d      	ldr	r2, [pc, #116]	; (8007df8 <HAL_TIM_PWM_Start+0x14c>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d018      	beq.n	8007dba <HAL_TIM_PWM_Start+0x10e>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d90:	d013      	beq.n	8007dba <HAL_TIM_PWM_Start+0x10e>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a19      	ldr	r2, [pc, #100]	; (8007dfc <HAL_TIM_PWM_Start+0x150>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d00e      	beq.n	8007dba <HAL_TIM_PWM_Start+0x10e>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a17      	ldr	r2, [pc, #92]	; (8007e00 <HAL_TIM_PWM_Start+0x154>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d009      	beq.n	8007dba <HAL_TIM_PWM_Start+0x10e>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a16      	ldr	r2, [pc, #88]	; (8007e04 <HAL_TIM_PWM_Start+0x158>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d004      	beq.n	8007dba <HAL_TIM_PWM_Start+0x10e>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a14      	ldr	r2, [pc, #80]	; (8007e08 <HAL_TIM_PWM_Start+0x15c>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d111      	bne.n	8007dde <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	f003 0307 	and.w	r3, r3, #7
 8007dc4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2b06      	cmp	r3, #6
 8007dca:	d010      	beq.n	8007dee <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	681a      	ldr	r2, [r3, #0]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f042 0201 	orr.w	r2, r2, #1
 8007dda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ddc:	e007      	b.n	8007dee <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f042 0201 	orr.w	r2, r2, #1
 8007dec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007dee:	2300      	movs	r3, #0
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3710      	adds	r7, #16
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}
 8007df8:	40010000 	.word	0x40010000
 8007dfc:	40000400 	.word	0x40000400
 8007e00:	40000800 	.word	0x40000800
 8007e04:	40000c00 	.word	0x40000c00
 8007e08:	40014000 	.word	0x40014000

08007e0c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	6839      	ldr	r1, [r7, #0]
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f000 fdb8 	bl	8008994 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a29      	ldr	r2, [pc, #164]	; (8007ed0 <HAL_TIM_PWM_Stop+0xc4>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d117      	bne.n	8007e5e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	6a1a      	ldr	r2, [r3, #32]
 8007e34:	f241 1311 	movw	r3, #4369	; 0x1111
 8007e38:	4013      	ands	r3, r2
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d10f      	bne.n	8007e5e <HAL_TIM_PWM_Stop+0x52>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	6a1a      	ldr	r2, [r3, #32]
 8007e44:	f240 4344 	movw	r3, #1092	; 0x444
 8007e48:	4013      	ands	r3, r2
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d107      	bne.n	8007e5e <HAL_TIM_PWM_Stop+0x52>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007e5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	6a1a      	ldr	r2, [r3, #32]
 8007e64:	f241 1311 	movw	r3, #4369	; 0x1111
 8007e68:	4013      	ands	r3, r2
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d10f      	bne.n	8007e8e <HAL_TIM_PWM_Stop+0x82>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	6a1a      	ldr	r2, [r3, #32]
 8007e74:	f240 4344 	movw	r3, #1092	; 0x444
 8007e78:	4013      	ands	r3, r2
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d107      	bne.n	8007e8e <HAL_TIM_PWM_Stop+0x82>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	681a      	ldr	r2, [r3, #0]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f022 0201 	bic.w	r2, r2, #1
 8007e8c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d104      	bne.n	8007e9e <HAL_TIM_PWM_Stop+0x92>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2201      	movs	r2, #1
 8007e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e9c:	e013      	b.n	8007ec6 <HAL_TIM_PWM_Stop+0xba>
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	2b04      	cmp	r3, #4
 8007ea2:	d104      	bne.n	8007eae <HAL_TIM_PWM_Stop+0xa2>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007eac:	e00b      	b.n	8007ec6 <HAL_TIM_PWM_Stop+0xba>
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	2b08      	cmp	r3, #8
 8007eb2:	d104      	bne.n	8007ebe <HAL_TIM_PWM_Stop+0xb2>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ebc:	e003      	b.n	8007ec6 <HAL_TIM_PWM_Stop+0xba>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8007ec6:	2300      	movs	r3, #0
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3708      	adds	r7, #8
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}
 8007ed0:	40010000 	.word	0x40010000

08007ed4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b082      	sub	sp, #8
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	691b      	ldr	r3, [r3, #16]
 8007ee2:	f003 0302 	and.w	r3, r3, #2
 8007ee6:	2b02      	cmp	r3, #2
 8007ee8:	d122      	bne.n	8007f30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	68db      	ldr	r3, [r3, #12]
 8007ef0:	f003 0302 	and.w	r3, r3, #2
 8007ef4:	2b02      	cmp	r3, #2
 8007ef6:	d11b      	bne.n	8007f30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f06f 0202 	mvn.w	r2, #2
 8007f00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2201      	movs	r2, #1
 8007f06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	699b      	ldr	r3, [r3, #24]
 8007f0e:	f003 0303 	and.w	r3, r3, #3
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d003      	beq.n	8007f1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 fa77 	bl	800840a <HAL_TIM_IC_CaptureCallback>
 8007f1c:	e005      	b.n	8007f2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 fa69 	bl	80083f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f000 fa7a 	bl	800841e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	691b      	ldr	r3, [r3, #16]
 8007f36:	f003 0304 	and.w	r3, r3, #4
 8007f3a:	2b04      	cmp	r3, #4
 8007f3c:	d122      	bne.n	8007f84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	68db      	ldr	r3, [r3, #12]
 8007f44:	f003 0304 	and.w	r3, r3, #4
 8007f48:	2b04      	cmp	r3, #4
 8007f4a:	d11b      	bne.n	8007f84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f06f 0204 	mvn.w	r2, #4
 8007f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2202      	movs	r2, #2
 8007f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	699b      	ldr	r3, [r3, #24]
 8007f62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d003      	beq.n	8007f72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 fa4d 	bl	800840a <HAL_TIM_IC_CaptureCallback>
 8007f70:	e005      	b.n	8007f7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 fa3f 	bl	80083f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 fa50 	bl	800841e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2200      	movs	r2, #0
 8007f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	691b      	ldr	r3, [r3, #16]
 8007f8a:	f003 0308 	and.w	r3, r3, #8
 8007f8e:	2b08      	cmp	r3, #8
 8007f90:	d122      	bne.n	8007fd8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	68db      	ldr	r3, [r3, #12]
 8007f98:	f003 0308 	and.w	r3, r3, #8
 8007f9c:	2b08      	cmp	r3, #8
 8007f9e:	d11b      	bne.n	8007fd8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f06f 0208 	mvn.w	r2, #8
 8007fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2204      	movs	r2, #4
 8007fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	69db      	ldr	r3, [r3, #28]
 8007fb6:	f003 0303 	and.w	r3, r3, #3
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d003      	beq.n	8007fc6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 fa23 	bl	800840a <HAL_TIM_IC_CaptureCallback>
 8007fc4:	e005      	b.n	8007fd2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 fa15 	bl	80083f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 fa26 	bl	800841e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	691b      	ldr	r3, [r3, #16]
 8007fde:	f003 0310 	and.w	r3, r3, #16
 8007fe2:	2b10      	cmp	r3, #16
 8007fe4:	d122      	bne.n	800802c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	68db      	ldr	r3, [r3, #12]
 8007fec:	f003 0310 	and.w	r3, r3, #16
 8007ff0:	2b10      	cmp	r3, #16
 8007ff2:	d11b      	bne.n	800802c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f06f 0210 	mvn.w	r2, #16
 8007ffc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2208      	movs	r2, #8
 8008002:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	69db      	ldr	r3, [r3, #28]
 800800a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800800e:	2b00      	cmp	r3, #0
 8008010:	d003      	beq.n	800801a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 f9f9 	bl	800840a <HAL_TIM_IC_CaptureCallback>
 8008018:	e005      	b.n	8008026 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 f9eb 	bl	80083f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f000 f9fc 	bl	800841e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	691b      	ldr	r3, [r3, #16]
 8008032:	f003 0301 	and.w	r3, r3, #1
 8008036:	2b01      	cmp	r3, #1
 8008038:	d10e      	bne.n	8008058 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	68db      	ldr	r3, [r3, #12]
 8008040:	f003 0301 	and.w	r3, r3, #1
 8008044:	2b01      	cmp	r3, #1
 8008046:	d107      	bne.n	8008058 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f06f 0201 	mvn.w	r2, #1
 8008050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f7f9 fc64 	bl	8001920 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	691b      	ldr	r3, [r3, #16]
 800805e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008062:	2b80      	cmp	r3, #128	; 0x80
 8008064:	d10e      	bne.n	8008084 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	68db      	ldr	r3, [r3, #12]
 800806c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008070:	2b80      	cmp	r3, #128	; 0x80
 8008072:	d107      	bne.n	8008084 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800807c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 fd26 	bl	8008ad0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	691b      	ldr	r3, [r3, #16]
 800808a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800808e:	2b40      	cmp	r3, #64	; 0x40
 8008090:	d10e      	bne.n	80080b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	68db      	ldr	r3, [r3, #12]
 8008098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800809c:	2b40      	cmp	r3, #64	; 0x40
 800809e:	d107      	bne.n	80080b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80080a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 f9c1 	bl	8008432 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	691b      	ldr	r3, [r3, #16]
 80080b6:	f003 0320 	and.w	r3, r3, #32
 80080ba:	2b20      	cmp	r3, #32
 80080bc:	d10e      	bne.n	80080dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	68db      	ldr	r3, [r3, #12]
 80080c4:	f003 0320 	and.w	r3, r3, #32
 80080c8:	2b20      	cmp	r3, #32
 80080ca:	d107      	bne.n	80080dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f06f 0220 	mvn.w	r2, #32
 80080d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 fcf0 	bl	8008abc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80080dc:	bf00      	nop
 80080de:	3708      	adds	r7, #8
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b086      	sub	sp, #24
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	60f8      	str	r0, [r7, #12]
 80080ec:	60b9      	str	r1, [r7, #8]
 80080ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80080f0:	2300      	movs	r3, #0
 80080f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	d101      	bne.n	8008102 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80080fe:	2302      	movs	r3, #2
 8008100:	e0ae      	b.n	8008260 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2201      	movs	r2, #1
 8008106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2b0c      	cmp	r3, #12
 800810e:	f200 809f 	bhi.w	8008250 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008112:	a201      	add	r2, pc, #4	; (adr r2, 8008118 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008118:	0800814d 	.word	0x0800814d
 800811c:	08008251 	.word	0x08008251
 8008120:	08008251 	.word	0x08008251
 8008124:	08008251 	.word	0x08008251
 8008128:	0800818d 	.word	0x0800818d
 800812c:	08008251 	.word	0x08008251
 8008130:	08008251 	.word	0x08008251
 8008134:	08008251 	.word	0x08008251
 8008138:	080081cf 	.word	0x080081cf
 800813c:	08008251 	.word	0x08008251
 8008140:	08008251 	.word	0x08008251
 8008144:	08008251 	.word	0x08008251
 8008148:	0800820f 	.word	0x0800820f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	68b9      	ldr	r1, [r7, #8]
 8008152:	4618      	mov	r0, r3
 8008154:	f000 f9f8 	bl	8008548 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	699a      	ldr	r2, [r3, #24]
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f042 0208 	orr.w	r2, r2, #8
 8008166:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	699a      	ldr	r2, [r3, #24]
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f022 0204 	bic.w	r2, r2, #4
 8008176:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	6999      	ldr	r1, [r3, #24]
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	691a      	ldr	r2, [r3, #16]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	430a      	orrs	r2, r1
 8008188:	619a      	str	r2, [r3, #24]
      break;
 800818a:	e064      	b.n	8008256 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	68b9      	ldr	r1, [r7, #8]
 8008192:	4618      	mov	r0, r3
 8008194:	f000 fa3e 	bl	8008614 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	699a      	ldr	r2, [r3, #24]
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80081a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	699a      	ldr	r2, [r3, #24]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	6999      	ldr	r1, [r3, #24]
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	691b      	ldr	r3, [r3, #16]
 80081c2:	021a      	lsls	r2, r3, #8
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	430a      	orrs	r2, r1
 80081ca:	619a      	str	r2, [r3, #24]
      break;
 80081cc:	e043      	b.n	8008256 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	68b9      	ldr	r1, [r7, #8]
 80081d4:	4618      	mov	r0, r3
 80081d6:	f000 fa89 	bl	80086ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	69da      	ldr	r2, [r3, #28]
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f042 0208 	orr.w	r2, r2, #8
 80081e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	69da      	ldr	r2, [r3, #28]
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f022 0204 	bic.w	r2, r2, #4
 80081f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	69d9      	ldr	r1, [r3, #28]
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	691a      	ldr	r2, [r3, #16]
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	430a      	orrs	r2, r1
 800820a:	61da      	str	r2, [r3, #28]
      break;
 800820c:	e023      	b.n	8008256 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	68b9      	ldr	r1, [r7, #8]
 8008214:	4618      	mov	r0, r3
 8008216:	f000 fad3 	bl	80087c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	69da      	ldr	r2, [r3, #28]
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008228:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	69da      	ldr	r2, [r3, #28]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008238:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	69d9      	ldr	r1, [r3, #28]
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	691b      	ldr	r3, [r3, #16]
 8008244:	021a      	lsls	r2, r3, #8
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	430a      	orrs	r2, r1
 800824c:	61da      	str	r2, [r3, #28]
      break;
 800824e:	e002      	b.n	8008256 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008250:	2301      	movs	r3, #1
 8008252:	75fb      	strb	r3, [r7, #23]
      break;
 8008254:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	2200      	movs	r2, #0
 800825a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800825e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008260:	4618      	mov	r0, r3
 8008262:	3718      	adds	r7, #24
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b084      	sub	sp, #16
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008272:	2300      	movs	r3, #0
 8008274:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800827c:	2b01      	cmp	r3, #1
 800827e:	d101      	bne.n	8008284 <HAL_TIM_ConfigClockSource+0x1c>
 8008280:	2302      	movs	r3, #2
 8008282:	e0b4      	b.n	80083ee <HAL_TIM_ConfigClockSource+0x186>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2201      	movs	r2, #1
 8008288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2202      	movs	r2, #2
 8008290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	689b      	ldr	r3, [r3, #8]
 800829a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80082a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80082aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	68ba      	ldr	r2, [r7, #8]
 80082b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082bc:	d03e      	beq.n	800833c <HAL_TIM_ConfigClockSource+0xd4>
 80082be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082c2:	f200 8087 	bhi.w	80083d4 <HAL_TIM_ConfigClockSource+0x16c>
 80082c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082ca:	f000 8086 	beq.w	80083da <HAL_TIM_ConfigClockSource+0x172>
 80082ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082d2:	d87f      	bhi.n	80083d4 <HAL_TIM_ConfigClockSource+0x16c>
 80082d4:	2b70      	cmp	r3, #112	; 0x70
 80082d6:	d01a      	beq.n	800830e <HAL_TIM_ConfigClockSource+0xa6>
 80082d8:	2b70      	cmp	r3, #112	; 0x70
 80082da:	d87b      	bhi.n	80083d4 <HAL_TIM_ConfigClockSource+0x16c>
 80082dc:	2b60      	cmp	r3, #96	; 0x60
 80082de:	d050      	beq.n	8008382 <HAL_TIM_ConfigClockSource+0x11a>
 80082e0:	2b60      	cmp	r3, #96	; 0x60
 80082e2:	d877      	bhi.n	80083d4 <HAL_TIM_ConfigClockSource+0x16c>
 80082e4:	2b50      	cmp	r3, #80	; 0x50
 80082e6:	d03c      	beq.n	8008362 <HAL_TIM_ConfigClockSource+0xfa>
 80082e8:	2b50      	cmp	r3, #80	; 0x50
 80082ea:	d873      	bhi.n	80083d4 <HAL_TIM_ConfigClockSource+0x16c>
 80082ec:	2b40      	cmp	r3, #64	; 0x40
 80082ee:	d058      	beq.n	80083a2 <HAL_TIM_ConfigClockSource+0x13a>
 80082f0:	2b40      	cmp	r3, #64	; 0x40
 80082f2:	d86f      	bhi.n	80083d4 <HAL_TIM_ConfigClockSource+0x16c>
 80082f4:	2b30      	cmp	r3, #48	; 0x30
 80082f6:	d064      	beq.n	80083c2 <HAL_TIM_ConfigClockSource+0x15a>
 80082f8:	2b30      	cmp	r3, #48	; 0x30
 80082fa:	d86b      	bhi.n	80083d4 <HAL_TIM_ConfigClockSource+0x16c>
 80082fc:	2b20      	cmp	r3, #32
 80082fe:	d060      	beq.n	80083c2 <HAL_TIM_ConfigClockSource+0x15a>
 8008300:	2b20      	cmp	r3, #32
 8008302:	d867      	bhi.n	80083d4 <HAL_TIM_ConfigClockSource+0x16c>
 8008304:	2b00      	cmp	r3, #0
 8008306:	d05c      	beq.n	80083c2 <HAL_TIM_ConfigClockSource+0x15a>
 8008308:	2b10      	cmp	r3, #16
 800830a:	d05a      	beq.n	80083c2 <HAL_TIM_ConfigClockSource+0x15a>
 800830c:	e062      	b.n	80083d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6818      	ldr	r0, [r3, #0]
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	6899      	ldr	r1, [r3, #8]
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	685a      	ldr	r2, [r3, #4]
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	68db      	ldr	r3, [r3, #12]
 800831e:	f000 fb19 	bl	8008954 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008330:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	68ba      	ldr	r2, [r7, #8]
 8008338:	609a      	str	r2, [r3, #8]
      break;
 800833a:	e04f      	b.n	80083dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6818      	ldr	r0, [r3, #0]
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	6899      	ldr	r1, [r3, #8]
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	685a      	ldr	r2, [r3, #4]
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	68db      	ldr	r3, [r3, #12]
 800834c:	f000 fb02 	bl	8008954 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	689a      	ldr	r2, [r3, #8]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800835e:	609a      	str	r2, [r3, #8]
      break;
 8008360:	e03c      	b.n	80083dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6818      	ldr	r0, [r3, #0]
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	6859      	ldr	r1, [r3, #4]
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	68db      	ldr	r3, [r3, #12]
 800836e:	461a      	mov	r2, r3
 8008370:	f000 fa76 	bl	8008860 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	2150      	movs	r1, #80	; 0x50
 800837a:	4618      	mov	r0, r3
 800837c:	f000 facf 	bl	800891e <TIM_ITRx_SetConfig>
      break;
 8008380:	e02c      	b.n	80083dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6818      	ldr	r0, [r3, #0]
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	6859      	ldr	r1, [r3, #4]
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	68db      	ldr	r3, [r3, #12]
 800838e:	461a      	mov	r2, r3
 8008390:	f000 fa95 	bl	80088be <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	2160      	movs	r1, #96	; 0x60
 800839a:	4618      	mov	r0, r3
 800839c:	f000 fabf 	bl	800891e <TIM_ITRx_SetConfig>
      break;
 80083a0:	e01c      	b.n	80083dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6818      	ldr	r0, [r3, #0]
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	6859      	ldr	r1, [r3, #4]
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	68db      	ldr	r3, [r3, #12]
 80083ae:	461a      	mov	r2, r3
 80083b0:	f000 fa56 	bl	8008860 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	2140      	movs	r1, #64	; 0x40
 80083ba:	4618      	mov	r0, r3
 80083bc:	f000 faaf 	bl	800891e <TIM_ITRx_SetConfig>
      break;
 80083c0:	e00c      	b.n	80083dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681a      	ldr	r2, [r3, #0]
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4619      	mov	r1, r3
 80083cc:	4610      	mov	r0, r2
 80083ce:	f000 faa6 	bl	800891e <TIM_ITRx_SetConfig>
      break;
 80083d2:	e003      	b.n	80083dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80083d4:	2301      	movs	r3, #1
 80083d6:	73fb      	strb	r3, [r7, #15]
      break;
 80083d8:	e000      	b.n	80083dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80083da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2201      	movs	r2, #1
 80083e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2200      	movs	r2, #0
 80083e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80083ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3710      	adds	r7, #16
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}

080083f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80083f6:	b480      	push	{r7}
 80083f8:	b083      	sub	sp, #12
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80083fe:	bf00      	nop
 8008400:	370c      	adds	r7, #12
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr

0800840a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800840a:	b480      	push	{r7}
 800840c:	b083      	sub	sp, #12
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008412:	bf00      	nop
 8008414:	370c      	adds	r7, #12
 8008416:	46bd      	mov	sp, r7
 8008418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841c:	4770      	bx	lr

0800841e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800841e:	b480      	push	{r7}
 8008420:	b083      	sub	sp, #12
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008426:	bf00      	nop
 8008428:	370c      	adds	r7, #12
 800842a:	46bd      	mov	sp, r7
 800842c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008430:	4770      	bx	lr

08008432 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008432:	b480      	push	{r7}
 8008434:	b083      	sub	sp, #12
 8008436:	af00      	add	r7, sp, #0
 8008438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800843a:	bf00      	nop
 800843c:	370c      	adds	r7, #12
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr
	...

08008448 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008448:	b480      	push	{r7}
 800844a:	b085      	sub	sp, #20
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	4a34      	ldr	r2, [pc, #208]	; (800852c <TIM_Base_SetConfig+0xe4>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d00f      	beq.n	8008480 <TIM_Base_SetConfig+0x38>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008466:	d00b      	beq.n	8008480 <TIM_Base_SetConfig+0x38>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	4a31      	ldr	r2, [pc, #196]	; (8008530 <TIM_Base_SetConfig+0xe8>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d007      	beq.n	8008480 <TIM_Base_SetConfig+0x38>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	4a30      	ldr	r2, [pc, #192]	; (8008534 <TIM_Base_SetConfig+0xec>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d003      	beq.n	8008480 <TIM_Base_SetConfig+0x38>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	4a2f      	ldr	r2, [pc, #188]	; (8008538 <TIM_Base_SetConfig+0xf0>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d108      	bne.n	8008492 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008486:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	68fa      	ldr	r2, [r7, #12]
 800848e:	4313      	orrs	r3, r2
 8008490:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	4a25      	ldr	r2, [pc, #148]	; (800852c <TIM_Base_SetConfig+0xe4>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d01b      	beq.n	80084d2 <TIM_Base_SetConfig+0x8a>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084a0:	d017      	beq.n	80084d2 <TIM_Base_SetConfig+0x8a>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	4a22      	ldr	r2, [pc, #136]	; (8008530 <TIM_Base_SetConfig+0xe8>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d013      	beq.n	80084d2 <TIM_Base_SetConfig+0x8a>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	4a21      	ldr	r2, [pc, #132]	; (8008534 <TIM_Base_SetConfig+0xec>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d00f      	beq.n	80084d2 <TIM_Base_SetConfig+0x8a>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	4a20      	ldr	r2, [pc, #128]	; (8008538 <TIM_Base_SetConfig+0xf0>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d00b      	beq.n	80084d2 <TIM_Base_SetConfig+0x8a>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	4a1f      	ldr	r2, [pc, #124]	; (800853c <TIM_Base_SetConfig+0xf4>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d007      	beq.n	80084d2 <TIM_Base_SetConfig+0x8a>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	4a1e      	ldr	r2, [pc, #120]	; (8008540 <TIM_Base_SetConfig+0xf8>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d003      	beq.n	80084d2 <TIM_Base_SetConfig+0x8a>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	4a1d      	ldr	r2, [pc, #116]	; (8008544 <TIM_Base_SetConfig+0xfc>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d108      	bne.n	80084e4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	68db      	ldr	r3, [r3, #12]
 80084de:	68fa      	ldr	r2, [r7, #12]
 80084e0:	4313      	orrs	r3, r2
 80084e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	695b      	ldr	r3, [r3, #20]
 80084ee:	4313      	orrs	r3, r2
 80084f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	68fa      	ldr	r2, [r7, #12]
 80084f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	689a      	ldr	r2, [r3, #8]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	4a08      	ldr	r2, [pc, #32]	; (800852c <TIM_Base_SetConfig+0xe4>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d103      	bne.n	8008518 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	691a      	ldr	r2, [r3, #16]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2201      	movs	r2, #1
 800851c:	615a      	str	r2, [r3, #20]
}
 800851e:	bf00      	nop
 8008520:	3714      	adds	r7, #20
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr
 800852a:	bf00      	nop
 800852c:	40010000 	.word	0x40010000
 8008530:	40000400 	.word	0x40000400
 8008534:	40000800 	.word	0x40000800
 8008538:	40000c00 	.word	0x40000c00
 800853c:	40014000 	.word	0x40014000
 8008540:	40014400 	.word	0x40014400
 8008544:	40014800 	.word	0x40014800

08008548 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008548:	b480      	push	{r7}
 800854a:	b087      	sub	sp, #28
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6a1b      	ldr	r3, [r3, #32]
 8008556:	f023 0201 	bic.w	r2, r3, #1
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6a1b      	ldr	r3, [r3, #32]
 8008562:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	699b      	ldr	r3, [r3, #24]
 800856e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008576:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f023 0303 	bic.w	r3, r3, #3
 800857e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	68fa      	ldr	r2, [r7, #12]
 8008586:	4313      	orrs	r3, r2
 8008588:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	f023 0302 	bic.w	r3, r3, #2
 8008590:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	689b      	ldr	r3, [r3, #8]
 8008596:	697a      	ldr	r2, [r7, #20]
 8008598:	4313      	orrs	r3, r2
 800859a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	4a1c      	ldr	r2, [pc, #112]	; (8008610 <TIM_OC1_SetConfig+0xc8>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d10c      	bne.n	80085be <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	f023 0308 	bic.w	r3, r3, #8
 80085aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	68db      	ldr	r3, [r3, #12]
 80085b0:	697a      	ldr	r2, [r7, #20]
 80085b2:	4313      	orrs	r3, r2
 80085b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	f023 0304 	bic.w	r3, r3, #4
 80085bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	4a13      	ldr	r2, [pc, #76]	; (8008610 <TIM_OC1_SetConfig+0xc8>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d111      	bne.n	80085ea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80085d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	695b      	ldr	r3, [r3, #20]
 80085da:	693a      	ldr	r2, [r7, #16]
 80085dc:	4313      	orrs	r3, r2
 80085de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	699b      	ldr	r3, [r3, #24]
 80085e4:	693a      	ldr	r2, [r7, #16]
 80085e6:	4313      	orrs	r3, r2
 80085e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	693a      	ldr	r2, [r7, #16]
 80085ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	68fa      	ldr	r2, [r7, #12]
 80085f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	685a      	ldr	r2, [r3, #4]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	697a      	ldr	r2, [r7, #20]
 8008602:	621a      	str	r2, [r3, #32]
}
 8008604:	bf00      	nop
 8008606:	371c      	adds	r7, #28
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr
 8008610:	40010000 	.word	0x40010000

08008614 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008614:	b480      	push	{r7}
 8008616:	b087      	sub	sp, #28
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6a1b      	ldr	r3, [r3, #32]
 8008622:	f023 0210 	bic.w	r2, r3, #16
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6a1b      	ldr	r3, [r3, #32]
 800862e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	699b      	ldr	r3, [r3, #24]
 800863a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008642:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800864a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	021b      	lsls	r3, r3, #8
 8008652:	68fa      	ldr	r2, [r7, #12]
 8008654:	4313      	orrs	r3, r2
 8008656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	f023 0320 	bic.w	r3, r3, #32
 800865e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	011b      	lsls	r3, r3, #4
 8008666:	697a      	ldr	r2, [r7, #20]
 8008668:	4313      	orrs	r3, r2
 800866a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	4a1e      	ldr	r2, [pc, #120]	; (80086e8 <TIM_OC2_SetConfig+0xd4>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d10d      	bne.n	8008690 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800867a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	68db      	ldr	r3, [r3, #12]
 8008680:	011b      	lsls	r3, r3, #4
 8008682:	697a      	ldr	r2, [r7, #20]
 8008684:	4313      	orrs	r3, r2
 8008686:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800868e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	4a15      	ldr	r2, [pc, #84]	; (80086e8 <TIM_OC2_SetConfig+0xd4>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d113      	bne.n	80086c0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800869e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80086a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	695b      	ldr	r3, [r3, #20]
 80086ac:	009b      	lsls	r3, r3, #2
 80086ae:	693a      	ldr	r2, [r7, #16]
 80086b0:	4313      	orrs	r3, r2
 80086b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	699b      	ldr	r3, [r3, #24]
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	693a      	ldr	r2, [r7, #16]
 80086bc:	4313      	orrs	r3, r2
 80086be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	693a      	ldr	r2, [r7, #16]
 80086c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	68fa      	ldr	r2, [r7, #12]
 80086ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	685a      	ldr	r2, [r3, #4]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	697a      	ldr	r2, [r7, #20]
 80086d8:	621a      	str	r2, [r3, #32]
}
 80086da:	bf00      	nop
 80086dc:	371c      	adds	r7, #28
 80086de:	46bd      	mov	sp, r7
 80086e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e4:	4770      	bx	lr
 80086e6:	bf00      	nop
 80086e8:	40010000 	.word	0x40010000

080086ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b087      	sub	sp, #28
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6a1b      	ldr	r3, [r3, #32]
 80086fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6a1b      	ldr	r3, [r3, #32]
 8008706:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	69db      	ldr	r3, [r3, #28]
 8008712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800871a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f023 0303 	bic.w	r3, r3, #3
 8008722:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	68fa      	ldr	r2, [r7, #12]
 800872a:	4313      	orrs	r3, r2
 800872c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008734:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	689b      	ldr	r3, [r3, #8]
 800873a:	021b      	lsls	r3, r3, #8
 800873c:	697a      	ldr	r2, [r7, #20]
 800873e:	4313      	orrs	r3, r2
 8008740:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	4a1d      	ldr	r2, [pc, #116]	; (80087bc <TIM_OC3_SetConfig+0xd0>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d10d      	bne.n	8008766 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008750:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	68db      	ldr	r3, [r3, #12]
 8008756:	021b      	lsls	r3, r3, #8
 8008758:	697a      	ldr	r2, [r7, #20]
 800875a:	4313      	orrs	r3, r2
 800875c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008764:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	4a14      	ldr	r2, [pc, #80]	; (80087bc <TIM_OC3_SetConfig+0xd0>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d113      	bne.n	8008796 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008774:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800877c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	695b      	ldr	r3, [r3, #20]
 8008782:	011b      	lsls	r3, r3, #4
 8008784:	693a      	ldr	r2, [r7, #16]
 8008786:	4313      	orrs	r3, r2
 8008788:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	699b      	ldr	r3, [r3, #24]
 800878e:	011b      	lsls	r3, r3, #4
 8008790:	693a      	ldr	r2, [r7, #16]
 8008792:	4313      	orrs	r3, r2
 8008794:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	693a      	ldr	r2, [r7, #16]
 800879a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	68fa      	ldr	r2, [r7, #12]
 80087a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	685a      	ldr	r2, [r3, #4]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	697a      	ldr	r2, [r7, #20]
 80087ae:	621a      	str	r2, [r3, #32]
}
 80087b0:	bf00      	nop
 80087b2:	371c      	adds	r7, #28
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr
 80087bc:	40010000 	.word	0x40010000

080087c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b087      	sub	sp, #28
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6a1b      	ldr	r3, [r3, #32]
 80087ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6a1b      	ldr	r3, [r3, #32]
 80087da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	69db      	ldr	r3, [r3, #28]
 80087e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	021b      	lsls	r3, r3, #8
 80087fe:	68fa      	ldr	r2, [r7, #12]
 8008800:	4313      	orrs	r3, r2
 8008802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800880a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	689b      	ldr	r3, [r3, #8]
 8008810:	031b      	lsls	r3, r3, #12
 8008812:	693a      	ldr	r2, [r7, #16]
 8008814:	4313      	orrs	r3, r2
 8008816:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	4a10      	ldr	r2, [pc, #64]	; (800885c <TIM_OC4_SetConfig+0x9c>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d109      	bne.n	8008834 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008826:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	695b      	ldr	r3, [r3, #20]
 800882c:	019b      	lsls	r3, r3, #6
 800882e:	697a      	ldr	r2, [r7, #20]
 8008830:	4313      	orrs	r3, r2
 8008832:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	697a      	ldr	r2, [r7, #20]
 8008838:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	68fa      	ldr	r2, [r7, #12]
 800883e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	685a      	ldr	r2, [r3, #4]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	693a      	ldr	r2, [r7, #16]
 800884c:	621a      	str	r2, [r3, #32]
}
 800884e:	bf00      	nop
 8008850:	371c      	adds	r7, #28
 8008852:	46bd      	mov	sp, r7
 8008854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008858:	4770      	bx	lr
 800885a:	bf00      	nop
 800885c:	40010000 	.word	0x40010000

08008860 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008860:	b480      	push	{r7}
 8008862:	b087      	sub	sp, #28
 8008864:	af00      	add	r7, sp, #0
 8008866:	60f8      	str	r0, [r7, #12]
 8008868:	60b9      	str	r1, [r7, #8]
 800886a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	6a1b      	ldr	r3, [r3, #32]
 8008870:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	6a1b      	ldr	r3, [r3, #32]
 8008876:	f023 0201 	bic.w	r2, r3, #1
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	699b      	ldr	r3, [r3, #24]
 8008882:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800888a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	011b      	lsls	r3, r3, #4
 8008890:	693a      	ldr	r2, [r7, #16]
 8008892:	4313      	orrs	r3, r2
 8008894:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	f023 030a 	bic.w	r3, r3, #10
 800889c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800889e:	697a      	ldr	r2, [r7, #20]
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	4313      	orrs	r3, r2
 80088a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	693a      	ldr	r2, [r7, #16]
 80088aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	697a      	ldr	r2, [r7, #20]
 80088b0:	621a      	str	r2, [r3, #32]
}
 80088b2:	bf00      	nop
 80088b4:	371c      	adds	r7, #28
 80088b6:	46bd      	mov	sp, r7
 80088b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088bc:	4770      	bx	lr

080088be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088be:	b480      	push	{r7}
 80088c0:	b087      	sub	sp, #28
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	60f8      	str	r0, [r7, #12]
 80088c6:	60b9      	str	r1, [r7, #8]
 80088c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	6a1b      	ldr	r3, [r3, #32]
 80088ce:	f023 0210 	bic.w	r2, r3, #16
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	699b      	ldr	r3, [r3, #24]
 80088da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	6a1b      	ldr	r3, [r3, #32]
 80088e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80088e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	031b      	lsls	r3, r3, #12
 80088ee:	697a      	ldr	r2, [r7, #20]
 80088f0:	4313      	orrs	r3, r2
 80088f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80088fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	011b      	lsls	r3, r3, #4
 8008900:	693a      	ldr	r2, [r7, #16]
 8008902:	4313      	orrs	r3, r2
 8008904:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	697a      	ldr	r2, [r7, #20]
 800890a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	693a      	ldr	r2, [r7, #16]
 8008910:	621a      	str	r2, [r3, #32]
}
 8008912:	bf00      	nop
 8008914:	371c      	adds	r7, #28
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr

0800891e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800891e:	b480      	push	{r7}
 8008920:	b085      	sub	sp, #20
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
 8008926:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	689b      	ldr	r3, [r3, #8]
 800892c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008934:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008936:	683a      	ldr	r2, [r7, #0]
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	4313      	orrs	r3, r2
 800893c:	f043 0307 	orr.w	r3, r3, #7
 8008940:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	68fa      	ldr	r2, [r7, #12]
 8008946:	609a      	str	r2, [r3, #8]
}
 8008948:	bf00      	nop
 800894a:	3714      	adds	r7, #20
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr

08008954 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008954:	b480      	push	{r7}
 8008956:	b087      	sub	sp, #28
 8008958:	af00      	add	r7, sp, #0
 800895a:	60f8      	str	r0, [r7, #12]
 800895c:	60b9      	str	r1, [r7, #8]
 800895e:	607a      	str	r2, [r7, #4]
 8008960:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	689b      	ldr	r3, [r3, #8]
 8008966:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800896e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	021a      	lsls	r2, r3, #8
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	431a      	orrs	r2, r3
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	4313      	orrs	r3, r2
 800897c:	697a      	ldr	r2, [r7, #20]
 800897e:	4313      	orrs	r3, r2
 8008980:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	697a      	ldr	r2, [r7, #20]
 8008986:	609a      	str	r2, [r3, #8]
}
 8008988:	bf00      	nop
 800898a:	371c      	adds	r7, #28
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr

08008994 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008994:	b480      	push	{r7}
 8008996:	b087      	sub	sp, #28
 8008998:	af00      	add	r7, sp, #0
 800899a:	60f8      	str	r0, [r7, #12]
 800899c:	60b9      	str	r1, [r7, #8]
 800899e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	f003 031f 	and.w	r3, r3, #31
 80089a6:	2201      	movs	r2, #1
 80089a8:	fa02 f303 	lsl.w	r3, r2, r3
 80089ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	6a1a      	ldr	r2, [r3, #32]
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	43db      	mvns	r3, r3
 80089b6:	401a      	ands	r2, r3
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	6a1a      	ldr	r2, [r3, #32]
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	f003 031f 	and.w	r3, r3, #31
 80089c6:	6879      	ldr	r1, [r7, #4]
 80089c8:	fa01 f303 	lsl.w	r3, r1, r3
 80089cc:	431a      	orrs	r2, r3
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	621a      	str	r2, [r3, #32]
}
 80089d2:	bf00      	nop
 80089d4:	371c      	adds	r7, #28
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr
	...

080089e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b085      	sub	sp, #20
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d101      	bne.n	80089f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80089f4:	2302      	movs	r3, #2
 80089f6:	e050      	b.n	8008a9a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2201      	movs	r2, #1
 80089fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2202      	movs	r2, #2
 8008a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	689b      	ldr	r3, [r3, #8]
 8008a16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	68fa      	ldr	r2, [r7, #12]
 8008a26:	4313      	orrs	r3, r2
 8008a28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	68fa      	ldr	r2, [r7, #12]
 8008a30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4a1c      	ldr	r2, [pc, #112]	; (8008aa8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d018      	beq.n	8008a6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a44:	d013      	beq.n	8008a6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a18      	ldr	r2, [pc, #96]	; (8008aac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d00e      	beq.n	8008a6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a16      	ldr	r2, [pc, #88]	; (8008ab0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d009      	beq.n	8008a6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4a15      	ldr	r2, [pc, #84]	; (8008ab4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d004      	beq.n	8008a6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a13      	ldr	r2, [pc, #76]	; (8008ab8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d10c      	bne.n	8008a88 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	68ba      	ldr	r2, [r7, #8]
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	68ba      	ldr	r2, [r7, #8]
 8008a86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2200      	movs	r2, #0
 8008a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a98:	2300      	movs	r3, #0
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3714      	adds	r7, #20
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa4:	4770      	bx	lr
 8008aa6:	bf00      	nop
 8008aa8:	40010000 	.word	0x40010000
 8008aac:	40000400 	.word	0x40000400
 8008ab0:	40000800 	.word	0x40000800
 8008ab4:	40000c00 	.word	0x40000c00
 8008ab8:	40014000 	.word	0x40014000

08008abc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b083      	sub	sp, #12
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ac4:	bf00      	nop
 8008ac6:	370c      	adds	r7, #12
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ace:	4770      	bx	lr

08008ad0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b083      	sub	sp, #12
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008ad8:	bf00      	nop
 8008ada:	370c      	adds	r7, #12
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr

08008ae4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b082      	sub	sp, #8
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d101      	bne.n	8008af6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008af2:	2301      	movs	r3, #1
 8008af4:	e03f      	b.n	8008b76 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008afc:	b2db      	uxtb	r3, r3
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d106      	bne.n	8008b10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2200      	movs	r2, #0
 8008b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f7fb f8cc 	bl	8003ca8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2224      	movs	r2, #36	; 0x24
 8008b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	68da      	ldr	r2, [r3, #12]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008b26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f000 f929 	bl	8008d80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	691a      	ldr	r2, [r3, #16]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008b3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	695a      	ldr	r2, [r3, #20]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008b4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	68da      	ldr	r2, [r3, #12]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008b5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2200      	movs	r2, #0
 8008b62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2220      	movs	r2, #32
 8008b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2220      	movs	r2, #32
 8008b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008b74:	2300      	movs	r3, #0
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3708      	adds	r7, #8
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}

08008b7e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b7e:	b580      	push	{r7, lr}
 8008b80:	b08a      	sub	sp, #40	; 0x28
 8008b82:	af02      	add	r7, sp, #8
 8008b84:	60f8      	str	r0, [r7, #12]
 8008b86:	60b9      	str	r1, [r7, #8]
 8008b88:	603b      	str	r3, [r7, #0]
 8008b8a:	4613      	mov	r3, r2
 8008b8c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b98:	b2db      	uxtb	r3, r3
 8008b9a:	2b20      	cmp	r3, #32
 8008b9c:	d17c      	bne.n	8008c98 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d002      	beq.n	8008baa <HAL_UART_Transmit+0x2c>
 8008ba4:	88fb      	ldrh	r3, [r7, #6]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d101      	bne.n	8008bae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008baa:	2301      	movs	r3, #1
 8008bac:	e075      	b.n	8008c9a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d101      	bne.n	8008bbc <HAL_UART_Transmit+0x3e>
 8008bb8:	2302      	movs	r3, #2
 8008bba:	e06e      	b.n	8008c9a <HAL_UART_Transmit+0x11c>
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2221      	movs	r2, #33	; 0x21
 8008bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008bd2:	f7fb f941 	bl	8003e58 <HAL_GetTick>
 8008bd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	88fa      	ldrh	r2, [r7, #6]
 8008bdc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	88fa      	ldrh	r2, [r7, #6]
 8008be2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bec:	d108      	bne.n	8008c00 <HAL_UART_Transmit+0x82>
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	691b      	ldr	r3, [r3, #16]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d104      	bne.n	8008c00 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	61bb      	str	r3, [r7, #24]
 8008bfe:	e003      	b.n	8008c08 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008c04:	2300      	movs	r3, #0
 8008c06:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008c10:	e02a      	b.n	8008c68 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	9300      	str	r3, [sp, #0]
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	2180      	movs	r1, #128	; 0x80
 8008c1c:	68f8      	ldr	r0, [r7, #12]
 8008c1e:	f000 f840 	bl	8008ca2 <UART_WaitOnFlagUntilTimeout>
 8008c22:	4603      	mov	r3, r0
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d001      	beq.n	8008c2c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008c28:	2303      	movs	r3, #3
 8008c2a:	e036      	b.n	8008c9a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008c2c:	69fb      	ldr	r3, [r7, #28]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d10b      	bne.n	8008c4a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008c32:	69bb      	ldr	r3, [r7, #24]
 8008c34:	881b      	ldrh	r3, [r3, #0]
 8008c36:	461a      	mov	r2, r3
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008c42:	69bb      	ldr	r3, [r7, #24]
 8008c44:	3302      	adds	r3, #2
 8008c46:	61bb      	str	r3, [r7, #24]
 8008c48:	e007      	b.n	8008c5a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008c4a:	69fb      	ldr	r3, [r7, #28]
 8008c4c:	781a      	ldrb	r2, [r3, #0]
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008c54:	69fb      	ldr	r3, [r7, #28]
 8008c56:	3301      	adds	r3, #1
 8008c58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008c5e:	b29b      	uxth	r3, r3
 8008c60:	3b01      	subs	r3, #1
 8008c62:	b29a      	uxth	r2, r3
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d1cf      	bne.n	8008c12 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	9300      	str	r3, [sp, #0]
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	2140      	movs	r1, #64	; 0x40
 8008c7c:	68f8      	ldr	r0, [r7, #12]
 8008c7e:	f000 f810 	bl	8008ca2 <UART_WaitOnFlagUntilTimeout>
 8008c82:	4603      	mov	r3, r0
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d001      	beq.n	8008c8c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008c88:	2303      	movs	r3, #3
 8008c8a:	e006      	b.n	8008c9a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2220      	movs	r2, #32
 8008c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008c94:	2300      	movs	r3, #0
 8008c96:	e000      	b.n	8008c9a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008c98:	2302      	movs	r3, #2
  }
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3720      	adds	r7, #32
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}

08008ca2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008ca2:	b580      	push	{r7, lr}
 8008ca4:	b090      	sub	sp, #64	; 0x40
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	60f8      	str	r0, [r7, #12]
 8008caa:	60b9      	str	r1, [r7, #8]
 8008cac:	603b      	str	r3, [r7, #0]
 8008cae:	4613      	mov	r3, r2
 8008cb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cb2:	e050      	b.n	8008d56 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008cb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008cba:	d04c      	beq.n	8008d56 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008cbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d007      	beq.n	8008cd2 <UART_WaitOnFlagUntilTimeout+0x30>
 8008cc2:	f7fb f8c9 	bl	8003e58 <HAL_GetTick>
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	1ad3      	subs	r3, r2, r3
 8008ccc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	d241      	bcs.n	8008d56 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	330c      	adds	r3, #12
 8008cd8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cdc:	e853 3f00 	ldrex	r3, [r3]
 8008ce0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	330c      	adds	r3, #12
 8008cf0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008cf2:	637a      	str	r2, [r7, #52]	; 0x34
 8008cf4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cf6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008cf8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008cfa:	e841 2300 	strex	r3, r2, [r1]
 8008cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d1e5      	bne.n	8008cd2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	3314      	adds	r3, #20
 8008d0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	e853 3f00 	ldrex	r3, [r3]
 8008d14:	613b      	str	r3, [r7, #16]
   return(result);
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	f023 0301 	bic.w	r3, r3, #1
 8008d1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	3314      	adds	r3, #20
 8008d24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d26:	623a      	str	r2, [r7, #32]
 8008d28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d2a:	69f9      	ldr	r1, [r7, #28]
 8008d2c:	6a3a      	ldr	r2, [r7, #32]
 8008d2e:	e841 2300 	strex	r3, r2, [r1]
 8008d32:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d34:	69bb      	ldr	r3, [r7, #24]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d1e5      	bne.n	8008d06 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2220      	movs	r2, #32
 8008d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	2220      	movs	r2, #32
 8008d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008d52:	2303      	movs	r3, #3
 8008d54:	e00f      	b.n	8008d76 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	681a      	ldr	r2, [r3, #0]
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	4013      	ands	r3, r2
 8008d60:	68ba      	ldr	r2, [r7, #8]
 8008d62:	429a      	cmp	r2, r3
 8008d64:	bf0c      	ite	eq
 8008d66:	2301      	moveq	r3, #1
 8008d68:	2300      	movne	r3, #0
 8008d6a:	b2db      	uxtb	r3, r3
 8008d6c:	461a      	mov	r2, r3
 8008d6e:	79fb      	ldrb	r3, [r7, #7]
 8008d70:	429a      	cmp	r2, r3
 8008d72:	d09f      	beq.n	8008cb4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008d74:	2300      	movs	r3, #0
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3740      	adds	r7, #64	; 0x40
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
	...

08008d80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d84:	b0c0      	sub	sp, #256	; 0x100
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	691b      	ldr	r3, [r3, #16]
 8008d94:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d9c:	68d9      	ldr	r1, [r3, #12]
 8008d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008da2:	681a      	ldr	r2, [r3, #0]
 8008da4:	ea40 0301 	orr.w	r3, r0, r1
 8008da8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dae:	689a      	ldr	r2, [r3, #8]
 8008db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008db4:	691b      	ldr	r3, [r3, #16]
 8008db6:	431a      	orrs	r2, r3
 8008db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dbc:	695b      	ldr	r3, [r3, #20]
 8008dbe:	431a      	orrs	r2, r3
 8008dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dc4:	69db      	ldr	r3, [r3, #28]
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	68db      	ldr	r3, [r3, #12]
 8008dd4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008dd8:	f021 010c 	bic.w	r1, r1, #12
 8008ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008de6:	430b      	orrs	r3, r1
 8008de8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	695b      	ldr	r3, [r3, #20]
 8008df2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dfa:	6999      	ldr	r1, [r3, #24]
 8008dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e00:	681a      	ldr	r2, [r3, #0]
 8008e02:	ea40 0301 	orr.w	r3, r0, r1
 8008e06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	4b8f      	ldr	r3, [pc, #572]	; (800904c <UART_SetConfig+0x2cc>)
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d005      	beq.n	8008e20 <UART_SetConfig+0xa0>
 8008e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e18:	681a      	ldr	r2, [r3, #0]
 8008e1a:	4b8d      	ldr	r3, [pc, #564]	; (8009050 <UART_SetConfig+0x2d0>)
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d104      	bne.n	8008e2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008e20:	f7fe fd74 	bl	800790c <HAL_RCC_GetPCLK2Freq>
 8008e24:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008e28:	e003      	b.n	8008e32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008e2a:	f7fe fd5b 	bl	80078e4 <HAL_RCC_GetPCLK1Freq>
 8008e2e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e36:	69db      	ldr	r3, [r3, #28]
 8008e38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e3c:	f040 810c 	bne.w	8009058 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008e40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e44:	2200      	movs	r2, #0
 8008e46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008e4a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008e4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008e52:	4622      	mov	r2, r4
 8008e54:	462b      	mov	r3, r5
 8008e56:	1891      	adds	r1, r2, r2
 8008e58:	65b9      	str	r1, [r7, #88]	; 0x58
 8008e5a:	415b      	adcs	r3, r3
 8008e5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008e62:	4621      	mov	r1, r4
 8008e64:	eb12 0801 	adds.w	r8, r2, r1
 8008e68:	4629      	mov	r1, r5
 8008e6a:	eb43 0901 	adc.w	r9, r3, r1
 8008e6e:	f04f 0200 	mov.w	r2, #0
 8008e72:	f04f 0300 	mov.w	r3, #0
 8008e76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008e7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008e7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008e82:	4690      	mov	r8, r2
 8008e84:	4699      	mov	r9, r3
 8008e86:	4623      	mov	r3, r4
 8008e88:	eb18 0303 	adds.w	r3, r8, r3
 8008e8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008e90:	462b      	mov	r3, r5
 8008e92:	eb49 0303 	adc.w	r3, r9, r3
 8008e96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008ea6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008eaa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008eae:	460b      	mov	r3, r1
 8008eb0:	18db      	adds	r3, r3, r3
 8008eb2:	653b      	str	r3, [r7, #80]	; 0x50
 8008eb4:	4613      	mov	r3, r2
 8008eb6:	eb42 0303 	adc.w	r3, r2, r3
 8008eba:	657b      	str	r3, [r7, #84]	; 0x54
 8008ebc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008ec0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008ec4:	f7f7 fee8 	bl	8000c98 <__aeabi_uldivmod>
 8008ec8:	4602      	mov	r2, r0
 8008eca:	460b      	mov	r3, r1
 8008ecc:	4b61      	ldr	r3, [pc, #388]	; (8009054 <UART_SetConfig+0x2d4>)
 8008ece:	fba3 2302 	umull	r2, r3, r3, r2
 8008ed2:	095b      	lsrs	r3, r3, #5
 8008ed4:	011c      	lsls	r4, r3, #4
 8008ed6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008eda:	2200      	movs	r2, #0
 8008edc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008ee0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008ee4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008ee8:	4642      	mov	r2, r8
 8008eea:	464b      	mov	r3, r9
 8008eec:	1891      	adds	r1, r2, r2
 8008eee:	64b9      	str	r1, [r7, #72]	; 0x48
 8008ef0:	415b      	adcs	r3, r3
 8008ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ef4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008ef8:	4641      	mov	r1, r8
 8008efa:	eb12 0a01 	adds.w	sl, r2, r1
 8008efe:	4649      	mov	r1, r9
 8008f00:	eb43 0b01 	adc.w	fp, r3, r1
 8008f04:	f04f 0200 	mov.w	r2, #0
 8008f08:	f04f 0300 	mov.w	r3, #0
 8008f0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008f10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008f14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008f18:	4692      	mov	sl, r2
 8008f1a:	469b      	mov	fp, r3
 8008f1c:	4643      	mov	r3, r8
 8008f1e:	eb1a 0303 	adds.w	r3, sl, r3
 8008f22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008f26:	464b      	mov	r3, r9
 8008f28:	eb4b 0303 	adc.w	r3, fp, r3
 8008f2c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	2200      	movs	r2, #0
 8008f38:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008f3c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008f40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008f44:	460b      	mov	r3, r1
 8008f46:	18db      	adds	r3, r3, r3
 8008f48:	643b      	str	r3, [r7, #64]	; 0x40
 8008f4a:	4613      	mov	r3, r2
 8008f4c:	eb42 0303 	adc.w	r3, r2, r3
 8008f50:	647b      	str	r3, [r7, #68]	; 0x44
 8008f52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008f56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008f5a:	f7f7 fe9d 	bl	8000c98 <__aeabi_uldivmod>
 8008f5e:	4602      	mov	r2, r0
 8008f60:	460b      	mov	r3, r1
 8008f62:	4611      	mov	r1, r2
 8008f64:	4b3b      	ldr	r3, [pc, #236]	; (8009054 <UART_SetConfig+0x2d4>)
 8008f66:	fba3 2301 	umull	r2, r3, r3, r1
 8008f6a:	095b      	lsrs	r3, r3, #5
 8008f6c:	2264      	movs	r2, #100	; 0x64
 8008f6e:	fb02 f303 	mul.w	r3, r2, r3
 8008f72:	1acb      	subs	r3, r1, r3
 8008f74:	00db      	lsls	r3, r3, #3
 8008f76:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008f7a:	4b36      	ldr	r3, [pc, #216]	; (8009054 <UART_SetConfig+0x2d4>)
 8008f7c:	fba3 2302 	umull	r2, r3, r3, r2
 8008f80:	095b      	lsrs	r3, r3, #5
 8008f82:	005b      	lsls	r3, r3, #1
 8008f84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008f88:	441c      	add	r4, r3
 8008f8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f8e:	2200      	movs	r2, #0
 8008f90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008f94:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008f98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008f9c:	4642      	mov	r2, r8
 8008f9e:	464b      	mov	r3, r9
 8008fa0:	1891      	adds	r1, r2, r2
 8008fa2:	63b9      	str	r1, [r7, #56]	; 0x38
 8008fa4:	415b      	adcs	r3, r3
 8008fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fa8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008fac:	4641      	mov	r1, r8
 8008fae:	1851      	adds	r1, r2, r1
 8008fb0:	6339      	str	r1, [r7, #48]	; 0x30
 8008fb2:	4649      	mov	r1, r9
 8008fb4:	414b      	adcs	r3, r1
 8008fb6:	637b      	str	r3, [r7, #52]	; 0x34
 8008fb8:	f04f 0200 	mov.w	r2, #0
 8008fbc:	f04f 0300 	mov.w	r3, #0
 8008fc0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008fc4:	4659      	mov	r1, fp
 8008fc6:	00cb      	lsls	r3, r1, #3
 8008fc8:	4651      	mov	r1, sl
 8008fca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008fce:	4651      	mov	r1, sl
 8008fd0:	00ca      	lsls	r2, r1, #3
 8008fd2:	4610      	mov	r0, r2
 8008fd4:	4619      	mov	r1, r3
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	4642      	mov	r2, r8
 8008fda:	189b      	adds	r3, r3, r2
 8008fdc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008fe0:	464b      	mov	r3, r9
 8008fe2:	460a      	mov	r2, r1
 8008fe4:	eb42 0303 	adc.w	r3, r2, r3
 8008fe8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008ff8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008ffc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009000:	460b      	mov	r3, r1
 8009002:	18db      	adds	r3, r3, r3
 8009004:	62bb      	str	r3, [r7, #40]	; 0x28
 8009006:	4613      	mov	r3, r2
 8009008:	eb42 0303 	adc.w	r3, r2, r3
 800900c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800900e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009012:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009016:	f7f7 fe3f 	bl	8000c98 <__aeabi_uldivmod>
 800901a:	4602      	mov	r2, r0
 800901c:	460b      	mov	r3, r1
 800901e:	4b0d      	ldr	r3, [pc, #52]	; (8009054 <UART_SetConfig+0x2d4>)
 8009020:	fba3 1302 	umull	r1, r3, r3, r2
 8009024:	095b      	lsrs	r3, r3, #5
 8009026:	2164      	movs	r1, #100	; 0x64
 8009028:	fb01 f303 	mul.w	r3, r1, r3
 800902c:	1ad3      	subs	r3, r2, r3
 800902e:	00db      	lsls	r3, r3, #3
 8009030:	3332      	adds	r3, #50	; 0x32
 8009032:	4a08      	ldr	r2, [pc, #32]	; (8009054 <UART_SetConfig+0x2d4>)
 8009034:	fba2 2303 	umull	r2, r3, r2, r3
 8009038:	095b      	lsrs	r3, r3, #5
 800903a:	f003 0207 	and.w	r2, r3, #7
 800903e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4422      	add	r2, r4
 8009046:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009048:	e105      	b.n	8009256 <UART_SetConfig+0x4d6>
 800904a:	bf00      	nop
 800904c:	40011000 	.word	0x40011000
 8009050:	40011400 	.word	0x40011400
 8009054:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009058:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800905c:	2200      	movs	r2, #0
 800905e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009062:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009066:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800906a:	4642      	mov	r2, r8
 800906c:	464b      	mov	r3, r9
 800906e:	1891      	adds	r1, r2, r2
 8009070:	6239      	str	r1, [r7, #32]
 8009072:	415b      	adcs	r3, r3
 8009074:	627b      	str	r3, [r7, #36]	; 0x24
 8009076:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800907a:	4641      	mov	r1, r8
 800907c:	1854      	adds	r4, r2, r1
 800907e:	4649      	mov	r1, r9
 8009080:	eb43 0501 	adc.w	r5, r3, r1
 8009084:	f04f 0200 	mov.w	r2, #0
 8009088:	f04f 0300 	mov.w	r3, #0
 800908c:	00eb      	lsls	r3, r5, #3
 800908e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009092:	00e2      	lsls	r2, r4, #3
 8009094:	4614      	mov	r4, r2
 8009096:	461d      	mov	r5, r3
 8009098:	4643      	mov	r3, r8
 800909a:	18e3      	adds	r3, r4, r3
 800909c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80090a0:	464b      	mov	r3, r9
 80090a2:	eb45 0303 	adc.w	r3, r5, r3
 80090a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80090aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	2200      	movs	r2, #0
 80090b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80090b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80090ba:	f04f 0200 	mov.w	r2, #0
 80090be:	f04f 0300 	mov.w	r3, #0
 80090c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80090c6:	4629      	mov	r1, r5
 80090c8:	008b      	lsls	r3, r1, #2
 80090ca:	4621      	mov	r1, r4
 80090cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80090d0:	4621      	mov	r1, r4
 80090d2:	008a      	lsls	r2, r1, #2
 80090d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80090d8:	f7f7 fdde 	bl	8000c98 <__aeabi_uldivmod>
 80090dc:	4602      	mov	r2, r0
 80090de:	460b      	mov	r3, r1
 80090e0:	4b60      	ldr	r3, [pc, #384]	; (8009264 <UART_SetConfig+0x4e4>)
 80090e2:	fba3 2302 	umull	r2, r3, r3, r2
 80090e6:	095b      	lsrs	r3, r3, #5
 80090e8:	011c      	lsls	r4, r3, #4
 80090ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80090ee:	2200      	movs	r2, #0
 80090f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80090f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80090f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80090fc:	4642      	mov	r2, r8
 80090fe:	464b      	mov	r3, r9
 8009100:	1891      	adds	r1, r2, r2
 8009102:	61b9      	str	r1, [r7, #24]
 8009104:	415b      	adcs	r3, r3
 8009106:	61fb      	str	r3, [r7, #28]
 8009108:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800910c:	4641      	mov	r1, r8
 800910e:	1851      	adds	r1, r2, r1
 8009110:	6139      	str	r1, [r7, #16]
 8009112:	4649      	mov	r1, r9
 8009114:	414b      	adcs	r3, r1
 8009116:	617b      	str	r3, [r7, #20]
 8009118:	f04f 0200 	mov.w	r2, #0
 800911c:	f04f 0300 	mov.w	r3, #0
 8009120:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009124:	4659      	mov	r1, fp
 8009126:	00cb      	lsls	r3, r1, #3
 8009128:	4651      	mov	r1, sl
 800912a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800912e:	4651      	mov	r1, sl
 8009130:	00ca      	lsls	r2, r1, #3
 8009132:	4610      	mov	r0, r2
 8009134:	4619      	mov	r1, r3
 8009136:	4603      	mov	r3, r0
 8009138:	4642      	mov	r2, r8
 800913a:	189b      	adds	r3, r3, r2
 800913c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009140:	464b      	mov	r3, r9
 8009142:	460a      	mov	r2, r1
 8009144:	eb42 0303 	adc.w	r3, r2, r3
 8009148:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800914c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009150:	685b      	ldr	r3, [r3, #4]
 8009152:	2200      	movs	r2, #0
 8009154:	67bb      	str	r3, [r7, #120]	; 0x78
 8009156:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009158:	f04f 0200 	mov.w	r2, #0
 800915c:	f04f 0300 	mov.w	r3, #0
 8009160:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009164:	4649      	mov	r1, r9
 8009166:	008b      	lsls	r3, r1, #2
 8009168:	4641      	mov	r1, r8
 800916a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800916e:	4641      	mov	r1, r8
 8009170:	008a      	lsls	r2, r1, #2
 8009172:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009176:	f7f7 fd8f 	bl	8000c98 <__aeabi_uldivmod>
 800917a:	4602      	mov	r2, r0
 800917c:	460b      	mov	r3, r1
 800917e:	4b39      	ldr	r3, [pc, #228]	; (8009264 <UART_SetConfig+0x4e4>)
 8009180:	fba3 1302 	umull	r1, r3, r3, r2
 8009184:	095b      	lsrs	r3, r3, #5
 8009186:	2164      	movs	r1, #100	; 0x64
 8009188:	fb01 f303 	mul.w	r3, r1, r3
 800918c:	1ad3      	subs	r3, r2, r3
 800918e:	011b      	lsls	r3, r3, #4
 8009190:	3332      	adds	r3, #50	; 0x32
 8009192:	4a34      	ldr	r2, [pc, #208]	; (8009264 <UART_SetConfig+0x4e4>)
 8009194:	fba2 2303 	umull	r2, r3, r2, r3
 8009198:	095b      	lsrs	r3, r3, #5
 800919a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800919e:	441c      	add	r4, r3
 80091a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80091a4:	2200      	movs	r2, #0
 80091a6:	673b      	str	r3, [r7, #112]	; 0x70
 80091a8:	677a      	str	r2, [r7, #116]	; 0x74
 80091aa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80091ae:	4642      	mov	r2, r8
 80091b0:	464b      	mov	r3, r9
 80091b2:	1891      	adds	r1, r2, r2
 80091b4:	60b9      	str	r1, [r7, #8]
 80091b6:	415b      	adcs	r3, r3
 80091b8:	60fb      	str	r3, [r7, #12]
 80091ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80091be:	4641      	mov	r1, r8
 80091c0:	1851      	adds	r1, r2, r1
 80091c2:	6039      	str	r1, [r7, #0]
 80091c4:	4649      	mov	r1, r9
 80091c6:	414b      	adcs	r3, r1
 80091c8:	607b      	str	r3, [r7, #4]
 80091ca:	f04f 0200 	mov.w	r2, #0
 80091ce:	f04f 0300 	mov.w	r3, #0
 80091d2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80091d6:	4659      	mov	r1, fp
 80091d8:	00cb      	lsls	r3, r1, #3
 80091da:	4651      	mov	r1, sl
 80091dc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80091e0:	4651      	mov	r1, sl
 80091e2:	00ca      	lsls	r2, r1, #3
 80091e4:	4610      	mov	r0, r2
 80091e6:	4619      	mov	r1, r3
 80091e8:	4603      	mov	r3, r0
 80091ea:	4642      	mov	r2, r8
 80091ec:	189b      	adds	r3, r3, r2
 80091ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80091f0:	464b      	mov	r3, r9
 80091f2:	460a      	mov	r2, r1
 80091f4:	eb42 0303 	adc.w	r3, r2, r3
 80091f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80091fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	2200      	movs	r2, #0
 8009202:	663b      	str	r3, [r7, #96]	; 0x60
 8009204:	667a      	str	r2, [r7, #100]	; 0x64
 8009206:	f04f 0200 	mov.w	r2, #0
 800920a:	f04f 0300 	mov.w	r3, #0
 800920e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009212:	4649      	mov	r1, r9
 8009214:	008b      	lsls	r3, r1, #2
 8009216:	4641      	mov	r1, r8
 8009218:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800921c:	4641      	mov	r1, r8
 800921e:	008a      	lsls	r2, r1, #2
 8009220:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009224:	f7f7 fd38 	bl	8000c98 <__aeabi_uldivmod>
 8009228:	4602      	mov	r2, r0
 800922a:	460b      	mov	r3, r1
 800922c:	4b0d      	ldr	r3, [pc, #52]	; (8009264 <UART_SetConfig+0x4e4>)
 800922e:	fba3 1302 	umull	r1, r3, r3, r2
 8009232:	095b      	lsrs	r3, r3, #5
 8009234:	2164      	movs	r1, #100	; 0x64
 8009236:	fb01 f303 	mul.w	r3, r1, r3
 800923a:	1ad3      	subs	r3, r2, r3
 800923c:	011b      	lsls	r3, r3, #4
 800923e:	3332      	adds	r3, #50	; 0x32
 8009240:	4a08      	ldr	r2, [pc, #32]	; (8009264 <UART_SetConfig+0x4e4>)
 8009242:	fba2 2303 	umull	r2, r3, r2, r3
 8009246:	095b      	lsrs	r3, r3, #5
 8009248:	f003 020f 	and.w	r2, r3, #15
 800924c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	4422      	add	r2, r4
 8009254:	609a      	str	r2, [r3, #8]
}
 8009256:	bf00      	nop
 8009258:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800925c:	46bd      	mov	sp, r7
 800925e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009262:	bf00      	nop
 8009264:	51eb851f 	.word	0x51eb851f

08009268 <__errno>:
 8009268:	4b01      	ldr	r3, [pc, #4]	; (8009270 <__errno+0x8>)
 800926a:	6818      	ldr	r0, [r3, #0]
 800926c:	4770      	bx	lr
 800926e:	bf00      	nop
 8009270:	2000001c 	.word	0x2000001c

08009274 <__libc_init_array>:
 8009274:	b570      	push	{r4, r5, r6, lr}
 8009276:	4d0d      	ldr	r5, [pc, #52]	; (80092ac <__libc_init_array+0x38>)
 8009278:	4c0d      	ldr	r4, [pc, #52]	; (80092b0 <__libc_init_array+0x3c>)
 800927a:	1b64      	subs	r4, r4, r5
 800927c:	10a4      	asrs	r4, r4, #2
 800927e:	2600      	movs	r6, #0
 8009280:	42a6      	cmp	r6, r4
 8009282:	d109      	bne.n	8009298 <__libc_init_array+0x24>
 8009284:	4d0b      	ldr	r5, [pc, #44]	; (80092b4 <__libc_init_array+0x40>)
 8009286:	4c0c      	ldr	r4, [pc, #48]	; (80092b8 <__libc_init_array+0x44>)
 8009288:	f004 fe98 	bl	800dfbc <_init>
 800928c:	1b64      	subs	r4, r4, r5
 800928e:	10a4      	asrs	r4, r4, #2
 8009290:	2600      	movs	r6, #0
 8009292:	42a6      	cmp	r6, r4
 8009294:	d105      	bne.n	80092a2 <__libc_init_array+0x2e>
 8009296:	bd70      	pop	{r4, r5, r6, pc}
 8009298:	f855 3b04 	ldr.w	r3, [r5], #4
 800929c:	4798      	blx	r3
 800929e:	3601      	adds	r6, #1
 80092a0:	e7ee      	b.n	8009280 <__libc_init_array+0xc>
 80092a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80092a6:	4798      	blx	r3
 80092a8:	3601      	adds	r6, #1
 80092aa:	e7f2      	b.n	8009292 <__libc_init_array+0x1e>
 80092ac:	0800f06c 	.word	0x0800f06c
 80092b0:	0800f06c 	.word	0x0800f06c
 80092b4:	0800f06c 	.word	0x0800f06c
 80092b8:	0800f070 	.word	0x0800f070

080092bc <memcpy>:
 80092bc:	440a      	add	r2, r1
 80092be:	4291      	cmp	r1, r2
 80092c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80092c4:	d100      	bne.n	80092c8 <memcpy+0xc>
 80092c6:	4770      	bx	lr
 80092c8:	b510      	push	{r4, lr}
 80092ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092d2:	4291      	cmp	r1, r2
 80092d4:	d1f9      	bne.n	80092ca <memcpy+0xe>
 80092d6:	bd10      	pop	{r4, pc}

080092d8 <memset>:
 80092d8:	4402      	add	r2, r0
 80092da:	4603      	mov	r3, r0
 80092dc:	4293      	cmp	r3, r2
 80092de:	d100      	bne.n	80092e2 <memset+0xa>
 80092e0:	4770      	bx	lr
 80092e2:	f803 1b01 	strb.w	r1, [r3], #1
 80092e6:	e7f9      	b.n	80092dc <memset+0x4>

080092e8 <__cvt>:
 80092e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092ec:	ec55 4b10 	vmov	r4, r5, d0
 80092f0:	2d00      	cmp	r5, #0
 80092f2:	460e      	mov	r6, r1
 80092f4:	4619      	mov	r1, r3
 80092f6:	462b      	mov	r3, r5
 80092f8:	bfbb      	ittet	lt
 80092fa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80092fe:	461d      	movlt	r5, r3
 8009300:	2300      	movge	r3, #0
 8009302:	232d      	movlt	r3, #45	; 0x2d
 8009304:	700b      	strb	r3, [r1, #0]
 8009306:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009308:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800930c:	4691      	mov	r9, r2
 800930e:	f023 0820 	bic.w	r8, r3, #32
 8009312:	bfbc      	itt	lt
 8009314:	4622      	movlt	r2, r4
 8009316:	4614      	movlt	r4, r2
 8009318:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800931c:	d005      	beq.n	800932a <__cvt+0x42>
 800931e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009322:	d100      	bne.n	8009326 <__cvt+0x3e>
 8009324:	3601      	adds	r6, #1
 8009326:	2102      	movs	r1, #2
 8009328:	e000      	b.n	800932c <__cvt+0x44>
 800932a:	2103      	movs	r1, #3
 800932c:	ab03      	add	r3, sp, #12
 800932e:	9301      	str	r3, [sp, #4]
 8009330:	ab02      	add	r3, sp, #8
 8009332:	9300      	str	r3, [sp, #0]
 8009334:	ec45 4b10 	vmov	d0, r4, r5
 8009338:	4653      	mov	r3, sl
 800933a:	4632      	mov	r2, r6
 800933c:	f001 fdbc 	bl	800aeb8 <_dtoa_r>
 8009340:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009344:	4607      	mov	r7, r0
 8009346:	d102      	bne.n	800934e <__cvt+0x66>
 8009348:	f019 0f01 	tst.w	r9, #1
 800934c:	d022      	beq.n	8009394 <__cvt+0xac>
 800934e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009352:	eb07 0906 	add.w	r9, r7, r6
 8009356:	d110      	bne.n	800937a <__cvt+0x92>
 8009358:	783b      	ldrb	r3, [r7, #0]
 800935a:	2b30      	cmp	r3, #48	; 0x30
 800935c:	d10a      	bne.n	8009374 <__cvt+0x8c>
 800935e:	2200      	movs	r2, #0
 8009360:	2300      	movs	r3, #0
 8009362:	4620      	mov	r0, r4
 8009364:	4629      	mov	r1, r5
 8009366:	f7f7 fbb7 	bl	8000ad8 <__aeabi_dcmpeq>
 800936a:	b918      	cbnz	r0, 8009374 <__cvt+0x8c>
 800936c:	f1c6 0601 	rsb	r6, r6, #1
 8009370:	f8ca 6000 	str.w	r6, [sl]
 8009374:	f8da 3000 	ldr.w	r3, [sl]
 8009378:	4499      	add	r9, r3
 800937a:	2200      	movs	r2, #0
 800937c:	2300      	movs	r3, #0
 800937e:	4620      	mov	r0, r4
 8009380:	4629      	mov	r1, r5
 8009382:	f7f7 fba9 	bl	8000ad8 <__aeabi_dcmpeq>
 8009386:	b108      	cbz	r0, 800938c <__cvt+0xa4>
 8009388:	f8cd 900c 	str.w	r9, [sp, #12]
 800938c:	2230      	movs	r2, #48	; 0x30
 800938e:	9b03      	ldr	r3, [sp, #12]
 8009390:	454b      	cmp	r3, r9
 8009392:	d307      	bcc.n	80093a4 <__cvt+0xbc>
 8009394:	9b03      	ldr	r3, [sp, #12]
 8009396:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009398:	1bdb      	subs	r3, r3, r7
 800939a:	4638      	mov	r0, r7
 800939c:	6013      	str	r3, [r2, #0]
 800939e:	b004      	add	sp, #16
 80093a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093a4:	1c59      	adds	r1, r3, #1
 80093a6:	9103      	str	r1, [sp, #12]
 80093a8:	701a      	strb	r2, [r3, #0]
 80093aa:	e7f0      	b.n	800938e <__cvt+0xa6>

080093ac <__exponent>:
 80093ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093ae:	4603      	mov	r3, r0
 80093b0:	2900      	cmp	r1, #0
 80093b2:	bfb8      	it	lt
 80093b4:	4249      	neglt	r1, r1
 80093b6:	f803 2b02 	strb.w	r2, [r3], #2
 80093ba:	bfb4      	ite	lt
 80093bc:	222d      	movlt	r2, #45	; 0x2d
 80093be:	222b      	movge	r2, #43	; 0x2b
 80093c0:	2909      	cmp	r1, #9
 80093c2:	7042      	strb	r2, [r0, #1]
 80093c4:	dd2a      	ble.n	800941c <__exponent+0x70>
 80093c6:	f10d 0407 	add.w	r4, sp, #7
 80093ca:	46a4      	mov	ip, r4
 80093cc:	270a      	movs	r7, #10
 80093ce:	46a6      	mov	lr, r4
 80093d0:	460a      	mov	r2, r1
 80093d2:	fb91 f6f7 	sdiv	r6, r1, r7
 80093d6:	fb07 1516 	mls	r5, r7, r6, r1
 80093da:	3530      	adds	r5, #48	; 0x30
 80093dc:	2a63      	cmp	r2, #99	; 0x63
 80093de:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80093e2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80093e6:	4631      	mov	r1, r6
 80093e8:	dcf1      	bgt.n	80093ce <__exponent+0x22>
 80093ea:	3130      	adds	r1, #48	; 0x30
 80093ec:	f1ae 0502 	sub.w	r5, lr, #2
 80093f0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80093f4:	1c44      	adds	r4, r0, #1
 80093f6:	4629      	mov	r1, r5
 80093f8:	4561      	cmp	r1, ip
 80093fa:	d30a      	bcc.n	8009412 <__exponent+0x66>
 80093fc:	f10d 0209 	add.w	r2, sp, #9
 8009400:	eba2 020e 	sub.w	r2, r2, lr
 8009404:	4565      	cmp	r5, ip
 8009406:	bf88      	it	hi
 8009408:	2200      	movhi	r2, #0
 800940a:	4413      	add	r3, r2
 800940c:	1a18      	subs	r0, r3, r0
 800940e:	b003      	add	sp, #12
 8009410:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009412:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009416:	f804 2f01 	strb.w	r2, [r4, #1]!
 800941a:	e7ed      	b.n	80093f8 <__exponent+0x4c>
 800941c:	2330      	movs	r3, #48	; 0x30
 800941e:	3130      	adds	r1, #48	; 0x30
 8009420:	7083      	strb	r3, [r0, #2]
 8009422:	70c1      	strb	r1, [r0, #3]
 8009424:	1d03      	adds	r3, r0, #4
 8009426:	e7f1      	b.n	800940c <__exponent+0x60>

08009428 <_printf_float>:
 8009428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800942c:	ed2d 8b02 	vpush	{d8}
 8009430:	b08d      	sub	sp, #52	; 0x34
 8009432:	460c      	mov	r4, r1
 8009434:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009438:	4616      	mov	r6, r2
 800943a:	461f      	mov	r7, r3
 800943c:	4605      	mov	r5, r0
 800943e:	f002 fe99 	bl	800c174 <_localeconv_r>
 8009442:	f8d0 a000 	ldr.w	sl, [r0]
 8009446:	4650      	mov	r0, sl
 8009448:	f7f6 feca 	bl	80001e0 <strlen>
 800944c:	2300      	movs	r3, #0
 800944e:	930a      	str	r3, [sp, #40]	; 0x28
 8009450:	6823      	ldr	r3, [r4, #0]
 8009452:	9305      	str	r3, [sp, #20]
 8009454:	f8d8 3000 	ldr.w	r3, [r8]
 8009458:	f894 b018 	ldrb.w	fp, [r4, #24]
 800945c:	3307      	adds	r3, #7
 800945e:	f023 0307 	bic.w	r3, r3, #7
 8009462:	f103 0208 	add.w	r2, r3, #8
 8009466:	f8c8 2000 	str.w	r2, [r8]
 800946a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800946e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009472:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009476:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800947a:	9307      	str	r3, [sp, #28]
 800947c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009480:	ee08 0a10 	vmov	s16, r0
 8009484:	4b9f      	ldr	r3, [pc, #636]	; (8009704 <_printf_float+0x2dc>)
 8009486:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800948a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800948e:	f7f7 fb55 	bl	8000b3c <__aeabi_dcmpun>
 8009492:	bb88      	cbnz	r0, 80094f8 <_printf_float+0xd0>
 8009494:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009498:	4b9a      	ldr	r3, [pc, #616]	; (8009704 <_printf_float+0x2dc>)
 800949a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800949e:	f7f7 fb2f 	bl	8000b00 <__aeabi_dcmple>
 80094a2:	bb48      	cbnz	r0, 80094f8 <_printf_float+0xd0>
 80094a4:	2200      	movs	r2, #0
 80094a6:	2300      	movs	r3, #0
 80094a8:	4640      	mov	r0, r8
 80094aa:	4649      	mov	r1, r9
 80094ac:	f7f7 fb1e 	bl	8000aec <__aeabi_dcmplt>
 80094b0:	b110      	cbz	r0, 80094b8 <_printf_float+0x90>
 80094b2:	232d      	movs	r3, #45	; 0x2d
 80094b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094b8:	4b93      	ldr	r3, [pc, #588]	; (8009708 <_printf_float+0x2e0>)
 80094ba:	4894      	ldr	r0, [pc, #592]	; (800970c <_printf_float+0x2e4>)
 80094bc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80094c0:	bf94      	ite	ls
 80094c2:	4698      	movls	r8, r3
 80094c4:	4680      	movhi	r8, r0
 80094c6:	2303      	movs	r3, #3
 80094c8:	6123      	str	r3, [r4, #16]
 80094ca:	9b05      	ldr	r3, [sp, #20]
 80094cc:	f023 0204 	bic.w	r2, r3, #4
 80094d0:	6022      	str	r2, [r4, #0]
 80094d2:	f04f 0900 	mov.w	r9, #0
 80094d6:	9700      	str	r7, [sp, #0]
 80094d8:	4633      	mov	r3, r6
 80094da:	aa0b      	add	r2, sp, #44	; 0x2c
 80094dc:	4621      	mov	r1, r4
 80094de:	4628      	mov	r0, r5
 80094e0:	f000 f9d8 	bl	8009894 <_printf_common>
 80094e4:	3001      	adds	r0, #1
 80094e6:	f040 8090 	bne.w	800960a <_printf_float+0x1e2>
 80094ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094ee:	b00d      	add	sp, #52	; 0x34
 80094f0:	ecbd 8b02 	vpop	{d8}
 80094f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094f8:	4642      	mov	r2, r8
 80094fa:	464b      	mov	r3, r9
 80094fc:	4640      	mov	r0, r8
 80094fe:	4649      	mov	r1, r9
 8009500:	f7f7 fb1c 	bl	8000b3c <__aeabi_dcmpun>
 8009504:	b140      	cbz	r0, 8009518 <_printf_float+0xf0>
 8009506:	464b      	mov	r3, r9
 8009508:	2b00      	cmp	r3, #0
 800950a:	bfbc      	itt	lt
 800950c:	232d      	movlt	r3, #45	; 0x2d
 800950e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009512:	487f      	ldr	r0, [pc, #508]	; (8009710 <_printf_float+0x2e8>)
 8009514:	4b7f      	ldr	r3, [pc, #508]	; (8009714 <_printf_float+0x2ec>)
 8009516:	e7d1      	b.n	80094bc <_printf_float+0x94>
 8009518:	6863      	ldr	r3, [r4, #4]
 800951a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800951e:	9206      	str	r2, [sp, #24]
 8009520:	1c5a      	adds	r2, r3, #1
 8009522:	d13f      	bne.n	80095a4 <_printf_float+0x17c>
 8009524:	2306      	movs	r3, #6
 8009526:	6063      	str	r3, [r4, #4]
 8009528:	9b05      	ldr	r3, [sp, #20]
 800952a:	6861      	ldr	r1, [r4, #4]
 800952c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009530:	2300      	movs	r3, #0
 8009532:	9303      	str	r3, [sp, #12]
 8009534:	ab0a      	add	r3, sp, #40	; 0x28
 8009536:	e9cd b301 	strd	fp, r3, [sp, #4]
 800953a:	ab09      	add	r3, sp, #36	; 0x24
 800953c:	ec49 8b10 	vmov	d0, r8, r9
 8009540:	9300      	str	r3, [sp, #0]
 8009542:	6022      	str	r2, [r4, #0]
 8009544:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009548:	4628      	mov	r0, r5
 800954a:	f7ff fecd 	bl	80092e8 <__cvt>
 800954e:	9b06      	ldr	r3, [sp, #24]
 8009550:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009552:	2b47      	cmp	r3, #71	; 0x47
 8009554:	4680      	mov	r8, r0
 8009556:	d108      	bne.n	800956a <_printf_float+0x142>
 8009558:	1cc8      	adds	r0, r1, #3
 800955a:	db02      	blt.n	8009562 <_printf_float+0x13a>
 800955c:	6863      	ldr	r3, [r4, #4]
 800955e:	4299      	cmp	r1, r3
 8009560:	dd41      	ble.n	80095e6 <_printf_float+0x1be>
 8009562:	f1ab 0b02 	sub.w	fp, fp, #2
 8009566:	fa5f fb8b 	uxtb.w	fp, fp
 800956a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800956e:	d820      	bhi.n	80095b2 <_printf_float+0x18a>
 8009570:	3901      	subs	r1, #1
 8009572:	465a      	mov	r2, fp
 8009574:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009578:	9109      	str	r1, [sp, #36]	; 0x24
 800957a:	f7ff ff17 	bl	80093ac <__exponent>
 800957e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009580:	1813      	adds	r3, r2, r0
 8009582:	2a01      	cmp	r2, #1
 8009584:	4681      	mov	r9, r0
 8009586:	6123      	str	r3, [r4, #16]
 8009588:	dc02      	bgt.n	8009590 <_printf_float+0x168>
 800958a:	6822      	ldr	r2, [r4, #0]
 800958c:	07d2      	lsls	r2, r2, #31
 800958e:	d501      	bpl.n	8009594 <_printf_float+0x16c>
 8009590:	3301      	adds	r3, #1
 8009592:	6123      	str	r3, [r4, #16]
 8009594:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009598:	2b00      	cmp	r3, #0
 800959a:	d09c      	beq.n	80094d6 <_printf_float+0xae>
 800959c:	232d      	movs	r3, #45	; 0x2d
 800959e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095a2:	e798      	b.n	80094d6 <_printf_float+0xae>
 80095a4:	9a06      	ldr	r2, [sp, #24]
 80095a6:	2a47      	cmp	r2, #71	; 0x47
 80095a8:	d1be      	bne.n	8009528 <_printf_float+0x100>
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d1bc      	bne.n	8009528 <_printf_float+0x100>
 80095ae:	2301      	movs	r3, #1
 80095b0:	e7b9      	b.n	8009526 <_printf_float+0xfe>
 80095b2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80095b6:	d118      	bne.n	80095ea <_printf_float+0x1c2>
 80095b8:	2900      	cmp	r1, #0
 80095ba:	6863      	ldr	r3, [r4, #4]
 80095bc:	dd0b      	ble.n	80095d6 <_printf_float+0x1ae>
 80095be:	6121      	str	r1, [r4, #16]
 80095c0:	b913      	cbnz	r3, 80095c8 <_printf_float+0x1a0>
 80095c2:	6822      	ldr	r2, [r4, #0]
 80095c4:	07d0      	lsls	r0, r2, #31
 80095c6:	d502      	bpl.n	80095ce <_printf_float+0x1a6>
 80095c8:	3301      	adds	r3, #1
 80095ca:	440b      	add	r3, r1
 80095cc:	6123      	str	r3, [r4, #16]
 80095ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80095d0:	f04f 0900 	mov.w	r9, #0
 80095d4:	e7de      	b.n	8009594 <_printf_float+0x16c>
 80095d6:	b913      	cbnz	r3, 80095de <_printf_float+0x1b6>
 80095d8:	6822      	ldr	r2, [r4, #0]
 80095da:	07d2      	lsls	r2, r2, #31
 80095dc:	d501      	bpl.n	80095e2 <_printf_float+0x1ba>
 80095de:	3302      	adds	r3, #2
 80095e0:	e7f4      	b.n	80095cc <_printf_float+0x1a4>
 80095e2:	2301      	movs	r3, #1
 80095e4:	e7f2      	b.n	80095cc <_printf_float+0x1a4>
 80095e6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80095ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095ec:	4299      	cmp	r1, r3
 80095ee:	db05      	blt.n	80095fc <_printf_float+0x1d4>
 80095f0:	6823      	ldr	r3, [r4, #0]
 80095f2:	6121      	str	r1, [r4, #16]
 80095f4:	07d8      	lsls	r0, r3, #31
 80095f6:	d5ea      	bpl.n	80095ce <_printf_float+0x1a6>
 80095f8:	1c4b      	adds	r3, r1, #1
 80095fa:	e7e7      	b.n	80095cc <_printf_float+0x1a4>
 80095fc:	2900      	cmp	r1, #0
 80095fe:	bfd4      	ite	le
 8009600:	f1c1 0202 	rsble	r2, r1, #2
 8009604:	2201      	movgt	r2, #1
 8009606:	4413      	add	r3, r2
 8009608:	e7e0      	b.n	80095cc <_printf_float+0x1a4>
 800960a:	6823      	ldr	r3, [r4, #0]
 800960c:	055a      	lsls	r2, r3, #21
 800960e:	d407      	bmi.n	8009620 <_printf_float+0x1f8>
 8009610:	6923      	ldr	r3, [r4, #16]
 8009612:	4642      	mov	r2, r8
 8009614:	4631      	mov	r1, r6
 8009616:	4628      	mov	r0, r5
 8009618:	47b8      	blx	r7
 800961a:	3001      	adds	r0, #1
 800961c:	d12c      	bne.n	8009678 <_printf_float+0x250>
 800961e:	e764      	b.n	80094ea <_printf_float+0xc2>
 8009620:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009624:	f240 80e0 	bls.w	80097e8 <_printf_float+0x3c0>
 8009628:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800962c:	2200      	movs	r2, #0
 800962e:	2300      	movs	r3, #0
 8009630:	f7f7 fa52 	bl	8000ad8 <__aeabi_dcmpeq>
 8009634:	2800      	cmp	r0, #0
 8009636:	d034      	beq.n	80096a2 <_printf_float+0x27a>
 8009638:	4a37      	ldr	r2, [pc, #220]	; (8009718 <_printf_float+0x2f0>)
 800963a:	2301      	movs	r3, #1
 800963c:	4631      	mov	r1, r6
 800963e:	4628      	mov	r0, r5
 8009640:	47b8      	blx	r7
 8009642:	3001      	adds	r0, #1
 8009644:	f43f af51 	beq.w	80094ea <_printf_float+0xc2>
 8009648:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800964c:	429a      	cmp	r2, r3
 800964e:	db02      	blt.n	8009656 <_printf_float+0x22e>
 8009650:	6823      	ldr	r3, [r4, #0]
 8009652:	07d8      	lsls	r0, r3, #31
 8009654:	d510      	bpl.n	8009678 <_printf_float+0x250>
 8009656:	ee18 3a10 	vmov	r3, s16
 800965a:	4652      	mov	r2, sl
 800965c:	4631      	mov	r1, r6
 800965e:	4628      	mov	r0, r5
 8009660:	47b8      	blx	r7
 8009662:	3001      	adds	r0, #1
 8009664:	f43f af41 	beq.w	80094ea <_printf_float+0xc2>
 8009668:	f04f 0800 	mov.w	r8, #0
 800966c:	f104 091a 	add.w	r9, r4, #26
 8009670:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009672:	3b01      	subs	r3, #1
 8009674:	4543      	cmp	r3, r8
 8009676:	dc09      	bgt.n	800968c <_printf_float+0x264>
 8009678:	6823      	ldr	r3, [r4, #0]
 800967a:	079b      	lsls	r3, r3, #30
 800967c:	f100 8105 	bmi.w	800988a <_printf_float+0x462>
 8009680:	68e0      	ldr	r0, [r4, #12]
 8009682:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009684:	4298      	cmp	r0, r3
 8009686:	bfb8      	it	lt
 8009688:	4618      	movlt	r0, r3
 800968a:	e730      	b.n	80094ee <_printf_float+0xc6>
 800968c:	2301      	movs	r3, #1
 800968e:	464a      	mov	r2, r9
 8009690:	4631      	mov	r1, r6
 8009692:	4628      	mov	r0, r5
 8009694:	47b8      	blx	r7
 8009696:	3001      	adds	r0, #1
 8009698:	f43f af27 	beq.w	80094ea <_printf_float+0xc2>
 800969c:	f108 0801 	add.w	r8, r8, #1
 80096a0:	e7e6      	b.n	8009670 <_printf_float+0x248>
 80096a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	dc39      	bgt.n	800971c <_printf_float+0x2f4>
 80096a8:	4a1b      	ldr	r2, [pc, #108]	; (8009718 <_printf_float+0x2f0>)
 80096aa:	2301      	movs	r3, #1
 80096ac:	4631      	mov	r1, r6
 80096ae:	4628      	mov	r0, r5
 80096b0:	47b8      	blx	r7
 80096b2:	3001      	adds	r0, #1
 80096b4:	f43f af19 	beq.w	80094ea <_printf_float+0xc2>
 80096b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80096bc:	4313      	orrs	r3, r2
 80096be:	d102      	bne.n	80096c6 <_printf_float+0x29e>
 80096c0:	6823      	ldr	r3, [r4, #0]
 80096c2:	07d9      	lsls	r1, r3, #31
 80096c4:	d5d8      	bpl.n	8009678 <_printf_float+0x250>
 80096c6:	ee18 3a10 	vmov	r3, s16
 80096ca:	4652      	mov	r2, sl
 80096cc:	4631      	mov	r1, r6
 80096ce:	4628      	mov	r0, r5
 80096d0:	47b8      	blx	r7
 80096d2:	3001      	adds	r0, #1
 80096d4:	f43f af09 	beq.w	80094ea <_printf_float+0xc2>
 80096d8:	f04f 0900 	mov.w	r9, #0
 80096dc:	f104 0a1a 	add.w	sl, r4, #26
 80096e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096e2:	425b      	negs	r3, r3
 80096e4:	454b      	cmp	r3, r9
 80096e6:	dc01      	bgt.n	80096ec <_printf_float+0x2c4>
 80096e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096ea:	e792      	b.n	8009612 <_printf_float+0x1ea>
 80096ec:	2301      	movs	r3, #1
 80096ee:	4652      	mov	r2, sl
 80096f0:	4631      	mov	r1, r6
 80096f2:	4628      	mov	r0, r5
 80096f4:	47b8      	blx	r7
 80096f6:	3001      	adds	r0, #1
 80096f8:	f43f aef7 	beq.w	80094ea <_printf_float+0xc2>
 80096fc:	f109 0901 	add.w	r9, r9, #1
 8009700:	e7ee      	b.n	80096e0 <_printf_float+0x2b8>
 8009702:	bf00      	nop
 8009704:	7fefffff 	.word	0x7fefffff
 8009708:	0800ebc0 	.word	0x0800ebc0
 800970c:	0800ebc4 	.word	0x0800ebc4
 8009710:	0800ebcc 	.word	0x0800ebcc
 8009714:	0800ebc8 	.word	0x0800ebc8
 8009718:	0800ebd0 	.word	0x0800ebd0
 800971c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800971e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009720:	429a      	cmp	r2, r3
 8009722:	bfa8      	it	ge
 8009724:	461a      	movge	r2, r3
 8009726:	2a00      	cmp	r2, #0
 8009728:	4691      	mov	r9, r2
 800972a:	dc37      	bgt.n	800979c <_printf_float+0x374>
 800972c:	f04f 0b00 	mov.w	fp, #0
 8009730:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009734:	f104 021a 	add.w	r2, r4, #26
 8009738:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800973a:	9305      	str	r3, [sp, #20]
 800973c:	eba3 0309 	sub.w	r3, r3, r9
 8009740:	455b      	cmp	r3, fp
 8009742:	dc33      	bgt.n	80097ac <_printf_float+0x384>
 8009744:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009748:	429a      	cmp	r2, r3
 800974a:	db3b      	blt.n	80097c4 <_printf_float+0x39c>
 800974c:	6823      	ldr	r3, [r4, #0]
 800974e:	07da      	lsls	r2, r3, #31
 8009750:	d438      	bmi.n	80097c4 <_printf_float+0x39c>
 8009752:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009754:	9a05      	ldr	r2, [sp, #20]
 8009756:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009758:	1a9a      	subs	r2, r3, r2
 800975a:	eba3 0901 	sub.w	r9, r3, r1
 800975e:	4591      	cmp	r9, r2
 8009760:	bfa8      	it	ge
 8009762:	4691      	movge	r9, r2
 8009764:	f1b9 0f00 	cmp.w	r9, #0
 8009768:	dc35      	bgt.n	80097d6 <_printf_float+0x3ae>
 800976a:	f04f 0800 	mov.w	r8, #0
 800976e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009772:	f104 0a1a 	add.w	sl, r4, #26
 8009776:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800977a:	1a9b      	subs	r3, r3, r2
 800977c:	eba3 0309 	sub.w	r3, r3, r9
 8009780:	4543      	cmp	r3, r8
 8009782:	f77f af79 	ble.w	8009678 <_printf_float+0x250>
 8009786:	2301      	movs	r3, #1
 8009788:	4652      	mov	r2, sl
 800978a:	4631      	mov	r1, r6
 800978c:	4628      	mov	r0, r5
 800978e:	47b8      	blx	r7
 8009790:	3001      	adds	r0, #1
 8009792:	f43f aeaa 	beq.w	80094ea <_printf_float+0xc2>
 8009796:	f108 0801 	add.w	r8, r8, #1
 800979a:	e7ec      	b.n	8009776 <_printf_float+0x34e>
 800979c:	4613      	mov	r3, r2
 800979e:	4631      	mov	r1, r6
 80097a0:	4642      	mov	r2, r8
 80097a2:	4628      	mov	r0, r5
 80097a4:	47b8      	blx	r7
 80097a6:	3001      	adds	r0, #1
 80097a8:	d1c0      	bne.n	800972c <_printf_float+0x304>
 80097aa:	e69e      	b.n	80094ea <_printf_float+0xc2>
 80097ac:	2301      	movs	r3, #1
 80097ae:	4631      	mov	r1, r6
 80097b0:	4628      	mov	r0, r5
 80097b2:	9205      	str	r2, [sp, #20]
 80097b4:	47b8      	blx	r7
 80097b6:	3001      	adds	r0, #1
 80097b8:	f43f ae97 	beq.w	80094ea <_printf_float+0xc2>
 80097bc:	9a05      	ldr	r2, [sp, #20]
 80097be:	f10b 0b01 	add.w	fp, fp, #1
 80097c2:	e7b9      	b.n	8009738 <_printf_float+0x310>
 80097c4:	ee18 3a10 	vmov	r3, s16
 80097c8:	4652      	mov	r2, sl
 80097ca:	4631      	mov	r1, r6
 80097cc:	4628      	mov	r0, r5
 80097ce:	47b8      	blx	r7
 80097d0:	3001      	adds	r0, #1
 80097d2:	d1be      	bne.n	8009752 <_printf_float+0x32a>
 80097d4:	e689      	b.n	80094ea <_printf_float+0xc2>
 80097d6:	9a05      	ldr	r2, [sp, #20]
 80097d8:	464b      	mov	r3, r9
 80097da:	4442      	add	r2, r8
 80097dc:	4631      	mov	r1, r6
 80097de:	4628      	mov	r0, r5
 80097e0:	47b8      	blx	r7
 80097e2:	3001      	adds	r0, #1
 80097e4:	d1c1      	bne.n	800976a <_printf_float+0x342>
 80097e6:	e680      	b.n	80094ea <_printf_float+0xc2>
 80097e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80097ea:	2a01      	cmp	r2, #1
 80097ec:	dc01      	bgt.n	80097f2 <_printf_float+0x3ca>
 80097ee:	07db      	lsls	r3, r3, #31
 80097f0:	d538      	bpl.n	8009864 <_printf_float+0x43c>
 80097f2:	2301      	movs	r3, #1
 80097f4:	4642      	mov	r2, r8
 80097f6:	4631      	mov	r1, r6
 80097f8:	4628      	mov	r0, r5
 80097fa:	47b8      	blx	r7
 80097fc:	3001      	adds	r0, #1
 80097fe:	f43f ae74 	beq.w	80094ea <_printf_float+0xc2>
 8009802:	ee18 3a10 	vmov	r3, s16
 8009806:	4652      	mov	r2, sl
 8009808:	4631      	mov	r1, r6
 800980a:	4628      	mov	r0, r5
 800980c:	47b8      	blx	r7
 800980e:	3001      	adds	r0, #1
 8009810:	f43f ae6b 	beq.w	80094ea <_printf_float+0xc2>
 8009814:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009818:	2200      	movs	r2, #0
 800981a:	2300      	movs	r3, #0
 800981c:	f7f7 f95c 	bl	8000ad8 <__aeabi_dcmpeq>
 8009820:	b9d8      	cbnz	r0, 800985a <_printf_float+0x432>
 8009822:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009824:	f108 0201 	add.w	r2, r8, #1
 8009828:	3b01      	subs	r3, #1
 800982a:	4631      	mov	r1, r6
 800982c:	4628      	mov	r0, r5
 800982e:	47b8      	blx	r7
 8009830:	3001      	adds	r0, #1
 8009832:	d10e      	bne.n	8009852 <_printf_float+0x42a>
 8009834:	e659      	b.n	80094ea <_printf_float+0xc2>
 8009836:	2301      	movs	r3, #1
 8009838:	4652      	mov	r2, sl
 800983a:	4631      	mov	r1, r6
 800983c:	4628      	mov	r0, r5
 800983e:	47b8      	blx	r7
 8009840:	3001      	adds	r0, #1
 8009842:	f43f ae52 	beq.w	80094ea <_printf_float+0xc2>
 8009846:	f108 0801 	add.w	r8, r8, #1
 800984a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800984c:	3b01      	subs	r3, #1
 800984e:	4543      	cmp	r3, r8
 8009850:	dcf1      	bgt.n	8009836 <_printf_float+0x40e>
 8009852:	464b      	mov	r3, r9
 8009854:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009858:	e6dc      	b.n	8009614 <_printf_float+0x1ec>
 800985a:	f04f 0800 	mov.w	r8, #0
 800985e:	f104 0a1a 	add.w	sl, r4, #26
 8009862:	e7f2      	b.n	800984a <_printf_float+0x422>
 8009864:	2301      	movs	r3, #1
 8009866:	4642      	mov	r2, r8
 8009868:	e7df      	b.n	800982a <_printf_float+0x402>
 800986a:	2301      	movs	r3, #1
 800986c:	464a      	mov	r2, r9
 800986e:	4631      	mov	r1, r6
 8009870:	4628      	mov	r0, r5
 8009872:	47b8      	blx	r7
 8009874:	3001      	adds	r0, #1
 8009876:	f43f ae38 	beq.w	80094ea <_printf_float+0xc2>
 800987a:	f108 0801 	add.w	r8, r8, #1
 800987e:	68e3      	ldr	r3, [r4, #12]
 8009880:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009882:	1a5b      	subs	r3, r3, r1
 8009884:	4543      	cmp	r3, r8
 8009886:	dcf0      	bgt.n	800986a <_printf_float+0x442>
 8009888:	e6fa      	b.n	8009680 <_printf_float+0x258>
 800988a:	f04f 0800 	mov.w	r8, #0
 800988e:	f104 0919 	add.w	r9, r4, #25
 8009892:	e7f4      	b.n	800987e <_printf_float+0x456>

08009894 <_printf_common>:
 8009894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009898:	4616      	mov	r6, r2
 800989a:	4699      	mov	r9, r3
 800989c:	688a      	ldr	r2, [r1, #8]
 800989e:	690b      	ldr	r3, [r1, #16]
 80098a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80098a4:	4293      	cmp	r3, r2
 80098a6:	bfb8      	it	lt
 80098a8:	4613      	movlt	r3, r2
 80098aa:	6033      	str	r3, [r6, #0]
 80098ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80098b0:	4607      	mov	r7, r0
 80098b2:	460c      	mov	r4, r1
 80098b4:	b10a      	cbz	r2, 80098ba <_printf_common+0x26>
 80098b6:	3301      	adds	r3, #1
 80098b8:	6033      	str	r3, [r6, #0]
 80098ba:	6823      	ldr	r3, [r4, #0]
 80098bc:	0699      	lsls	r1, r3, #26
 80098be:	bf42      	ittt	mi
 80098c0:	6833      	ldrmi	r3, [r6, #0]
 80098c2:	3302      	addmi	r3, #2
 80098c4:	6033      	strmi	r3, [r6, #0]
 80098c6:	6825      	ldr	r5, [r4, #0]
 80098c8:	f015 0506 	ands.w	r5, r5, #6
 80098cc:	d106      	bne.n	80098dc <_printf_common+0x48>
 80098ce:	f104 0a19 	add.w	sl, r4, #25
 80098d2:	68e3      	ldr	r3, [r4, #12]
 80098d4:	6832      	ldr	r2, [r6, #0]
 80098d6:	1a9b      	subs	r3, r3, r2
 80098d8:	42ab      	cmp	r3, r5
 80098da:	dc26      	bgt.n	800992a <_printf_common+0x96>
 80098dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80098e0:	1e13      	subs	r3, r2, #0
 80098e2:	6822      	ldr	r2, [r4, #0]
 80098e4:	bf18      	it	ne
 80098e6:	2301      	movne	r3, #1
 80098e8:	0692      	lsls	r2, r2, #26
 80098ea:	d42b      	bmi.n	8009944 <_printf_common+0xb0>
 80098ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80098f0:	4649      	mov	r1, r9
 80098f2:	4638      	mov	r0, r7
 80098f4:	47c0      	blx	r8
 80098f6:	3001      	adds	r0, #1
 80098f8:	d01e      	beq.n	8009938 <_printf_common+0xa4>
 80098fa:	6823      	ldr	r3, [r4, #0]
 80098fc:	68e5      	ldr	r5, [r4, #12]
 80098fe:	6832      	ldr	r2, [r6, #0]
 8009900:	f003 0306 	and.w	r3, r3, #6
 8009904:	2b04      	cmp	r3, #4
 8009906:	bf08      	it	eq
 8009908:	1aad      	subeq	r5, r5, r2
 800990a:	68a3      	ldr	r3, [r4, #8]
 800990c:	6922      	ldr	r2, [r4, #16]
 800990e:	bf0c      	ite	eq
 8009910:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009914:	2500      	movne	r5, #0
 8009916:	4293      	cmp	r3, r2
 8009918:	bfc4      	itt	gt
 800991a:	1a9b      	subgt	r3, r3, r2
 800991c:	18ed      	addgt	r5, r5, r3
 800991e:	2600      	movs	r6, #0
 8009920:	341a      	adds	r4, #26
 8009922:	42b5      	cmp	r5, r6
 8009924:	d11a      	bne.n	800995c <_printf_common+0xc8>
 8009926:	2000      	movs	r0, #0
 8009928:	e008      	b.n	800993c <_printf_common+0xa8>
 800992a:	2301      	movs	r3, #1
 800992c:	4652      	mov	r2, sl
 800992e:	4649      	mov	r1, r9
 8009930:	4638      	mov	r0, r7
 8009932:	47c0      	blx	r8
 8009934:	3001      	adds	r0, #1
 8009936:	d103      	bne.n	8009940 <_printf_common+0xac>
 8009938:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800993c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009940:	3501      	adds	r5, #1
 8009942:	e7c6      	b.n	80098d2 <_printf_common+0x3e>
 8009944:	18e1      	adds	r1, r4, r3
 8009946:	1c5a      	adds	r2, r3, #1
 8009948:	2030      	movs	r0, #48	; 0x30
 800994a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800994e:	4422      	add	r2, r4
 8009950:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009954:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009958:	3302      	adds	r3, #2
 800995a:	e7c7      	b.n	80098ec <_printf_common+0x58>
 800995c:	2301      	movs	r3, #1
 800995e:	4622      	mov	r2, r4
 8009960:	4649      	mov	r1, r9
 8009962:	4638      	mov	r0, r7
 8009964:	47c0      	blx	r8
 8009966:	3001      	adds	r0, #1
 8009968:	d0e6      	beq.n	8009938 <_printf_common+0xa4>
 800996a:	3601      	adds	r6, #1
 800996c:	e7d9      	b.n	8009922 <_printf_common+0x8e>
	...

08009970 <_printf_i>:
 8009970:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009974:	7e0f      	ldrb	r7, [r1, #24]
 8009976:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009978:	2f78      	cmp	r7, #120	; 0x78
 800997a:	4691      	mov	r9, r2
 800997c:	4680      	mov	r8, r0
 800997e:	460c      	mov	r4, r1
 8009980:	469a      	mov	sl, r3
 8009982:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009986:	d807      	bhi.n	8009998 <_printf_i+0x28>
 8009988:	2f62      	cmp	r7, #98	; 0x62
 800998a:	d80a      	bhi.n	80099a2 <_printf_i+0x32>
 800998c:	2f00      	cmp	r7, #0
 800998e:	f000 80d8 	beq.w	8009b42 <_printf_i+0x1d2>
 8009992:	2f58      	cmp	r7, #88	; 0x58
 8009994:	f000 80a3 	beq.w	8009ade <_printf_i+0x16e>
 8009998:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800999c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80099a0:	e03a      	b.n	8009a18 <_printf_i+0xa8>
 80099a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80099a6:	2b15      	cmp	r3, #21
 80099a8:	d8f6      	bhi.n	8009998 <_printf_i+0x28>
 80099aa:	a101      	add	r1, pc, #4	; (adr r1, 80099b0 <_printf_i+0x40>)
 80099ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80099b0:	08009a09 	.word	0x08009a09
 80099b4:	08009a1d 	.word	0x08009a1d
 80099b8:	08009999 	.word	0x08009999
 80099bc:	08009999 	.word	0x08009999
 80099c0:	08009999 	.word	0x08009999
 80099c4:	08009999 	.word	0x08009999
 80099c8:	08009a1d 	.word	0x08009a1d
 80099cc:	08009999 	.word	0x08009999
 80099d0:	08009999 	.word	0x08009999
 80099d4:	08009999 	.word	0x08009999
 80099d8:	08009999 	.word	0x08009999
 80099dc:	08009b29 	.word	0x08009b29
 80099e0:	08009a4d 	.word	0x08009a4d
 80099e4:	08009b0b 	.word	0x08009b0b
 80099e8:	08009999 	.word	0x08009999
 80099ec:	08009999 	.word	0x08009999
 80099f0:	08009b4b 	.word	0x08009b4b
 80099f4:	08009999 	.word	0x08009999
 80099f8:	08009a4d 	.word	0x08009a4d
 80099fc:	08009999 	.word	0x08009999
 8009a00:	08009999 	.word	0x08009999
 8009a04:	08009b13 	.word	0x08009b13
 8009a08:	682b      	ldr	r3, [r5, #0]
 8009a0a:	1d1a      	adds	r2, r3, #4
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	602a      	str	r2, [r5, #0]
 8009a10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a18:	2301      	movs	r3, #1
 8009a1a:	e0a3      	b.n	8009b64 <_printf_i+0x1f4>
 8009a1c:	6820      	ldr	r0, [r4, #0]
 8009a1e:	6829      	ldr	r1, [r5, #0]
 8009a20:	0606      	lsls	r6, r0, #24
 8009a22:	f101 0304 	add.w	r3, r1, #4
 8009a26:	d50a      	bpl.n	8009a3e <_printf_i+0xce>
 8009a28:	680e      	ldr	r6, [r1, #0]
 8009a2a:	602b      	str	r3, [r5, #0]
 8009a2c:	2e00      	cmp	r6, #0
 8009a2e:	da03      	bge.n	8009a38 <_printf_i+0xc8>
 8009a30:	232d      	movs	r3, #45	; 0x2d
 8009a32:	4276      	negs	r6, r6
 8009a34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a38:	485e      	ldr	r0, [pc, #376]	; (8009bb4 <_printf_i+0x244>)
 8009a3a:	230a      	movs	r3, #10
 8009a3c:	e019      	b.n	8009a72 <_printf_i+0x102>
 8009a3e:	680e      	ldr	r6, [r1, #0]
 8009a40:	602b      	str	r3, [r5, #0]
 8009a42:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009a46:	bf18      	it	ne
 8009a48:	b236      	sxthne	r6, r6
 8009a4a:	e7ef      	b.n	8009a2c <_printf_i+0xbc>
 8009a4c:	682b      	ldr	r3, [r5, #0]
 8009a4e:	6820      	ldr	r0, [r4, #0]
 8009a50:	1d19      	adds	r1, r3, #4
 8009a52:	6029      	str	r1, [r5, #0]
 8009a54:	0601      	lsls	r1, r0, #24
 8009a56:	d501      	bpl.n	8009a5c <_printf_i+0xec>
 8009a58:	681e      	ldr	r6, [r3, #0]
 8009a5a:	e002      	b.n	8009a62 <_printf_i+0xf2>
 8009a5c:	0646      	lsls	r6, r0, #25
 8009a5e:	d5fb      	bpl.n	8009a58 <_printf_i+0xe8>
 8009a60:	881e      	ldrh	r6, [r3, #0]
 8009a62:	4854      	ldr	r0, [pc, #336]	; (8009bb4 <_printf_i+0x244>)
 8009a64:	2f6f      	cmp	r7, #111	; 0x6f
 8009a66:	bf0c      	ite	eq
 8009a68:	2308      	moveq	r3, #8
 8009a6a:	230a      	movne	r3, #10
 8009a6c:	2100      	movs	r1, #0
 8009a6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009a72:	6865      	ldr	r5, [r4, #4]
 8009a74:	60a5      	str	r5, [r4, #8]
 8009a76:	2d00      	cmp	r5, #0
 8009a78:	bfa2      	ittt	ge
 8009a7a:	6821      	ldrge	r1, [r4, #0]
 8009a7c:	f021 0104 	bicge.w	r1, r1, #4
 8009a80:	6021      	strge	r1, [r4, #0]
 8009a82:	b90e      	cbnz	r6, 8009a88 <_printf_i+0x118>
 8009a84:	2d00      	cmp	r5, #0
 8009a86:	d04d      	beq.n	8009b24 <_printf_i+0x1b4>
 8009a88:	4615      	mov	r5, r2
 8009a8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8009a8e:	fb03 6711 	mls	r7, r3, r1, r6
 8009a92:	5dc7      	ldrb	r7, [r0, r7]
 8009a94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009a98:	4637      	mov	r7, r6
 8009a9a:	42bb      	cmp	r3, r7
 8009a9c:	460e      	mov	r6, r1
 8009a9e:	d9f4      	bls.n	8009a8a <_printf_i+0x11a>
 8009aa0:	2b08      	cmp	r3, #8
 8009aa2:	d10b      	bne.n	8009abc <_printf_i+0x14c>
 8009aa4:	6823      	ldr	r3, [r4, #0]
 8009aa6:	07de      	lsls	r6, r3, #31
 8009aa8:	d508      	bpl.n	8009abc <_printf_i+0x14c>
 8009aaa:	6923      	ldr	r3, [r4, #16]
 8009aac:	6861      	ldr	r1, [r4, #4]
 8009aae:	4299      	cmp	r1, r3
 8009ab0:	bfde      	ittt	le
 8009ab2:	2330      	movle	r3, #48	; 0x30
 8009ab4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009ab8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009abc:	1b52      	subs	r2, r2, r5
 8009abe:	6122      	str	r2, [r4, #16]
 8009ac0:	f8cd a000 	str.w	sl, [sp]
 8009ac4:	464b      	mov	r3, r9
 8009ac6:	aa03      	add	r2, sp, #12
 8009ac8:	4621      	mov	r1, r4
 8009aca:	4640      	mov	r0, r8
 8009acc:	f7ff fee2 	bl	8009894 <_printf_common>
 8009ad0:	3001      	adds	r0, #1
 8009ad2:	d14c      	bne.n	8009b6e <_printf_i+0x1fe>
 8009ad4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ad8:	b004      	add	sp, #16
 8009ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ade:	4835      	ldr	r0, [pc, #212]	; (8009bb4 <_printf_i+0x244>)
 8009ae0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009ae4:	6829      	ldr	r1, [r5, #0]
 8009ae6:	6823      	ldr	r3, [r4, #0]
 8009ae8:	f851 6b04 	ldr.w	r6, [r1], #4
 8009aec:	6029      	str	r1, [r5, #0]
 8009aee:	061d      	lsls	r5, r3, #24
 8009af0:	d514      	bpl.n	8009b1c <_printf_i+0x1ac>
 8009af2:	07df      	lsls	r7, r3, #31
 8009af4:	bf44      	itt	mi
 8009af6:	f043 0320 	orrmi.w	r3, r3, #32
 8009afa:	6023      	strmi	r3, [r4, #0]
 8009afc:	b91e      	cbnz	r6, 8009b06 <_printf_i+0x196>
 8009afe:	6823      	ldr	r3, [r4, #0]
 8009b00:	f023 0320 	bic.w	r3, r3, #32
 8009b04:	6023      	str	r3, [r4, #0]
 8009b06:	2310      	movs	r3, #16
 8009b08:	e7b0      	b.n	8009a6c <_printf_i+0xfc>
 8009b0a:	6823      	ldr	r3, [r4, #0]
 8009b0c:	f043 0320 	orr.w	r3, r3, #32
 8009b10:	6023      	str	r3, [r4, #0]
 8009b12:	2378      	movs	r3, #120	; 0x78
 8009b14:	4828      	ldr	r0, [pc, #160]	; (8009bb8 <_printf_i+0x248>)
 8009b16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009b1a:	e7e3      	b.n	8009ae4 <_printf_i+0x174>
 8009b1c:	0659      	lsls	r1, r3, #25
 8009b1e:	bf48      	it	mi
 8009b20:	b2b6      	uxthmi	r6, r6
 8009b22:	e7e6      	b.n	8009af2 <_printf_i+0x182>
 8009b24:	4615      	mov	r5, r2
 8009b26:	e7bb      	b.n	8009aa0 <_printf_i+0x130>
 8009b28:	682b      	ldr	r3, [r5, #0]
 8009b2a:	6826      	ldr	r6, [r4, #0]
 8009b2c:	6961      	ldr	r1, [r4, #20]
 8009b2e:	1d18      	adds	r0, r3, #4
 8009b30:	6028      	str	r0, [r5, #0]
 8009b32:	0635      	lsls	r5, r6, #24
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	d501      	bpl.n	8009b3c <_printf_i+0x1cc>
 8009b38:	6019      	str	r1, [r3, #0]
 8009b3a:	e002      	b.n	8009b42 <_printf_i+0x1d2>
 8009b3c:	0670      	lsls	r0, r6, #25
 8009b3e:	d5fb      	bpl.n	8009b38 <_printf_i+0x1c8>
 8009b40:	8019      	strh	r1, [r3, #0]
 8009b42:	2300      	movs	r3, #0
 8009b44:	6123      	str	r3, [r4, #16]
 8009b46:	4615      	mov	r5, r2
 8009b48:	e7ba      	b.n	8009ac0 <_printf_i+0x150>
 8009b4a:	682b      	ldr	r3, [r5, #0]
 8009b4c:	1d1a      	adds	r2, r3, #4
 8009b4e:	602a      	str	r2, [r5, #0]
 8009b50:	681d      	ldr	r5, [r3, #0]
 8009b52:	6862      	ldr	r2, [r4, #4]
 8009b54:	2100      	movs	r1, #0
 8009b56:	4628      	mov	r0, r5
 8009b58:	f7f6 fb4a 	bl	80001f0 <memchr>
 8009b5c:	b108      	cbz	r0, 8009b62 <_printf_i+0x1f2>
 8009b5e:	1b40      	subs	r0, r0, r5
 8009b60:	6060      	str	r0, [r4, #4]
 8009b62:	6863      	ldr	r3, [r4, #4]
 8009b64:	6123      	str	r3, [r4, #16]
 8009b66:	2300      	movs	r3, #0
 8009b68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b6c:	e7a8      	b.n	8009ac0 <_printf_i+0x150>
 8009b6e:	6923      	ldr	r3, [r4, #16]
 8009b70:	462a      	mov	r2, r5
 8009b72:	4649      	mov	r1, r9
 8009b74:	4640      	mov	r0, r8
 8009b76:	47d0      	blx	sl
 8009b78:	3001      	adds	r0, #1
 8009b7a:	d0ab      	beq.n	8009ad4 <_printf_i+0x164>
 8009b7c:	6823      	ldr	r3, [r4, #0]
 8009b7e:	079b      	lsls	r3, r3, #30
 8009b80:	d413      	bmi.n	8009baa <_printf_i+0x23a>
 8009b82:	68e0      	ldr	r0, [r4, #12]
 8009b84:	9b03      	ldr	r3, [sp, #12]
 8009b86:	4298      	cmp	r0, r3
 8009b88:	bfb8      	it	lt
 8009b8a:	4618      	movlt	r0, r3
 8009b8c:	e7a4      	b.n	8009ad8 <_printf_i+0x168>
 8009b8e:	2301      	movs	r3, #1
 8009b90:	4632      	mov	r2, r6
 8009b92:	4649      	mov	r1, r9
 8009b94:	4640      	mov	r0, r8
 8009b96:	47d0      	blx	sl
 8009b98:	3001      	adds	r0, #1
 8009b9a:	d09b      	beq.n	8009ad4 <_printf_i+0x164>
 8009b9c:	3501      	adds	r5, #1
 8009b9e:	68e3      	ldr	r3, [r4, #12]
 8009ba0:	9903      	ldr	r1, [sp, #12]
 8009ba2:	1a5b      	subs	r3, r3, r1
 8009ba4:	42ab      	cmp	r3, r5
 8009ba6:	dcf2      	bgt.n	8009b8e <_printf_i+0x21e>
 8009ba8:	e7eb      	b.n	8009b82 <_printf_i+0x212>
 8009baa:	2500      	movs	r5, #0
 8009bac:	f104 0619 	add.w	r6, r4, #25
 8009bb0:	e7f5      	b.n	8009b9e <_printf_i+0x22e>
 8009bb2:	bf00      	nop
 8009bb4:	0800ebd2 	.word	0x0800ebd2
 8009bb8:	0800ebe3 	.word	0x0800ebe3

08009bbc <_scanf_float>:
 8009bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bc0:	b087      	sub	sp, #28
 8009bc2:	4617      	mov	r7, r2
 8009bc4:	9303      	str	r3, [sp, #12]
 8009bc6:	688b      	ldr	r3, [r1, #8]
 8009bc8:	1e5a      	subs	r2, r3, #1
 8009bca:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009bce:	bf83      	ittte	hi
 8009bd0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009bd4:	195b      	addhi	r3, r3, r5
 8009bd6:	9302      	strhi	r3, [sp, #8]
 8009bd8:	2300      	movls	r3, #0
 8009bda:	bf86      	itte	hi
 8009bdc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009be0:	608b      	strhi	r3, [r1, #8]
 8009be2:	9302      	strls	r3, [sp, #8]
 8009be4:	680b      	ldr	r3, [r1, #0]
 8009be6:	468b      	mov	fp, r1
 8009be8:	2500      	movs	r5, #0
 8009bea:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009bee:	f84b 3b1c 	str.w	r3, [fp], #28
 8009bf2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009bf6:	4680      	mov	r8, r0
 8009bf8:	460c      	mov	r4, r1
 8009bfa:	465e      	mov	r6, fp
 8009bfc:	46aa      	mov	sl, r5
 8009bfe:	46a9      	mov	r9, r5
 8009c00:	9501      	str	r5, [sp, #4]
 8009c02:	68a2      	ldr	r2, [r4, #8]
 8009c04:	b152      	cbz	r2, 8009c1c <_scanf_float+0x60>
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	781b      	ldrb	r3, [r3, #0]
 8009c0a:	2b4e      	cmp	r3, #78	; 0x4e
 8009c0c:	d864      	bhi.n	8009cd8 <_scanf_float+0x11c>
 8009c0e:	2b40      	cmp	r3, #64	; 0x40
 8009c10:	d83c      	bhi.n	8009c8c <_scanf_float+0xd0>
 8009c12:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009c16:	b2c8      	uxtb	r0, r1
 8009c18:	280e      	cmp	r0, #14
 8009c1a:	d93a      	bls.n	8009c92 <_scanf_float+0xd6>
 8009c1c:	f1b9 0f00 	cmp.w	r9, #0
 8009c20:	d003      	beq.n	8009c2a <_scanf_float+0x6e>
 8009c22:	6823      	ldr	r3, [r4, #0]
 8009c24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c28:	6023      	str	r3, [r4, #0]
 8009c2a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009c2e:	f1ba 0f01 	cmp.w	sl, #1
 8009c32:	f200 8113 	bhi.w	8009e5c <_scanf_float+0x2a0>
 8009c36:	455e      	cmp	r6, fp
 8009c38:	f200 8105 	bhi.w	8009e46 <_scanf_float+0x28a>
 8009c3c:	2501      	movs	r5, #1
 8009c3e:	4628      	mov	r0, r5
 8009c40:	b007      	add	sp, #28
 8009c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c46:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009c4a:	2a0d      	cmp	r2, #13
 8009c4c:	d8e6      	bhi.n	8009c1c <_scanf_float+0x60>
 8009c4e:	a101      	add	r1, pc, #4	; (adr r1, 8009c54 <_scanf_float+0x98>)
 8009c50:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009c54:	08009d93 	.word	0x08009d93
 8009c58:	08009c1d 	.word	0x08009c1d
 8009c5c:	08009c1d 	.word	0x08009c1d
 8009c60:	08009c1d 	.word	0x08009c1d
 8009c64:	08009df3 	.word	0x08009df3
 8009c68:	08009dcb 	.word	0x08009dcb
 8009c6c:	08009c1d 	.word	0x08009c1d
 8009c70:	08009c1d 	.word	0x08009c1d
 8009c74:	08009da1 	.word	0x08009da1
 8009c78:	08009c1d 	.word	0x08009c1d
 8009c7c:	08009c1d 	.word	0x08009c1d
 8009c80:	08009c1d 	.word	0x08009c1d
 8009c84:	08009c1d 	.word	0x08009c1d
 8009c88:	08009d59 	.word	0x08009d59
 8009c8c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009c90:	e7db      	b.n	8009c4a <_scanf_float+0x8e>
 8009c92:	290e      	cmp	r1, #14
 8009c94:	d8c2      	bhi.n	8009c1c <_scanf_float+0x60>
 8009c96:	a001      	add	r0, pc, #4	; (adr r0, 8009c9c <_scanf_float+0xe0>)
 8009c98:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009c9c:	08009d4b 	.word	0x08009d4b
 8009ca0:	08009c1d 	.word	0x08009c1d
 8009ca4:	08009d4b 	.word	0x08009d4b
 8009ca8:	08009ddf 	.word	0x08009ddf
 8009cac:	08009c1d 	.word	0x08009c1d
 8009cb0:	08009cf9 	.word	0x08009cf9
 8009cb4:	08009d35 	.word	0x08009d35
 8009cb8:	08009d35 	.word	0x08009d35
 8009cbc:	08009d35 	.word	0x08009d35
 8009cc0:	08009d35 	.word	0x08009d35
 8009cc4:	08009d35 	.word	0x08009d35
 8009cc8:	08009d35 	.word	0x08009d35
 8009ccc:	08009d35 	.word	0x08009d35
 8009cd0:	08009d35 	.word	0x08009d35
 8009cd4:	08009d35 	.word	0x08009d35
 8009cd8:	2b6e      	cmp	r3, #110	; 0x6e
 8009cda:	d809      	bhi.n	8009cf0 <_scanf_float+0x134>
 8009cdc:	2b60      	cmp	r3, #96	; 0x60
 8009cde:	d8b2      	bhi.n	8009c46 <_scanf_float+0x8a>
 8009ce0:	2b54      	cmp	r3, #84	; 0x54
 8009ce2:	d077      	beq.n	8009dd4 <_scanf_float+0x218>
 8009ce4:	2b59      	cmp	r3, #89	; 0x59
 8009ce6:	d199      	bne.n	8009c1c <_scanf_float+0x60>
 8009ce8:	2d07      	cmp	r5, #7
 8009cea:	d197      	bne.n	8009c1c <_scanf_float+0x60>
 8009cec:	2508      	movs	r5, #8
 8009cee:	e029      	b.n	8009d44 <_scanf_float+0x188>
 8009cf0:	2b74      	cmp	r3, #116	; 0x74
 8009cf2:	d06f      	beq.n	8009dd4 <_scanf_float+0x218>
 8009cf4:	2b79      	cmp	r3, #121	; 0x79
 8009cf6:	e7f6      	b.n	8009ce6 <_scanf_float+0x12a>
 8009cf8:	6821      	ldr	r1, [r4, #0]
 8009cfa:	05c8      	lsls	r0, r1, #23
 8009cfc:	d51a      	bpl.n	8009d34 <_scanf_float+0x178>
 8009cfe:	9b02      	ldr	r3, [sp, #8]
 8009d00:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009d04:	6021      	str	r1, [r4, #0]
 8009d06:	f109 0901 	add.w	r9, r9, #1
 8009d0a:	b11b      	cbz	r3, 8009d14 <_scanf_float+0x158>
 8009d0c:	3b01      	subs	r3, #1
 8009d0e:	3201      	adds	r2, #1
 8009d10:	9302      	str	r3, [sp, #8]
 8009d12:	60a2      	str	r2, [r4, #8]
 8009d14:	68a3      	ldr	r3, [r4, #8]
 8009d16:	3b01      	subs	r3, #1
 8009d18:	60a3      	str	r3, [r4, #8]
 8009d1a:	6923      	ldr	r3, [r4, #16]
 8009d1c:	3301      	adds	r3, #1
 8009d1e:	6123      	str	r3, [r4, #16]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	3b01      	subs	r3, #1
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	607b      	str	r3, [r7, #4]
 8009d28:	f340 8084 	ble.w	8009e34 <_scanf_float+0x278>
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	3301      	adds	r3, #1
 8009d30:	603b      	str	r3, [r7, #0]
 8009d32:	e766      	b.n	8009c02 <_scanf_float+0x46>
 8009d34:	eb1a 0f05 	cmn.w	sl, r5
 8009d38:	f47f af70 	bne.w	8009c1c <_scanf_float+0x60>
 8009d3c:	6822      	ldr	r2, [r4, #0]
 8009d3e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009d42:	6022      	str	r2, [r4, #0]
 8009d44:	f806 3b01 	strb.w	r3, [r6], #1
 8009d48:	e7e4      	b.n	8009d14 <_scanf_float+0x158>
 8009d4a:	6822      	ldr	r2, [r4, #0]
 8009d4c:	0610      	lsls	r0, r2, #24
 8009d4e:	f57f af65 	bpl.w	8009c1c <_scanf_float+0x60>
 8009d52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009d56:	e7f4      	b.n	8009d42 <_scanf_float+0x186>
 8009d58:	f1ba 0f00 	cmp.w	sl, #0
 8009d5c:	d10e      	bne.n	8009d7c <_scanf_float+0x1c0>
 8009d5e:	f1b9 0f00 	cmp.w	r9, #0
 8009d62:	d10e      	bne.n	8009d82 <_scanf_float+0x1c6>
 8009d64:	6822      	ldr	r2, [r4, #0]
 8009d66:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009d6a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009d6e:	d108      	bne.n	8009d82 <_scanf_float+0x1c6>
 8009d70:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009d74:	6022      	str	r2, [r4, #0]
 8009d76:	f04f 0a01 	mov.w	sl, #1
 8009d7a:	e7e3      	b.n	8009d44 <_scanf_float+0x188>
 8009d7c:	f1ba 0f02 	cmp.w	sl, #2
 8009d80:	d055      	beq.n	8009e2e <_scanf_float+0x272>
 8009d82:	2d01      	cmp	r5, #1
 8009d84:	d002      	beq.n	8009d8c <_scanf_float+0x1d0>
 8009d86:	2d04      	cmp	r5, #4
 8009d88:	f47f af48 	bne.w	8009c1c <_scanf_float+0x60>
 8009d8c:	3501      	adds	r5, #1
 8009d8e:	b2ed      	uxtb	r5, r5
 8009d90:	e7d8      	b.n	8009d44 <_scanf_float+0x188>
 8009d92:	f1ba 0f01 	cmp.w	sl, #1
 8009d96:	f47f af41 	bne.w	8009c1c <_scanf_float+0x60>
 8009d9a:	f04f 0a02 	mov.w	sl, #2
 8009d9e:	e7d1      	b.n	8009d44 <_scanf_float+0x188>
 8009da0:	b97d      	cbnz	r5, 8009dc2 <_scanf_float+0x206>
 8009da2:	f1b9 0f00 	cmp.w	r9, #0
 8009da6:	f47f af3c 	bne.w	8009c22 <_scanf_float+0x66>
 8009daa:	6822      	ldr	r2, [r4, #0]
 8009dac:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009db0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009db4:	f47f af39 	bne.w	8009c2a <_scanf_float+0x6e>
 8009db8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009dbc:	6022      	str	r2, [r4, #0]
 8009dbe:	2501      	movs	r5, #1
 8009dc0:	e7c0      	b.n	8009d44 <_scanf_float+0x188>
 8009dc2:	2d03      	cmp	r5, #3
 8009dc4:	d0e2      	beq.n	8009d8c <_scanf_float+0x1d0>
 8009dc6:	2d05      	cmp	r5, #5
 8009dc8:	e7de      	b.n	8009d88 <_scanf_float+0x1cc>
 8009dca:	2d02      	cmp	r5, #2
 8009dcc:	f47f af26 	bne.w	8009c1c <_scanf_float+0x60>
 8009dd0:	2503      	movs	r5, #3
 8009dd2:	e7b7      	b.n	8009d44 <_scanf_float+0x188>
 8009dd4:	2d06      	cmp	r5, #6
 8009dd6:	f47f af21 	bne.w	8009c1c <_scanf_float+0x60>
 8009dda:	2507      	movs	r5, #7
 8009ddc:	e7b2      	b.n	8009d44 <_scanf_float+0x188>
 8009dde:	6822      	ldr	r2, [r4, #0]
 8009de0:	0591      	lsls	r1, r2, #22
 8009de2:	f57f af1b 	bpl.w	8009c1c <_scanf_float+0x60>
 8009de6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009dea:	6022      	str	r2, [r4, #0]
 8009dec:	f8cd 9004 	str.w	r9, [sp, #4]
 8009df0:	e7a8      	b.n	8009d44 <_scanf_float+0x188>
 8009df2:	6822      	ldr	r2, [r4, #0]
 8009df4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009df8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009dfc:	d006      	beq.n	8009e0c <_scanf_float+0x250>
 8009dfe:	0550      	lsls	r0, r2, #21
 8009e00:	f57f af0c 	bpl.w	8009c1c <_scanf_float+0x60>
 8009e04:	f1b9 0f00 	cmp.w	r9, #0
 8009e08:	f43f af0f 	beq.w	8009c2a <_scanf_float+0x6e>
 8009e0c:	0591      	lsls	r1, r2, #22
 8009e0e:	bf58      	it	pl
 8009e10:	9901      	ldrpl	r1, [sp, #4]
 8009e12:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009e16:	bf58      	it	pl
 8009e18:	eba9 0101 	subpl.w	r1, r9, r1
 8009e1c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009e20:	bf58      	it	pl
 8009e22:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009e26:	6022      	str	r2, [r4, #0]
 8009e28:	f04f 0900 	mov.w	r9, #0
 8009e2c:	e78a      	b.n	8009d44 <_scanf_float+0x188>
 8009e2e:	f04f 0a03 	mov.w	sl, #3
 8009e32:	e787      	b.n	8009d44 <_scanf_float+0x188>
 8009e34:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009e38:	4639      	mov	r1, r7
 8009e3a:	4640      	mov	r0, r8
 8009e3c:	4798      	blx	r3
 8009e3e:	2800      	cmp	r0, #0
 8009e40:	f43f aedf 	beq.w	8009c02 <_scanf_float+0x46>
 8009e44:	e6ea      	b.n	8009c1c <_scanf_float+0x60>
 8009e46:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009e4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009e4e:	463a      	mov	r2, r7
 8009e50:	4640      	mov	r0, r8
 8009e52:	4798      	blx	r3
 8009e54:	6923      	ldr	r3, [r4, #16]
 8009e56:	3b01      	subs	r3, #1
 8009e58:	6123      	str	r3, [r4, #16]
 8009e5a:	e6ec      	b.n	8009c36 <_scanf_float+0x7a>
 8009e5c:	1e6b      	subs	r3, r5, #1
 8009e5e:	2b06      	cmp	r3, #6
 8009e60:	d825      	bhi.n	8009eae <_scanf_float+0x2f2>
 8009e62:	2d02      	cmp	r5, #2
 8009e64:	d836      	bhi.n	8009ed4 <_scanf_float+0x318>
 8009e66:	455e      	cmp	r6, fp
 8009e68:	f67f aee8 	bls.w	8009c3c <_scanf_float+0x80>
 8009e6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009e70:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009e74:	463a      	mov	r2, r7
 8009e76:	4640      	mov	r0, r8
 8009e78:	4798      	blx	r3
 8009e7a:	6923      	ldr	r3, [r4, #16]
 8009e7c:	3b01      	subs	r3, #1
 8009e7e:	6123      	str	r3, [r4, #16]
 8009e80:	e7f1      	b.n	8009e66 <_scanf_float+0x2aa>
 8009e82:	9802      	ldr	r0, [sp, #8]
 8009e84:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009e88:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009e8c:	9002      	str	r0, [sp, #8]
 8009e8e:	463a      	mov	r2, r7
 8009e90:	4640      	mov	r0, r8
 8009e92:	4798      	blx	r3
 8009e94:	6923      	ldr	r3, [r4, #16]
 8009e96:	3b01      	subs	r3, #1
 8009e98:	6123      	str	r3, [r4, #16]
 8009e9a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009e9e:	fa5f fa8a 	uxtb.w	sl, sl
 8009ea2:	f1ba 0f02 	cmp.w	sl, #2
 8009ea6:	d1ec      	bne.n	8009e82 <_scanf_float+0x2c6>
 8009ea8:	3d03      	subs	r5, #3
 8009eaa:	b2ed      	uxtb	r5, r5
 8009eac:	1b76      	subs	r6, r6, r5
 8009eae:	6823      	ldr	r3, [r4, #0]
 8009eb0:	05da      	lsls	r2, r3, #23
 8009eb2:	d52f      	bpl.n	8009f14 <_scanf_float+0x358>
 8009eb4:	055b      	lsls	r3, r3, #21
 8009eb6:	d510      	bpl.n	8009eda <_scanf_float+0x31e>
 8009eb8:	455e      	cmp	r6, fp
 8009eba:	f67f aebf 	bls.w	8009c3c <_scanf_float+0x80>
 8009ebe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009ec2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009ec6:	463a      	mov	r2, r7
 8009ec8:	4640      	mov	r0, r8
 8009eca:	4798      	blx	r3
 8009ecc:	6923      	ldr	r3, [r4, #16]
 8009ece:	3b01      	subs	r3, #1
 8009ed0:	6123      	str	r3, [r4, #16]
 8009ed2:	e7f1      	b.n	8009eb8 <_scanf_float+0x2fc>
 8009ed4:	46aa      	mov	sl, r5
 8009ed6:	9602      	str	r6, [sp, #8]
 8009ed8:	e7df      	b.n	8009e9a <_scanf_float+0x2de>
 8009eda:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009ede:	6923      	ldr	r3, [r4, #16]
 8009ee0:	2965      	cmp	r1, #101	; 0x65
 8009ee2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8009ee6:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8009eea:	6123      	str	r3, [r4, #16]
 8009eec:	d00c      	beq.n	8009f08 <_scanf_float+0x34c>
 8009eee:	2945      	cmp	r1, #69	; 0x45
 8009ef0:	d00a      	beq.n	8009f08 <_scanf_float+0x34c>
 8009ef2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009ef6:	463a      	mov	r2, r7
 8009ef8:	4640      	mov	r0, r8
 8009efa:	4798      	blx	r3
 8009efc:	6923      	ldr	r3, [r4, #16]
 8009efe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009f02:	3b01      	subs	r3, #1
 8009f04:	1eb5      	subs	r5, r6, #2
 8009f06:	6123      	str	r3, [r4, #16]
 8009f08:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009f0c:	463a      	mov	r2, r7
 8009f0e:	4640      	mov	r0, r8
 8009f10:	4798      	blx	r3
 8009f12:	462e      	mov	r6, r5
 8009f14:	6825      	ldr	r5, [r4, #0]
 8009f16:	f015 0510 	ands.w	r5, r5, #16
 8009f1a:	d159      	bne.n	8009fd0 <_scanf_float+0x414>
 8009f1c:	7035      	strb	r5, [r6, #0]
 8009f1e:	6823      	ldr	r3, [r4, #0]
 8009f20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009f24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f28:	d11b      	bne.n	8009f62 <_scanf_float+0x3a6>
 8009f2a:	9b01      	ldr	r3, [sp, #4]
 8009f2c:	454b      	cmp	r3, r9
 8009f2e:	eba3 0209 	sub.w	r2, r3, r9
 8009f32:	d123      	bne.n	8009f7c <_scanf_float+0x3c0>
 8009f34:	2200      	movs	r2, #0
 8009f36:	4659      	mov	r1, fp
 8009f38:	4640      	mov	r0, r8
 8009f3a:	f000 fea7 	bl	800ac8c <_strtod_r>
 8009f3e:	6822      	ldr	r2, [r4, #0]
 8009f40:	9b03      	ldr	r3, [sp, #12]
 8009f42:	f012 0f02 	tst.w	r2, #2
 8009f46:	ec57 6b10 	vmov	r6, r7, d0
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	d021      	beq.n	8009f92 <_scanf_float+0x3d6>
 8009f4e:	9903      	ldr	r1, [sp, #12]
 8009f50:	1d1a      	adds	r2, r3, #4
 8009f52:	600a      	str	r2, [r1, #0]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	e9c3 6700 	strd	r6, r7, [r3]
 8009f5a:	68e3      	ldr	r3, [r4, #12]
 8009f5c:	3301      	adds	r3, #1
 8009f5e:	60e3      	str	r3, [r4, #12]
 8009f60:	e66d      	b.n	8009c3e <_scanf_float+0x82>
 8009f62:	9b04      	ldr	r3, [sp, #16]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d0e5      	beq.n	8009f34 <_scanf_float+0x378>
 8009f68:	9905      	ldr	r1, [sp, #20]
 8009f6a:	230a      	movs	r3, #10
 8009f6c:	462a      	mov	r2, r5
 8009f6e:	3101      	adds	r1, #1
 8009f70:	4640      	mov	r0, r8
 8009f72:	f000 ff13 	bl	800ad9c <_strtol_r>
 8009f76:	9b04      	ldr	r3, [sp, #16]
 8009f78:	9e05      	ldr	r6, [sp, #20]
 8009f7a:	1ac2      	subs	r2, r0, r3
 8009f7c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009f80:	429e      	cmp	r6, r3
 8009f82:	bf28      	it	cs
 8009f84:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009f88:	4912      	ldr	r1, [pc, #72]	; (8009fd4 <_scanf_float+0x418>)
 8009f8a:	4630      	mov	r0, r6
 8009f8c:	f000 f82c 	bl	8009fe8 <siprintf>
 8009f90:	e7d0      	b.n	8009f34 <_scanf_float+0x378>
 8009f92:	9903      	ldr	r1, [sp, #12]
 8009f94:	f012 0f04 	tst.w	r2, #4
 8009f98:	f103 0204 	add.w	r2, r3, #4
 8009f9c:	600a      	str	r2, [r1, #0]
 8009f9e:	d1d9      	bne.n	8009f54 <_scanf_float+0x398>
 8009fa0:	f8d3 8000 	ldr.w	r8, [r3]
 8009fa4:	ee10 2a10 	vmov	r2, s0
 8009fa8:	ee10 0a10 	vmov	r0, s0
 8009fac:	463b      	mov	r3, r7
 8009fae:	4639      	mov	r1, r7
 8009fb0:	f7f6 fdc4 	bl	8000b3c <__aeabi_dcmpun>
 8009fb4:	b128      	cbz	r0, 8009fc2 <_scanf_float+0x406>
 8009fb6:	4808      	ldr	r0, [pc, #32]	; (8009fd8 <_scanf_float+0x41c>)
 8009fb8:	f000 f810 	bl	8009fdc <nanf>
 8009fbc:	ed88 0a00 	vstr	s0, [r8]
 8009fc0:	e7cb      	b.n	8009f5a <_scanf_float+0x39e>
 8009fc2:	4630      	mov	r0, r6
 8009fc4:	4639      	mov	r1, r7
 8009fc6:	f7f6 fe17 	bl	8000bf8 <__aeabi_d2f>
 8009fca:	f8c8 0000 	str.w	r0, [r8]
 8009fce:	e7c4      	b.n	8009f5a <_scanf_float+0x39e>
 8009fd0:	2500      	movs	r5, #0
 8009fd2:	e634      	b.n	8009c3e <_scanf_float+0x82>
 8009fd4:	0800ebf4 	.word	0x0800ebf4
 8009fd8:	0800f000 	.word	0x0800f000

08009fdc <nanf>:
 8009fdc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009fe4 <nanf+0x8>
 8009fe0:	4770      	bx	lr
 8009fe2:	bf00      	nop
 8009fe4:	7fc00000 	.word	0x7fc00000

08009fe8 <siprintf>:
 8009fe8:	b40e      	push	{r1, r2, r3}
 8009fea:	b500      	push	{lr}
 8009fec:	b09c      	sub	sp, #112	; 0x70
 8009fee:	ab1d      	add	r3, sp, #116	; 0x74
 8009ff0:	9002      	str	r0, [sp, #8]
 8009ff2:	9006      	str	r0, [sp, #24]
 8009ff4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009ff8:	4809      	ldr	r0, [pc, #36]	; (800a020 <siprintf+0x38>)
 8009ffa:	9107      	str	r1, [sp, #28]
 8009ffc:	9104      	str	r1, [sp, #16]
 8009ffe:	4909      	ldr	r1, [pc, #36]	; (800a024 <siprintf+0x3c>)
 800a000:	f853 2b04 	ldr.w	r2, [r3], #4
 800a004:	9105      	str	r1, [sp, #20]
 800a006:	6800      	ldr	r0, [r0, #0]
 800a008:	9301      	str	r3, [sp, #4]
 800a00a:	a902      	add	r1, sp, #8
 800a00c:	f002 fee4 	bl	800cdd8 <_svfiprintf_r>
 800a010:	9b02      	ldr	r3, [sp, #8]
 800a012:	2200      	movs	r2, #0
 800a014:	701a      	strb	r2, [r3, #0]
 800a016:	b01c      	add	sp, #112	; 0x70
 800a018:	f85d eb04 	ldr.w	lr, [sp], #4
 800a01c:	b003      	add	sp, #12
 800a01e:	4770      	bx	lr
 800a020:	2000001c 	.word	0x2000001c
 800a024:	ffff0208 	.word	0xffff0208

0800a028 <strcat>:
 800a028:	b510      	push	{r4, lr}
 800a02a:	4602      	mov	r2, r0
 800a02c:	7814      	ldrb	r4, [r2, #0]
 800a02e:	4613      	mov	r3, r2
 800a030:	3201      	adds	r2, #1
 800a032:	2c00      	cmp	r4, #0
 800a034:	d1fa      	bne.n	800a02c <strcat+0x4>
 800a036:	3b01      	subs	r3, #1
 800a038:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a03c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a040:	2a00      	cmp	r2, #0
 800a042:	d1f9      	bne.n	800a038 <strcat+0x10>
 800a044:	bd10      	pop	{r4, pc}

0800a046 <sulp>:
 800a046:	b570      	push	{r4, r5, r6, lr}
 800a048:	4604      	mov	r4, r0
 800a04a:	460d      	mov	r5, r1
 800a04c:	ec45 4b10 	vmov	d0, r4, r5
 800a050:	4616      	mov	r6, r2
 800a052:	f002 fc1f 	bl	800c894 <__ulp>
 800a056:	ec51 0b10 	vmov	r0, r1, d0
 800a05a:	b17e      	cbz	r6, 800a07c <sulp+0x36>
 800a05c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a060:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a064:	2b00      	cmp	r3, #0
 800a066:	dd09      	ble.n	800a07c <sulp+0x36>
 800a068:	051b      	lsls	r3, r3, #20
 800a06a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a06e:	2400      	movs	r4, #0
 800a070:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a074:	4622      	mov	r2, r4
 800a076:	462b      	mov	r3, r5
 800a078:	f7f6 fac6 	bl	8000608 <__aeabi_dmul>
 800a07c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a080 <_strtod_l>:
 800a080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a084:	ed2d 8b02 	vpush	{d8}
 800a088:	b09d      	sub	sp, #116	; 0x74
 800a08a:	461f      	mov	r7, r3
 800a08c:	2300      	movs	r3, #0
 800a08e:	9318      	str	r3, [sp, #96]	; 0x60
 800a090:	4ba2      	ldr	r3, [pc, #648]	; (800a31c <_strtod_l+0x29c>)
 800a092:	9213      	str	r2, [sp, #76]	; 0x4c
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	9305      	str	r3, [sp, #20]
 800a098:	4604      	mov	r4, r0
 800a09a:	4618      	mov	r0, r3
 800a09c:	4688      	mov	r8, r1
 800a09e:	f7f6 f89f 	bl	80001e0 <strlen>
 800a0a2:	f04f 0a00 	mov.w	sl, #0
 800a0a6:	4605      	mov	r5, r0
 800a0a8:	f04f 0b00 	mov.w	fp, #0
 800a0ac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a0b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a0b2:	781a      	ldrb	r2, [r3, #0]
 800a0b4:	2a2b      	cmp	r2, #43	; 0x2b
 800a0b6:	d04e      	beq.n	800a156 <_strtod_l+0xd6>
 800a0b8:	d83b      	bhi.n	800a132 <_strtod_l+0xb2>
 800a0ba:	2a0d      	cmp	r2, #13
 800a0bc:	d834      	bhi.n	800a128 <_strtod_l+0xa8>
 800a0be:	2a08      	cmp	r2, #8
 800a0c0:	d834      	bhi.n	800a12c <_strtod_l+0xac>
 800a0c2:	2a00      	cmp	r2, #0
 800a0c4:	d03e      	beq.n	800a144 <_strtod_l+0xc4>
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	930a      	str	r3, [sp, #40]	; 0x28
 800a0ca:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a0cc:	7833      	ldrb	r3, [r6, #0]
 800a0ce:	2b30      	cmp	r3, #48	; 0x30
 800a0d0:	f040 80b0 	bne.w	800a234 <_strtod_l+0x1b4>
 800a0d4:	7873      	ldrb	r3, [r6, #1]
 800a0d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a0da:	2b58      	cmp	r3, #88	; 0x58
 800a0dc:	d168      	bne.n	800a1b0 <_strtod_l+0x130>
 800a0de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0e0:	9301      	str	r3, [sp, #4]
 800a0e2:	ab18      	add	r3, sp, #96	; 0x60
 800a0e4:	9702      	str	r7, [sp, #8]
 800a0e6:	9300      	str	r3, [sp, #0]
 800a0e8:	4a8d      	ldr	r2, [pc, #564]	; (800a320 <_strtod_l+0x2a0>)
 800a0ea:	ab19      	add	r3, sp, #100	; 0x64
 800a0ec:	a917      	add	r1, sp, #92	; 0x5c
 800a0ee:	4620      	mov	r0, r4
 800a0f0:	f001 fd38 	bl	800bb64 <__gethex>
 800a0f4:	f010 0707 	ands.w	r7, r0, #7
 800a0f8:	4605      	mov	r5, r0
 800a0fa:	d005      	beq.n	800a108 <_strtod_l+0x88>
 800a0fc:	2f06      	cmp	r7, #6
 800a0fe:	d12c      	bne.n	800a15a <_strtod_l+0xda>
 800a100:	3601      	adds	r6, #1
 800a102:	2300      	movs	r3, #0
 800a104:	9617      	str	r6, [sp, #92]	; 0x5c
 800a106:	930a      	str	r3, [sp, #40]	; 0x28
 800a108:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	f040 8590 	bne.w	800ac30 <_strtod_l+0xbb0>
 800a110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a112:	b1eb      	cbz	r3, 800a150 <_strtod_l+0xd0>
 800a114:	4652      	mov	r2, sl
 800a116:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a11a:	ec43 2b10 	vmov	d0, r2, r3
 800a11e:	b01d      	add	sp, #116	; 0x74
 800a120:	ecbd 8b02 	vpop	{d8}
 800a124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a128:	2a20      	cmp	r2, #32
 800a12a:	d1cc      	bne.n	800a0c6 <_strtod_l+0x46>
 800a12c:	3301      	adds	r3, #1
 800a12e:	9317      	str	r3, [sp, #92]	; 0x5c
 800a130:	e7be      	b.n	800a0b0 <_strtod_l+0x30>
 800a132:	2a2d      	cmp	r2, #45	; 0x2d
 800a134:	d1c7      	bne.n	800a0c6 <_strtod_l+0x46>
 800a136:	2201      	movs	r2, #1
 800a138:	920a      	str	r2, [sp, #40]	; 0x28
 800a13a:	1c5a      	adds	r2, r3, #1
 800a13c:	9217      	str	r2, [sp, #92]	; 0x5c
 800a13e:	785b      	ldrb	r3, [r3, #1]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d1c2      	bne.n	800a0ca <_strtod_l+0x4a>
 800a144:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a146:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	f040 856e 	bne.w	800ac2c <_strtod_l+0xbac>
 800a150:	4652      	mov	r2, sl
 800a152:	465b      	mov	r3, fp
 800a154:	e7e1      	b.n	800a11a <_strtod_l+0x9a>
 800a156:	2200      	movs	r2, #0
 800a158:	e7ee      	b.n	800a138 <_strtod_l+0xb8>
 800a15a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a15c:	b13a      	cbz	r2, 800a16e <_strtod_l+0xee>
 800a15e:	2135      	movs	r1, #53	; 0x35
 800a160:	a81a      	add	r0, sp, #104	; 0x68
 800a162:	f002 fca2 	bl	800caaa <__copybits>
 800a166:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a168:	4620      	mov	r0, r4
 800a16a:	f002 f861 	bl	800c230 <_Bfree>
 800a16e:	3f01      	subs	r7, #1
 800a170:	2f04      	cmp	r7, #4
 800a172:	d806      	bhi.n	800a182 <_strtod_l+0x102>
 800a174:	e8df f007 	tbb	[pc, r7]
 800a178:	1714030a 	.word	0x1714030a
 800a17c:	0a          	.byte	0x0a
 800a17d:	00          	.byte	0x00
 800a17e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800a182:	0728      	lsls	r0, r5, #28
 800a184:	d5c0      	bpl.n	800a108 <_strtod_l+0x88>
 800a186:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a18a:	e7bd      	b.n	800a108 <_strtod_l+0x88>
 800a18c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800a190:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a192:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a196:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a19a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a19e:	e7f0      	b.n	800a182 <_strtod_l+0x102>
 800a1a0:	f8df b180 	ldr.w	fp, [pc, #384]	; 800a324 <_strtod_l+0x2a4>
 800a1a4:	e7ed      	b.n	800a182 <_strtod_l+0x102>
 800a1a6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a1aa:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800a1ae:	e7e8      	b.n	800a182 <_strtod_l+0x102>
 800a1b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a1b2:	1c5a      	adds	r2, r3, #1
 800a1b4:	9217      	str	r2, [sp, #92]	; 0x5c
 800a1b6:	785b      	ldrb	r3, [r3, #1]
 800a1b8:	2b30      	cmp	r3, #48	; 0x30
 800a1ba:	d0f9      	beq.n	800a1b0 <_strtod_l+0x130>
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d0a3      	beq.n	800a108 <_strtod_l+0x88>
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	f04f 0900 	mov.w	r9, #0
 800a1c6:	9304      	str	r3, [sp, #16]
 800a1c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a1ca:	9308      	str	r3, [sp, #32]
 800a1cc:	f8cd 901c 	str.w	r9, [sp, #28]
 800a1d0:	464f      	mov	r7, r9
 800a1d2:	220a      	movs	r2, #10
 800a1d4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a1d6:	7806      	ldrb	r6, [r0, #0]
 800a1d8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a1dc:	b2d9      	uxtb	r1, r3
 800a1de:	2909      	cmp	r1, #9
 800a1e0:	d92a      	bls.n	800a238 <_strtod_l+0x1b8>
 800a1e2:	9905      	ldr	r1, [sp, #20]
 800a1e4:	462a      	mov	r2, r5
 800a1e6:	f002 ff0f 	bl	800d008 <strncmp>
 800a1ea:	b398      	cbz	r0, 800a254 <_strtod_l+0x1d4>
 800a1ec:	2000      	movs	r0, #0
 800a1ee:	4632      	mov	r2, r6
 800a1f0:	463d      	mov	r5, r7
 800a1f2:	9005      	str	r0, [sp, #20]
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	2a65      	cmp	r2, #101	; 0x65
 800a1f8:	d001      	beq.n	800a1fe <_strtod_l+0x17e>
 800a1fa:	2a45      	cmp	r2, #69	; 0x45
 800a1fc:	d118      	bne.n	800a230 <_strtod_l+0x1b0>
 800a1fe:	b91d      	cbnz	r5, 800a208 <_strtod_l+0x188>
 800a200:	9a04      	ldr	r2, [sp, #16]
 800a202:	4302      	orrs	r2, r0
 800a204:	d09e      	beq.n	800a144 <_strtod_l+0xc4>
 800a206:	2500      	movs	r5, #0
 800a208:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800a20c:	f108 0201 	add.w	r2, r8, #1
 800a210:	9217      	str	r2, [sp, #92]	; 0x5c
 800a212:	f898 2001 	ldrb.w	r2, [r8, #1]
 800a216:	2a2b      	cmp	r2, #43	; 0x2b
 800a218:	d075      	beq.n	800a306 <_strtod_l+0x286>
 800a21a:	2a2d      	cmp	r2, #45	; 0x2d
 800a21c:	d07b      	beq.n	800a316 <_strtod_l+0x296>
 800a21e:	f04f 0c00 	mov.w	ip, #0
 800a222:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a226:	2909      	cmp	r1, #9
 800a228:	f240 8082 	bls.w	800a330 <_strtod_l+0x2b0>
 800a22c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a230:	2600      	movs	r6, #0
 800a232:	e09d      	b.n	800a370 <_strtod_l+0x2f0>
 800a234:	2300      	movs	r3, #0
 800a236:	e7c4      	b.n	800a1c2 <_strtod_l+0x142>
 800a238:	2f08      	cmp	r7, #8
 800a23a:	bfd8      	it	le
 800a23c:	9907      	ldrle	r1, [sp, #28]
 800a23e:	f100 0001 	add.w	r0, r0, #1
 800a242:	bfda      	itte	le
 800a244:	fb02 3301 	mlale	r3, r2, r1, r3
 800a248:	9307      	strle	r3, [sp, #28]
 800a24a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800a24e:	3701      	adds	r7, #1
 800a250:	9017      	str	r0, [sp, #92]	; 0x5c
 800a252:	e7bf      	b.n	800a1d4 <_strtod_l+0x154>
 800a254:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a256:	195a      	adds	r2, r3, r5
 800a258:	9217      	str	r2, [sp, #92]	; 0x5c
 800a25a:	5d5a      	ldrb	r2, [r3, r5]
 800a25c:	2f00      	cmp	r7, #0
 800a25e:	d037      	beq.n	800a2d0 <_strtod_l+0x250>
 800a260:	9005      	str	r0, [sp, #20]
 800a262:	463d      	mov	r5, r7
 800a264:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a268:	2b09      	cmp	r3, #9
 800a26a:	d912      	bls.n	800a292 <_strtod_l+0x212>
 800a26c:	2301      	movs	r3, #1
 800a26e:	e7c2      	b.n	800a1f6 <_strtod_l+0x176>
 800a270:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a272:	1c5a      	adds	r2, r3, #1
 800a274:	9217      	str	r2, [sp, #92]	; 0x5c
 800a276:	785a      	ldrb	r2, [r3, #1]
 800a278:	3001      	adds	r0, #1
 800a27a:	2a30      	cmp	r2, #48	; 0x30
 800a27c:	d0f8      	beq.n	800a270 <_strtod_l+0x1f0>
 800a27e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a282:	2b08      	cmp	r3, #8
 800a284:	f200 84d9 	bhi.w	800ac3a <_strtod_l+0xbba>
 800a288:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a28a:	9005      	str	r0, [sp, #20]
 800a28c:	2000      	movs	r0, #0
 800a28e:	9308      	str	r3, [sp, #32]
 800a290:	4605      	mov	r5, r0
 800a292:	3a30      	subs	r2, #48	; 0x30
 800a294:	f100 0301 	add.w	r3, r0, #1
 800a298:	d014      	beq.n	800a2c4 <_strtod_l+0x244>
 800a29a:	9905      	ldr	r1, [sp, #20]
 800a29c:	4419      	add	r1, r3
 800a29e:	9105      	str	r1, [sp, #20]
 800a2a0:	462b      	mov	r3, r5
 800a2a2:	eb00 0e05 	add.w	lr, r0, r5
 800a2a6:	210a      	movs	r1, #10
 800a2a8:	4573      	cmp	r3, lr
 800a2aa:	d113      	bne.n	800a2d4 <_strtod_l+0x254>
 800a2ac:	182b      	adds	r3, r5, r0
 800a2ae:	2b08      	cmp	r3, #8
 800a2b0:	f105 0501 	add.w	r5, r5, #1
 800a2b4:	4405      	add	r5, r0
 800a2b6:	dc1c      	bgt.n	800a2f2 <_strtod_l+0x272>
 800a2b8:	9907      	ldr	r1, [sp, #28]
 800a2ba:	230a      	movs	r3, #10
 800a2bc:	fb03 2301 	mla	r3, r3, r1, r2
 800a2c0:	9307      	str	r3, [sp, #28]
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a2c6:	1c51      	adds	r1, r2, #1
 800a2c8:	9117      	str	r1, [sp, #92]	; 0x5c
 800a2ca:	7852      	ldrb	r2, [r2, #1]
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	e7c9      	b.n	800a264 <_strtod_l+0x1e4>
 800a2d0:	4638      	mov	r0, r7
 800a2d2:	e7d2      	b.n	800a27a <_strtod_l+0x1fa>
 800a2d4:	2b08      	cmp	r3, #8
 800a2d6:	dc04      	bgt.n	800a2e2 <_strtod_l+0x262>
 800a2d8:	9e07      	ldr	r6, [sp, #28]
 800a2da:	434e      	muls	r6, r1
 800a2dc:	9607      	str	r6, [sp, #28]
 800a2de:	3301      	adds	r3, #1
 800a2e0:	e7e2      	b.n	800a2a8 <_strtod_l+0x228>
 800a2e2:	f103 0c01 	add.w	ip, r3, #1
 800a2e6:	f1bc 0f10 	cmp.w	ip, #16
 800a2ea:	bfd8      	it	le
 800a2ec:	fb01 f909 	mulle.w	r9, r1, r9
 800a2f0:	e7f5      	b.n	800a2de <_strtod_l+0x25e>
 800a2f2:	2d10      	cmp	r5, #16
 800a2f4:	bfdc      	itt	le
 800a2f6:	230a      	movle	r3, #10
 800a2f8:	fb03 2909 	mlale	r9, r3, r9, r2
 800a2fc:	e7e1      	b.n	800a2c2 <_strtod_l+0x242>
 800a2fe:	2300      	movs	r3, #0
 800a300:	9305      	str	r3, [sp, #20]
 800a302:	2301      	movs	r3, #1
 800a304:	e77c      	b.n	800a200 <_strtod_l+0x180>
 800a306:	f04f 0c00 	mov.w	ip, #0
 800a30a:	f108 0202 	add.w	r2, r8, #2
 800a30e:	9217      	str	r2, [sp, #92]	; 0x5c
 800a310:	f898 2002 	ldrb.w	r2, [r8, #2]
 800a314:	e785      	b.n	800a222 <_strtod_l+0x1a2>
 800a316:	f04f 0c01 	mov.w	ip, #1
 800a31a:	e7f6      	b.n	800a30a <_strtod_l+0x28a>
 800a31c:	0800ee48 	.word	0x0800ee48
 800a320:	0800ebfc 	.word	0x0800ebfc
 800a324:	7ff00000 	.word	0x7ff00000
 800a328:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a32a:	1c51      	adds	r1, r2, #1
 800a32c:	9117      	str	r1, [sp, #92]	; 0x5c
 800a32e:	7852      	ldrb	r2, [r2, #1]
 800a330:	2a30      	cmp	r2, #48	; 0x30
 800a332:	d0f9      	beq.n	800a328 <_strtod_l+0x2a8>
 800a334:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a338:	2908      	cmp	r1, #8
 800a33a:	f63f af79 	bhi.w	800a230 <_strtod_l+0x1b0>
 800a33e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a342:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a344:	9206      	str	r2, [sp, #24]
 800a346:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a348:	1c51      	adds	r1, r2, #1
 800a34a:	9117      	str	r1, [sp, #92]	; 0x5c
 800a34c:	7852      	ldrb	r2, [r2, #1]
 800a34e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800a352:	2e09      	cmp	r6, #9
 800a354:	d937      	bls.n	800a3c6 <_strtod_l+0x346>
 800a356:	9e06      	ldr	r6, [sp, #24]
 800a358:	1b89      	subs	r1, r1, r6
 800a35a:	2908      	cmp	r1, #8
 800a35c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800a360:	dc02      	bgt.n	800a368 <_strtod_l+0x2e8>
 800a362:	4576      	cmp	r6, lr
 800a364:	bfa8      	it	ge
 800a366:	4676      	movge	r6, lr
 800a368:	f1bc 0f00 	cmp.w	ip, #0
 800a36c:	d000      	beq.n	800a370 <_strtod_l+0x2f0>
 800a36e:	4276      	negs	r6, r6
 800a370:	2d00      	cmp	r5, #0
 800a372:	d14d      	bne.n	800a410 <_strtod_l+0x390>
 800a374:	9904      	ldr	r1, [sp, #16]
 800a376:	4301      	orrs	r1, r0
 800a378:	f47f aec6 	bne.w	800a108 <_strtod_l+0x88>
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	f47f aee1 	bne.w	800a144 <_strtod_l+0xc4>
 800a382:	2a69      	cmp	r2, #105	; 0x69
 800a384:	d027      	beq.n	800a3d6 <_strtod_l+0x356>
 800a386:	dc24      	bgt.n	800a3d2 <_strtod_l+0x352>
 800a388:	2a49      	cmp	r2, #73	; 0x49
 800a38a:	d024      	beq.n	800a3d6 <_strtod_l+0x356>
 800a38c:	2a4e      	cmp	r2, #78	; 0x4e
 800a38e:	f47f aed9 	bne.w	800a144 <_strtod_l+0xc4>
 800a392:	499f      	ldr	r1, [pc, #636]	; (800a610 <_strtod_l+0x590>)
 800a394:	a817      	add	r0, sp, #92	; 0x5c
 800a396:	f001 fe3d 	bl	800c014 <__match>
 800a39a:	2800      	cmp	r0, #0
 800a39c:	f43f aed2 	beq.w	800a144 <_strtod_l+0xc4>
 800a3a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a3a2:	781b      	ldrb	r3, [r3, #0]
 800a3a4:	2b28      	cmp	r3, #40	; 0x28
 800a3a6:	d12d      	bne.n	800a404 <_strtod_l+0x384>
 800a3a8:	499a      	ldr	r1, [pc, #616]	; (800a614 <_strtod_l+0x594>)
 800a3aa:	aa1a      	add	r2, sp, #104	; 0x68
 800a3ac:	a817      	add	r0, sp, #92	; 0x5c
 800a3ae:	f001 fe45 	bl	800c03c <__hexnan>
 800a3b2:	2805      	cmp	r0, #5
 800a3b4:	d126      	bne.n	800a404 <_strtod_l+0x384>
 800a3b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a3b8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800a3bc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a3c0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a3c4:	e6a0      	b.n	800a108 <_strtod_l+0x88>
 800a3c6:	210a      	movs	r1, #10
 800a3c8:	fb01 2e0e 	mla	lr, r1, lr, r2
 800a3cc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a3d0:	e7b9      	b.n	800a346 <_strtod_l+0x2c6>
 800a3d2:	2a6e      	cmp	r2, #110	; 0x6e
 800a3d4:	e7db      	b.n	800a38e <_strtod_l+0x30e>
 800a3d6:	4990      	ldr	r1, [pc, #576]	; (800a618 <_strtod_l+0x598>)
 800a3d8:	a817      	add	r0, sp, #92	; 0x5c
 800a3da:	f001 fe1b 	bl	800c014 <__match>
 800a3de:	2800      	cmp	r0, #0
 800a3e0:	f43f aeb0 	beq.w	800a144 <_strtod_l+0xc4>
 800a3e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a3e6:	498d      	ldr	r1, [pc, #564]	; (800a61c <_strtod_l+0x59c>)
 800a3e8:	3b01      	subs	r3, #1
 800a3ea:	a817      	add	r0, sp, #92	; 0x5c
 800a3ec:	9317      	str	r3, [sp, #92]	; 0x5c
 800a3ee:	f001 fe11 	bl	800c014 <__match>
 800a3f2:	b910      	cbnz	r0, 800a3fa <_strtod_l+0x37a>
 800a3f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a3f6:	3301      	adds	r3, #1
 800a3f8:	9317      	str	r3, [sp, #92]	; 0x5c
 800a3fa:	f8df b230 	ldr.w	fp, [pc, #560]	; 800a62c <_strtod_l+0x5ac>
 800a3fe:	f04f 0a00 	mov.w	sl, #0
 800a402:	e681      	b.n	800a108 <_strtod_l+0x88>
 800a404:	4886      	ldr	r0, [pc, #536]	; (800a620 <_strtod_l+0x5a0>)
 800a406:	f002 fde7 	bl	800cfd8 <nan>
 800a40a:	ec5b ab10 	vmov	sl, fp, d0
 800a40e:	e67b      	b.n	800a108 <_strtod_l+0x88>
 800a410:	9b05      	ldr	r3, [sp, #20]
 800a412:	9807      	ldr	r0, [sp, #28]
 800a414:	1af3      	subs	r3, r6, r3
 800a416:	2f00      	cmp	r7, #0
 800a418:	bf08      	it	eq
 800a41a:	462f      	moveq	r7, r5
 800a41c:	2d10      	cmp	r5, #16
 800a41e:	9306      	str	r3, [sp, #24]
 800a420:	46a8      	mov	r8, r5
 800a422:	bfa8      	it	ge
 800a424:	f04f 0810 	movge.w	r8, #16
 800a428:	f7f6 f874 	bl	8000514 <__aeabi_ui2d>
 800a42c:	2d09      	cmp	r5, #9
 800a42e:	4682      	mov	sl, r0
 800a430:	468b      	mov	fp, r1
 800a432:	dd13      	ble.n	800a45c <_strtod_l+0x3dc>
 800a434:	4b7b      	ldr	r3, [pc, #492]	; (800a624 <_strtod_l+0x5a4>)
 800a436:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a43a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a43e:	f7f6 f8e3 	bl	8000608 <__aeabi_dmul>
 800a442:	4682      	mov	sl, r0
 800a444:	4648      	mov	r0, r9
 800a446:	468b      	mov	fp, r1
 800a448:	f7f6 f864 	bl	8000514 <__aeabi_ui2d>
 800a44c:	4602      	mov	r2, r0
 800a44e:	460b      	mov	r3, r1
 800a450:	4650      	mov	r0, sl
 800a452:	4659      	mov	r1, fp
 800a454:	f7f5 ff22 	bl	800029c <__adddf3>
 800a458:	4682      	mov	sl, r0
 800a45a:	468b      	mov	fp, r1
 800a45c:	2d0f      	cmp	r5, #15
 800a45e:	dc38      	bgt.n	800a4d2 <_strtod_l+0x452>
 800a460:	9b06      	ldr	r3, [sp, #24]
 800a462:	2b00      	cmp	r3, #0
 800a464:	f43f ae50 	beq.w	800a108 <_strtod_l+0x88>
 800a468:	dd24      	ble.n	800a4b4 <_strtod_l+0x434>
 800a46a:	2b16      	cmp	r3, #22
 800a46c:	dc0b      	bgt.n	800a486 <_strtod_l+0x406>
 800a46e:	496d      	ldr	r1, [pc, #436]	; (800a624 <_strtod_l+0x5a4>)
 800a470:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a474:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a478:	4652      	mov	r2, sl
 800a47a:	465b      	mov	r3, fp
 800a47c:	f7f6 f8c4 	bl	8000608 <__aeabi_dmul>
 800a480:	4682      	mov	sl, r0
 800a482:	468b      	mov	fp, r1
 800a484:	e640      	b.n	800a108 <_strtod_l+0x88>
 800a486:	9a06      	ldr	r2, [sp, #24]
 800a488:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800a48c:	4293      	cmp	r3, r2
 800a48e:	db20      	blt.n	800a4d2 <_strtod_l+0x452>
 800a490:	4c64      	ldr	r4, [pc, #400]	; (800a624 <_strtod_l+0x5a4>)
 800a492:	f1c5 050f 	rsb	r5, r5, #15
 800a496:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a49a:	4652      	mov	r2, sl
 800a49c:	465b      	mov	r3, fp
 800a49e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a4a2:	f7f6 f8b1 	bl	8000608 <__aeabi_dmul>
 800a4a6:	9b06      	ldr	r3, [sp, #24]
 800a4a8:	1b5d      	subs	r5, r3, r5
 800a4aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a4ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a4b2:	e7e3      	b.n	800a47c <_strtod_l+0x3fc>
 800a4b4:	9b06      	ldr	r3, [sp, #24]
 800a4b6:	3316      	adds	r3, #22
 800a4b8:	db0b      	blt.n	800a4d2 <_strtod_l+0x452>
 800a4ba:	9b05      	ldr	r3, [sp, #20]
 800a4bc:	1b9e      	subs	r6, r3, r6
 800a4be:	4b59      	ldr	r3, [pc, #356]	; (800a624 <_strtod_l+0x5a4>)
 800a4c0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800a4c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a4c8:	4650      	mov	r0, sl
 800a4ca:	4659      	mov	r1, fp
 800a4cc:	f7f6 f9c6 	bl	800085c <__aeabi_ddiv>
 800a4d0:	e7d6      	b.n	800a480 <_strtod_l+0x400>
 800a4d2:	9b06      	ldr	r3, [sp, #24]
 800a4d4:	eba5 0808 	sub.w	r8, r5, r8
 800a4d8:	4498      	add	r8, r3
 800a4da:	f1b8 0f00 	cmp.w	r8, #0
 800a4de:	dd74      	ble.n	800a5ca <_strtod_l+0x54a>
 800a4e0:	f018 030f 	ands.w	r3, r8, #15
 800a4e4:	d00a      	beq.n	800a4fc <_strtod_l+0x47c>
 800a4e6:	494f      	ldr	r1, [pc, #316]	; (800a624 <_strtod_l+0x5a4>)
 800a4e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a4ec:	4652      	mov	r2, sl
 800a4ee:	465b      	mov	r3, fp
 800a4f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a4f4:	f7f6 f888 	bl	8000608 <__aeabi_dmul>
 800a4f8:	4682      	mov	sl, r0
 800a4fa:	468b      	mov	fp, r1
 800a4fc:	f038 080f 	bics.w	r8, r8, #15
 800a500:	d04f      	beq.n	800a5a2 <_strtod_l+0x522>
 800a502:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a506:	dd22      	ble.n	800a54e <_strtod_l+0x4ce>
 800a508:	2500      	movs	r5, #0
 800a50a:	462e      	mov	r6, r5
 800a50c:	9507      	str	r5, [sp, #28]
 800a50e:	9505      	str	r5, [sp, #20]
 800a510:	2322      	movs	r3, #34	; 0x22
 800a512:	f8df b118 	ldr.w	fp, [pc, #280]	; 800a62c <_strtod_l+0x5ac>
 800a516:	6023      	str	r3, [r4, #0]
 800a518:	f04f 0a00 	mov.w	sl, #0
 800a51c:	9b07      	ldr	r3, [sp, #28]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	f43f adf2 	beq.w	800a108 <_strtod_l+0x88>
 800a524:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a526:	4620      	mov	r0, r4
 800a528:	f001 fe82 	bl	800c230 <_Bfree>
 800a52c:	9905      	ldr	r1, [sp, #20]
 800a52e:	4620      	mov	r0, r4
 800a530:	f001 fe7e 	bl	800c230 <_Bfree>
 800a534:	4631      	mov	r1, r6
 800a536:	4620      	mov	r0, r4
 800a538:	f001 fe7a 	bl	800c230 <_Bfree>
 800a53c:	9907      	ldr	r1, [sp, #28]
 800a53e:	4620      	mov	r0, r4
 800a540:	f001 fe76 	bl	800c230 <_Bfree>
 800a544:	4629      	mov	r1, r5
 800a546:	4620      	mov	r0, r4
 800a548:	f001 fe72 	bl	800c230 <_Bfree>
 800a54c:	e5dc      	b.n	800a108 <_strtod_l+0x88>
 800a54e:	4b36      	ldr	r3, [pc, #216]	; (800a628 <_strtod_l+0x5a8>)
 800a550:	9304      	str	r3, [sp, #16]
 800a552:	2300      	movs	r3, #0
 800a554:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a558:	4650      	mov	r0, sl
 800a55a:	4659      	mov	r1, fp
 800a55c:	4699      	mov	r9, r3
 800a55e:	f1b8 0f01 	cmp.w	r8, #1
 800a562:	dc21      	bgt.n	800a5a8 <_strtod_l+0x528>
 800a564:	b10b      	cbz	r3, 800a56a <_strtod_l+0x4ea>
 800a566:	4682      	mov	sl, r0
 800a568:	468b      	mov	fp, r1
 800a56a:	4b2f      	ldr	r3, [pc, #188]	; (800a628 <_strtod_l+0x5a8>)
 800a56c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a570:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800a574:	4652      	mov	r2, sl
 800a576:	465b      	mov	r3, fp
 800a578:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a57c:	f7f6 f844 	bl	8000608 <__aeabi_dmul>
 800a580:	4b2a      	ldr	r3, [pc, #168]	; (800a62c <_strtod_l+0x5ac>)
 800a582:	460a      	mov	r2, r1
 800a584:	400b      	ands	r3, r1
 800a586:	492a      	ldr	r1, [pc, #168]	; (800a630 <_strtod_l+0x5b0>)
 800a588:	428b      	cmp	r3, r1
 800a58a:	4682      	mov	sl, r0
 800a58c:	d8bc      	bhi.n	800a508 <_strtod_l+0x488>
 800a58e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a592:	428b      	cmp	r3, r1
 800a594:	bf86      	itte	hi
 800a596:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800a634 <_strtod_l+0x5b4>
 800a59a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800a59e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	9304      	str	r3, [sp, #16]
 800a5a6:	e084      	b.n	800a6b2 <_strtod_l+0x632>
 800a5a8:	f018 0f01 	tst.w	r8, #1
 800a5ac:	d005      	beq.n	800a5ba <_strtod_l+0x53a>
 800a5ae:	9b04      	ldr	r3, [sp, #16]
 800a5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b4:	f7f6 f828 	bl	8000608 <__aeabi_dmul>
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	9a04      	ldr	r2, [sp, #16]
 800a5bc:	3208      	adds	r2, #8
 800a5be:	f109 0901 	add.w	r9, r9, #1
 800a5c2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a5c6:	9204      	str	r2, [sp, #16]
 800a5c8:	e7c9      	b.n	800a55e <_strtod_l+0x4de>
 800a5ca:	d0ea      	beq.n	800a5a2 <_strtod_l+0x522>
 800a5cc:	f1c8 0800 	rsb	r8, r8, #0
 800a5d0:	f018 020f 	ands.w	r2, r8, #15
 800a5d4:	d00a      	beq.n	800a5ec <_strtod_l+0x56c>
 800a5d6:	4b13      	ldr	r3, [pc, #76]	; (800a624 <_strtod_l+0x5a4>)
 800a5d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a5dc:	4650      	mov	r0, sl
 800a5de:	4659      	mov	r1, fp
 800a5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e4:	f7f6 f93a 	bl	800085c <__aeabi_ddiv>
 800a5e8:	4682      	mov	sl, r0
 800a5ea:	468b      	mov	fp, r1
 800a5ec:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a5f0:	d0d7      	beq.n	800a5a2 <_strtod_l+0x522>
 800a5f2:	f1b8 0f1f 	cmp.w	r8, #31
 800a5f6:	dd1f      	ble.n	800a638 <_strtod_l+0x5b8>
 800a5f8:	2500      	movs	r5, #0
 800a5fa:	462e      	mov	r6, r5
 800a5fc:	9507      	str	r5, [sp, #28]
 800a5fe:	9505      	str	r5, [sp, #20]
 800a600:	2322      	movs	r3, #34	; 0x22
 800a602:	f04f 0a00 	mov.w	sl, #0
 800a606:	f04f 0b00 	mov.w	fp, #0
 800a60a:	6023      	str	r3, [r4, #0]
 800a60c:	e786      	b.n	800a51c <_strtod_l+0x49c>
 800a60e:	bf00      	nop
 800a610:	0800ebcd 	.word	0x0800ebcd
 800a614:	0800ec10 	.word	0x0800ec10
 800a618:	0800ebc5 	.word	0x0800ebc5
 800a61c:	0800ed54 	.word	0x0800ed54
 800a620:	0800f000 	.word	0x0800f000
 800a624:	0800eee0 	.word	0x0800eee0
 800a628:	0800eeb8 	.word	0x0800eeb8
 800a62c:	7ff00000 	.word	0x7ff00000
 800a630:	7ca00000 	.word	0x7ca00000
 800a634:	7fefffff 	.word	0x7fefffff
 800a638:	f018 0310 	ands.w	r3, r8, #16
 800a63c:	bf18      	it	ne
 800a63e:	236a      	movne	r3, #106	; 0x6a
 800a640:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800a9f0 <_strtod_l+0x970>
 800a644:	9304      	str	r3, [sp, #16]
 800a646:	4650      	mov	r0, sl
 800a648:	4659      	mov	r1, fp
 800a64a:	2300      	movs	r3, #0
 800a64c:	f018 0f01 	tst.w	r8, #1
 800a650:	d004      	beq.n	800a65c <_strtod_l+0x5dc>
 800a652:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a656:	f7f5 ffd7 	bl	8000608 <__aeabi_dmul>
 800a65a:	2301      	movs	r3, #1
 800a65c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800a660:	f109 0908 	add.w	r9, r9, #8
 800a664:	d1f2      	bne.n	800a64c <_strtod_l+0x5cc>
 800a666:	b10b      	cbz	r3, 800a66c <_strtod_l+0x5ec>
 800a668:	4682      	mov	sl, r0
 800a66a:	468b      	mov	fp, r1
 800a66c:	9b04      	ldr	r3, [sp, #16]
 800a66e:	b1c3      	cbz	r3, 800a6a2 <_strtod_l+0x622>
 800a670:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a674:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a678:	2b00      	cmp	r3, #0
 800a67a:	4659      	mov	r1, fp
 800a67c:	dd11      	ble.n	800a6a2 <_strtod_l+0x622>
 800a67e:	2b1f      	cmp	r3, #31
 800a680:	f340 8124 	ble.w	800a8cc <_strtod_l+0x84c>
 800a684:	2b34      	cmp	r3, #52	; 0x34
 800a686:	bfde      	ittt	le
 800a688:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a68c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800a690:	fa03 f202 	lslle.w	r2, r3, r2
 800a694:	f04f 0a00 	mov.w	sl, #0
 800a698:	bfcc      	ite	gt
 800a69a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a69e:	ea02 0b01 	andle.w	fp, r2, r1
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	4650      	mov	r0, sl
 800a6a8:	4659      	mov	r1, fp
 800a6aa:	f7f6 fa15 	bl	8000ad8 <__aeabi_dcmpeq>
 800a6ae:	2800      	cmp	r0, #0
 800a6b0:	d1a2      	bne.n	800a5f8 <_strtod_l+0x578>
 800a6b2:	9b07      	ldr	r3, [sp, #28]
 800a6b4:	9300      	str	r3, [sp, #0]
 800a6b6:	9908      	ldr	r1, [sp, #32]
 800a6b8:	462b      	mov	r3, r5
 800a6ba:	463a      	mov	r2, r7
 800a6bc:	4620      	mov	r0, r4
 800a6be:	f001 fe1f 	bl	800c300 <__s2b>
 800a6c2:	9007      	str	r0, [sp, #28]
 800a6c4:	2800      	cmp	r0, #0
 800a6c6:	f43f af1f 	beq.w	800a508 <_strtod_l+0x488>
 800a6ca:	9b05      	ldr	r3, [sp, #20]
 800a6cc:	1b9e      	subs	r6, r3, r6
 800a6ce:	9b06      	ldr	r3, [sp, #24]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	bfb4      	ite	lt
 800a6d4:	4633      	movlt	r3, r6
 800a6d6:	2300      	movge	r3, #0
 800a6d8:	930c      	str	r3, [sp, #48]	; 0x30
 800a6da:	9b06      	ldr	r3, [sp, #24]
 800a6dc:	2500      	movs	r5, #0
 800a6de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a6e2:	9312      	str	r3, [sp, #72]	; 0x48
 800a6e4:	462e      	mov	r6, r5
 800a6e6:	9b07      	ldr	r3, [sp, #28]
 800a6e8:	4620      	mov	r0, r4
 800a6ea:	6859      	ldr	r1, [r3, #4]
 800a6ec:	f001 fd60 	bl	800c1b0 <_Balloc>
 800a6f0:	9005      	str	r0, [sp, #20]
 800a6f2:	2800      	cmp	r0, #0
 800a6f4:	f43f af0c 	beq.w	800a510 <_strtod_l+0x490>
 800a6f8:	9b07      	ldr	r3, [sp, #28]
 800a6fa:	691a      	ldr	r2, [r3, #16]
 800a6fc:	3202      	adds	r2, #2
 800a6fe:	f103 010c 	add.w	r1, r3, #12
 800a702:	0092      	lsls	r2, r2, #2
 800a704:	300c      	adds	r0, #12
 800a706:	f7fe fdd9 	bl	80092bc <memcpy>
 800a70a:	ec4b ab10 	vmov	d0, sl, fp
 800a70e:	aa1a      	add	r2, sp, #104	; 0x68
 800a710:	a919      	add	r1, sp, #100	; 0x64
 800a712:	4620      	mov	r0, r4
 800a714:	f002 f93a 	bl	800c98c <__d2b>
 800a718:	ec4b ab18 	vmov	d8, sl, fp
 800a71c:	9018      	str	r0, [sp, #96]	; 0x60
 800a71e:	2800      	cmp	r0, #0
 800a720:	f43f aef6 	beq.w	800a510 <_strtod_l+0x490>
 800a724:	2101      	movs	r1, #1
 800a726:	4620      	mov	r0, r4
 800a728:	f001 fe84 	bl	800c434 <__i2b>
 800a72c:	4606      	mov	r6, r0
 800a72e:	2800      	cmp	r0, #0
 800a730:	f43f aeee 	beq.w	800a510 <_strtod_l+0x490>
 800a734:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a736:	9904      	ldr	r1, [sp, #16]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	bfab      	itete	ge
 800a73c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800a73e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800a740:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a742:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800a746:	bfac      	ite	ge
 800a748:	eb03 0902 	addge.w	r9, r3, r2
 800a74c:	1ad7      	sublt	r7, r2, r3
 800a74e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a750:	eba3 0801 	sub.w	r8, r3, r1
 800a754:	4490      	add	r8, r2
 800a756:	4ba1      	ldr	r3, [pc, #644]	; (800a9dc <_strtod_l+0x95c>)
 800a758:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800a75c:	4598      	cmp	r8, r3
 800a75e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a762:	f280 80c7 	bge.w	800a8f4 <_strtod_l+0x874>
 800a766:	eba3 0308 	sub.w	r3, r3, r8
 800a76a:	2b1f      	cmp	r3, #31
 800a76c:	eba2 0203 	sub.w	r2, r2, r3
 800a770:	f04f 0101 	mov.w	r1, #1
 800a774:	f300 80b1 	bgt.w	800a8da <_strtod_l+0x85a>
 800a778:	fa01 f303 	lsl.w	r3, r1, r3
 800a77c:	930d      	str	r3, [sp, #52]	; 0x34
 800a77e:	2300      	movs	r3, #0
 800a780:	9308      	str	r3, [sp, #32]
 800a782:	eb09 0802 	add.w	r8, r9, r2
 800a786:	9b04      	ldr	r3, [sp, #16]
 800a788:	45c1      	cmp	r9, r8
 800a78a:	4417      	add	r7, r2
 800a78c:	441f      	add	r7, r3
 800a78e:	464b      	mov	r3, r9
 800a790:	bfa8      	it	ge
 800a792:	4643      	movge	r3, r8
 800a794:	42bb      	cmp	r3, r7
 800a796:	bfa8      	it	ge
 800a798:	463b      	movge	r3, r7
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	bfc2      	ittt	gt
 800a79e:	eba8 0803 	subgt.w	r8, r8, r3
 800a7a2:	1aff      	subgt	r7, r7, r3
 800a7a4:	eba9 0903 	subgt.w	r9, r9, r3
 800a7a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	dd17      	ble.n	800a7de <_strtod_l+0x75e>
 800a7ae:	4631      	mov	r1, r6
 800a7b0:	461a      	mov	r2, r3
 800a7b2:	4620      	mov	r0, r4
 800a7b4:	f001 fefe 	bl	800c5b4 <__pow5mult>
 800a7b8:	4606      	mov	r6, r0
 800a7ba:	2800      	cmp	r0, #0
 800a7bc:	f43f aea8 	beq.w	800a510 <_strtod_l+0x490>
 800a7c0:	4601      	mov	r1, r0
 800a7c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a7c4:	4620      	mov	r0, r4
 800a7c6:	f001 fe4b 	bl	800c460 <__multiply>
 800a7ca:	900b      	str	r0, [sp, #44]	; 0x2c
 800a7cc:	2800      	cmp	r0, #0
 800a7ce:	f43f ae9f 	beq.w	800a510 <_strtod_l+0x490>
 800a7d2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a7d4:	4620      	mov	r0, r4
 800a7d6:	f001 fd2b 	bl	800c230 <_Bfree>
 800a7da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7dc:	9318      	str	r3, [sp, #96]	; 0x60
 800a7de:	f1b8 0f00 	cmp.w	r8, #0
 800a7e2:	f300 808c 	bgt.w	800a8fe <_strtod_l+0x87e>
 800a7e6:	9b06      	ldr	r3, [sp, #24]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	dd08      	ble.n	800a7fe <_strtod_l+0x77e>
 800a7ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a7ee:	9905      	ldr	r1, [sp, #20]
 800a7f0:	4620      	mov	r0, r4
 800a7f2:	f001 fedf 	bl	800c5b4 <__pow5mult>
 800a7f6:	9005      	str	r0, [sp, #20]
 800a7f8:	2800      	cmp	r0, #0
 800a7fa:	f43f ae89 	beq.w	800a510 <_strtod_l+0x490>
 800a7fe:	2f00      	cmp	r7, #0
 800a800:	dd08      	ble.n	800a814 <_strtod_l+0x794>
 800a802:	9905      	ldr	r1, [sp, #20]
 800a804:	463a      	mov	r2, r7
 800a806:	4620      	mov	r0, r4
 800a808:	f001 ff2e 	bl	800c668 <__lshift>
 800a80c:	9005      	str	r0, [sp, #20]
 800a80e:	2800      	cmp	r0, #0
 800a810:	f43f ae7e 	beq.w	800a510 <_strtod_l+0x490>
 800a814:	f1b9 0f00 	cmp.w	r9, #0
 800a818:	dd08      	ble.n	800a82c <_strtod_l+0x7ac>
 800a81a:	4631      	mov	r1, r6
 800a81c:	464a      	mov	r2, r9
 800a81e:	4620      	mov	r0, r4
 800a820:	f001 ff22 	bl	800c668 <__lshift>
 800a824:	4606      	mov	r6, r0
 800a826:	2800      	cmp	r0, #0
 800a828:	f43f ae72 	beq.w	800a510 <_strtod_l+0x490>
 800a82c:	9a05      	ldr	r2, [sp, #20]
 800a82e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a830:	4620      	mov	r0, r4
 800a832:	f001 ffa5 	bl	800c780 <__mdiff>
 800a836:	4605      	mov	r5, r0
 800a838:	2800      	cmp	r0, #0
 800a83a:	f43f ae69 	beq.w	800a510 <_strtod_l+0x490>
 800a83e:	68c3      	ldr	r3, [r0, #12]
 800a840:	930b      	str	r3, [sp, #44]	; 0x2c
 800a842:	2300      	movs	r3, #0
 800a844:	60c3      	str	r3, [r0, #12]
 800a846:	4631      	mov	r1, r6
 800a848:	f001 ff7e 	bl	800c748 <__mcmp>
 800a84c:	2800      	cmp	r0, #0
 800a84e:	da60      	bge.n	800a912 <_strtod_l+0x892>
 800a850:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a852:	ea53 030a 	orrs.w	r3, r3, sl
 800a856:	f040 8082 	bne.w	800a95e <_strtod_l+0x8de>
 800a85a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d17d      	bne.n	800a95e <_strtod_l+0x8de>
 800a862:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a866:	0d1b      	lsrs	r3, r3, #20
 800a868:	051b      	lsls	r3, r3, #20
 800a86a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a86e:	d976      	bls.n	800a95e <_strtod_l+0x8de>
 800a870:	696b      	ldr	r3, [r5, #20]
 800a872:	b913      	cbnz	r3, 800a87a <_strtod_l+0x7fa>
 800a874:	692b      	ldr	r3, [r5, #16]
 800a876:	2b01      	cmp	r3, #1
 800a878:	dd71      	ble.n	800a95e <_strtod_l+0x8de>
 800a87a:	4629      	mov	r1, r5
 800a87c:	2201      	movs	r2, #1
 800a87e:	4620      	mov	r0, r4
 800a880:	f001 fef2 	bl	800c668 <__lshift>
 800a884:	4631      	mov	r1, r6
 800a886:	4605      	mov	r5, r0
 800a888:	f001 ff5e 	bl	800c748 <__mcmp>
 800a88c:	2800      	cmp	r0, #0
 800a88e:	dd66      	ble.n	800a95e <_strtod_l+0x8de>
 800a890:	9904      	ldr	r1, [sp, #16]
 800a892:	4a53      	ldr	r2, [pc, #332]	; (800a9e0 <_strtod_l+0x960>)
 800a894:	465b      	mov	r3, fp
 800a896:	2900      	cmp	r1, #0
 800a898:	f000 8081 	beq.w	800a99e <_strtod_l+0x91e>
 800a89c:	ea02 010b 	and.w	r1, r2, fp
 800a8a0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a8a4:	dc7b      	bgt.n	800a99e <_strtod_l+0x91e>
 800a8a6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a8aa:	f77f aea9 	ble.w	800a600 <_strtod_l+0x580>
 800a8ae:	4b4d      	ldr	r3, [pc, #308]	; (800a9e4 <_strtod_l+0x964>)
 800a8b0:	4650      	mov	r0, sl
 800a8b2:	4659      	mov	r1, fp
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	f7f5 fea7 	bl	8000608 <__aeabi_dmul>
 800a8ba:	460b      	mov	r3, r1
 800a8bc:	4303      	orrs	r3, r0
 800a8be:	bf08      	it	eq
 800a8c0:	2322      	moveq	r3, #34	; 0x22
 800a8c2:	4682      	mov	sl, r0
 800a8c4:	468b      	mov	fp, r1
 800a8c6:	bf08      	it	eq
 800a8c8:	6023      	streq	r3, [r4, #0]
 800a8ca:	e62b      	b.n	800a524 <_strtod_l+0x4a4>
 800a8cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a8d0:	fa02 f303 	lsl.w	r3, r2, r3
 800a8d4:	ea03 0a0a 	and.w	sl, r3, sl
 800a8d8:	e6e3      	b.n	800a6a2 <_strtod_l+0x622>
 800a8da:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800a8de:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800a8e2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800a8e6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800a8ea:	fa01 f308 	lsl.w	r3, r1, r8
 800a8ee:	9308      	str	r3, [sp, #32]
 800a8f0:	910d      	str	r1, [sp, #52]	; 0x34
 800a8f2:	e746      	b.n	800a782 <_strtod_l+0x702>
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	9308      	str	r3, [sp, #32]
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	930d      	str	r3, [sp, #52]	; 0x34
 800a8fc:	e741      	b.n	800a782 <_strtod_l+0x702>
 800a8fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a900:	4642      	mov	r2, r8
 800a902:	4620      	mov	r0, r4
 800a904:	f001 feb0 	bl	800c668 <__lshift>
 800a908:	9018      	str	r0, [sp, #96]	; 0x60
 800a90a:	2800      	cmp	r0, #0
 800a90c:	f47f af6b 	bne.w	800a7e6 <_strtod_l+0x766>
 800a910:	e5fe      	b.n	800a510 <_strtod_l+0x490>
 800a912:	465f      	mov	r7, fp
 800a914:	d16e      	bne.n	800a9f4 <_strtod_l+0x974>
 800a916:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a918:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a91c:	b342      	cbz	r2, 800a970 <_strtod_l+0x8f0>
 800a91e:	4a32      	ldr	r2, [pc, #200]	; (800a9e8 <_strtod_l+0x968>)
 800a920:	4293      	cmp	r3, r2
 800a922:	d128      	bne.n	800a976 <_strtod_l+0x8f6>
 800a924:	9b04      	ldr	r3, [sp, #16]
 800a926:	4651      	mov	r1, sl
 800a928:	b1eb      	cbz	r3, 800a966 <_strtod_l+0x8e6>
 800a92a:	4b2d      	ldr	r3, [pc, #180]	; (800a9e0 <_strtod_l+0x960>)
 800a92c:	403b      	ands	r3, r7
 800a92e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a932:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a936:	d819      	bhi.n	800a96c <_strtod_l+0x8ec>
 800a938:	0d1b      	lsrs	r3, r3, #20
 800a93a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a93e:	fa02 f303 	lsl.w	r3, r2, r3
 800a942:	4299      	cmp	r1, r3
 800a944:	d117      	bne.n	800a976 <_strtod_l+0x8f6>
 800a946:	4b29      	ldr	r3, [pc, #164]	; (800a9ec <_strtod_l+0x96c>)
 800a948:	429f      	cmp	r7, r3
 800a94a:	d102      	bne.n	800a952 <_strtod_l+0x8d2>
 800a94c:	3101      	adds	r1, #1
 800a94e:	f43f addf 	beq.w	800a510 <_strtod_l+0x490>
 800a952:	4b23      	ldr	r3, [pc, #140]	; (800a9e0 <_strtod_l+0x960>)
 800a954:	403b      	ands	r3, r7
 800a956:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a95a:	f04f 0a00 	mov.w	sl, #0
 800a95e:	9b04      	ldr	r3, [sp, #16]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d1a4      	bne.n	800a8ae <_strtod_l+0x82e>
 800a964:	e5de      	b.n	800a524 <_strtod_l+0x4a4>
 800a966:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a96a:	e7ea      	b.n	800a942 <_strtod_l+0x8c2>
 800a96c:	4613      	mov	r3, r2
 800a96e:	e7e8      	b.n	800a942 <_strtod_l+0x8c2>
 800a970:	ea53 030a 	orrs.w	r3, r3, sl
 800a974:	d08c      	beq.n	800a890 <_strtod_l+0x810>
 800a976:	9b08      	ldr	r3, [sp, #32]
 800a978:	b1db      	cbz	r3, 800a9b2 <_strtod_l+0x932>
 800a97a:	423b      	tst	r3, r7
 800a97c:	d0ef      	beq.n	800a95e <_strtod_l+0x8de>
 800a97e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a980:	9a04      	ldr	r2, [sp, #16]
 800a982:	4650      	mov	r0, sl
 800a984:	4659      	mov	r1, fp
 800a986:	b1c3      	cbz	r3, 800a9ba <_strtod_l+0x93a>
 800a988:	f7ff fb5d 	bl	800a046 <sulp>
 800a98c:	4602      	mov	r2, r0
 800a98e:	460b      	mov	r3, r1
 800a990:	ec51 0b18 	vmov	r0, r1, d8
 800a994:	f7f5 fc82 	bl	800029c <__adddf3>
 800a998:	4682      	mov	sl, r0
 800a99a:	468b      	mov	fp, r1
 800a99c:	e7df      	b.n	800a95e <_strtod_l+0x8de>
 800a99e:	4013      	ands	r3, r2
 800a9a0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a9a4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a9a8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a9ac:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800a9b0:	e7d5      	b.n	800a95e <_strtod_l+0x8de>
 800a9b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a9b4:	ea13 0f0a 	tst.w	r3, sl
 800a9b8:	e7e0      	b.n	800a97c <_strtod_l+0x8fc>
 800a9ba:	f7ff fb44 	bl	800a046 <sulp>
 800a9be:	4602      	mov	r2, r0
 800a9c0:	460b      	mov	r3, r1
 800a9c2:	ec51 0b18 	vmov	r0, r1, d8
 800a9c6:	f7f5 fc67 	bl	8000298 <__aeabi_dsub>
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	4682      	mov	sl, r0
 800a9d0:	468b      	mov	fp, r1
 800a9d2:	f7f6 f881 	bl	8000ad8 <__aeabi_dcmpeq>
 800a9d6:	2800      	cmp	r0, #0
 800a9d8:	d0c1      	beq.n	800a95e <_strtod_l+0x8de>
 800a9da:	e611      	b.n	800a600 <_strtod_l+0x580>
 800a9dc:	fffffc02 	.word	0xfffffc02
 800a9e0:	7ff00000 	.word	0x7ff00000
 800a9e4:	39500000 	.word	0x39500000
 800a9e8:	000fffff 	.word	0x000fffff
 800a9ec:	7fefffff 	.word	0x7fefffff
 800a9f0:	0800ec28 	.word	0x0800ec28
 800a9f4:	4631      	mov	r1, r6
 800a9f6:	4628      	mov	r0, r5
 800a9f8:	f002 f824 	bl	800ca44 <__ratio>
 800a9fc:	ec59 8b10 	vmov	r8, r9, d0
 800aa00:	ee10 0a10 	vmov	r0, s0
 800aa04:	2200      	movs	r2, #0
 800aa06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800aa0a:	4649      	mov	r1, r9
 800aa0c:	f7f6 f878 	bl	8000b00 <__aeabi_dcmple>
 800aa10:	2800      	cmp	r0, #0
 800aa12:	d07a      	beq.n	800ab0a <_strtod_l+0xa8a>
 800aa14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d04a      	beq.n	800aab0 <_strtod_l+0xa30>
 800aa1a:	4b95      	ldr	r3, [pc, #596]	; (800ac70 <_strtod_l+0xbf0>)
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800aa22:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800ac70 <_strtod_l+0xbf0>
 800aa26:	f04f 0800 	mov.w	r8, #0
 800aa2a:	4b92      	ldr	r3, [pc, #584]	; (800ac74 <_strtod_l+0xbf4>)
 800aa2c:	403b      	ands	r3, r7
 800aa2e:	930d      	str	r3, [sp, #52]	; 0x34
 800aa30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aa32:	4b91      	ldr	r3, [pc, #580]	; (800ac78 <_strtod_l+0xbf8>)
 800aa34:	429a      	cmp	r2, r3
 800aa36:	f040 80b0 	bne.w	800ab9a <_strtod_l+0xb1a>
 800aa3a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800aa3e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800aa42:	ec4b ab10 	vmov	d0, sl, fp
 800aa46:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800aa4a:	f001 ff23 	bl	800c894 <__ulp>
 800aa4e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800aa52:	ec53 2b10 	vmov	r2, r3, d0
 800aa56:	f7f5 fdd7 	bl	8000608 <__aeabi_dmul>
 800aa5a:	4652      	mov	r2, sl
 800aa5c:	465b      	mov	r3, fp
 800aa5e:	f7f5 fc1d 	bl	800029c <__adddf3>
 800aa62:	460b      	mov	r3, r1
 800aa64:	4983      	ldr	r1, [pc, #524]	; (800ac74 <_strtod_l+0xbf4>)
 800aa66:	4a85      	ldr	r2, [pc, #532]	; (800ac7c <_strtod_l+0xbfc>)
 800aa68:	4019      	ands	r1, r3
 800aa6a:	4291      	cmp	r1, r2
 800aa6c:	4682      	mov	sl, r0
 800aa6e:	d960      	bls.n	800ab32 <_strtod_l+0xab2>
 800aa70:	ee18 3a90 	vmov	r3, s17
 800aa74:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800aa78:	4293      	cmp	r3, r2
 800aa7a:	d104      	bne.n	800aa86 <_strtod_l+0xa06>
 800aa7c:	ee18 3a10 	vmov	r3, s16
 800aa80:	3301      	adds	r3, #1
 800aa82:	f43f ad45 	beq.w	800a510 <_strtod_l+0x490>
 800aa86:	f8df b200 	ldr.w	fp, [pc, #512]	; 800ac88 <_strtod_l+0xc08>
 800aa8a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800aa8e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800aa90:	4620      	mov	r0, r4
 800aa92:	f001 fbcd 	bl	800c230 <_Bfree>
 800aa96:	9905      	ldr	r1, [sp, #20]
 800aa98:	4620      	mov	r0, r4
 800aa9a:	f001 fbc9 	bl	800c230 <_Bfree>
 800aa9e:	4631      	mov	r1, r6
 800aaa0:	4620      	mov	r0, r4
 800aaa2:	f001 fbc5 	bl	800c230 <_Bfree>
 800aaa6:	4629      	mov	r1, r5
 800aaa8:	4620      	mov	r0, r4
 800aaaa:	f001 fbc1 	bl	800c230 <_Bfree>
 800aaae:	e61a      	b.n	800a6e6 <_strtod_l+0x666>
 800aab0:	f1ba 0f00 	cmp.w	sl, #0
 800aab4:	d11b      	bne.n	800aaee <_strtod_l+0xa6e>
 800aab6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aaba:	b9f3      	cbnz	r3, 800aafa <_strtod_l+0xa7a>
 800aabc:	4b6c      	ldr	r3, [pc, #432]	; (800ac70 <_strtod_l+0xbf0>)
 800aabe:	2200      	movs	r2, #0
 800aac0:	4640      	mov	r0, r8
 800aac2:	4649      	mov	r1, r9
 800aac4:	f7f6 f812 	bl	8000aec <__aeabi_dcmplt>
 800aac8:	b9d0      	cbnz	r0, 800ab00 <_strtod_l+0xa80>
 800aaca:	4640      	mov	r0, r8
 800aacc:	4649      	mov	r1, r9
 800aace:	4b6c      	ldr	r3, [pc, #432]	; (800ac80 <_strtod_l+0xc00>)
 800aad0:	2200      	movs	r2, #0
 800aad2:	f7f5 fd99 	bl	8000608 <__aeabi_dmul>
 800aad6:	4680      	mov	r8, r0
 800aad8:	4689      	mov	r9, r1
 800aada:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800aade:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800aae2:	9315      	str	r3, [sp, #84]	; 0x54
 800aae4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800aae8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800aaec:	e79d      	b.n	800aa2a <_strtod_l+0x9aa>
 800aaee:	f1ba 0f01 	cmp.w	sl, #1
 800aaf2:	d102      	bne.n	800aafa <_strtod_l+0xa7a>
 800aaf4:	2f00      	cmp	r7, #0
 800aaf6:	f43f ad83 	beq.w	800a600 <_strtod_l+0x580>
 800aafa:	4b62      	ldr	r3, [pc, #392]	; (800ac84 <_strtod_l+0xc04>)
 800aafc:	2200      	movs	r2, #0
 800aafe:	e78e      	b.n	800aa1e <_strtod_l+0x99e>
 800ab00:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800ac80 <_strtod_l+0xc00>
 800ab04:	f04f 0800 	mov.w	r8, #0
 800ab08:	e7e7      	b.n	800aada <_strtod_l+0xa5a>
 800ab0a:	4b5d      	ldr	r3, [pc, #372]	; (800ac80 <_strtod_l+0xc00>)
 800ab0c:	4640      	mov	r0, r8
 800ab0e:	4649      	mov	r1, r9
 800ab10:	2200      	movs	r2, #0
 800ab12:	f7f5 fd79 	bl	8000608 <__aeabi_dmul>
 800ab16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab18:	4680      	mov	r8, r0
 800ab1a:	4689      	mov	r9, r1
 800ab1c:	b933      	cbnz	r3, 800ab2c <_strtod_l+0xaac>
 800ab1e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ab22:	900e      	str	r0, [sp, #56]	; 0x38
 800ab24:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab26:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800ab2a:	e7dd      	b.n	800aae8 <_strtod_l+0xa68>
 800ab2c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800ab30:	e7f9      	b.n	800ab26 <_strtod_l+0xaa6>
 800ab32:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800ab36:	9b04      	ldr	r3, [sp, #16]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d1a8      	bne.n	800aa8e <_strtod_l+0xa0e>
 800ab3c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ab40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ab42:	0d1b      	lsrs	r3, r3, #20
 800ab44:	051b      	lsls	r3, r3, #20
 800ab46:	429a      	cmp	r2, r3
 800ab48:	d1a1      	bne.n	800aa8e <_strtod_l+0xa0e>
 800ab4a:	4640      	mov	r0, r8
 800ab4c:	4649      	mov	r1, r9
 800ab4e:	f7f6 f8bb 	bl	8000cc8 <__aeabi_d2lz>
 800ab52:	f7f5 fd2b 	bl	80005ac <__aeabi_l2d>
 800ab56:	4602      	mov	r2, r0
 800ab58:	460b      	mov	r3, r1
 800ab5a:	4640      	mov	r0, r8
 800ab5c:	4649      	mov	r1, r9
 800ab5e:	f7f5 fb9b 	bl	8000298 <__aeabi_dsub>
 800ab62:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ab64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ab68:	ea43 030a 	orr.w	r3, r3, sl
 800ab6c:	4313      	orrs	r3, r2
 800ab6e:	4680      	mov	r8, r0
 800ab70:	4689      	mov	r9, r1
 800ab72:	d055      	beq.n	800ac20 <_strtod_l+0xba0>
 800ab74:	a336      	add	r3, pc, #216	; (adr r3, 800ac50 <_strtod_l+0xbd0>)
 800ab76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab7a:	f7f5 ffb7 	bl	8000aec <__aeabi_dcmplt>
 800ab7e:	2800      	cmp	r0, #0
 800ab80:	f47f acd0 	bne.w	800a524 <_strtod_l+0x4a4>
 800ab84:	a334      	add	r3, pc, #208	; (adr r3, 800ac58 <_strtod_l+0xbd8>)
 800ab86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab8a:	4640      	mov	r0, r8
 800ab8c:	4649      	mov	r1, r9
 800ab8e:	f7f5 ffcb 	bl	8000b28 <__aeabi_dcmpgt>
 800ab92:	2800      	cmp	r0, #0
 800ab94:	f43f af7b 	beq.w	800aa8e <_strtod_l+0xa0e>
 800ab98:	e4c4      	b.n	800a524 <_strtod_l+0x4a4>
 800ab9a:	9b04      	ldr	r3, [sp, #16]
 800ab9c:	b333      	cbz	r3, 800abec <_strtod_l+0xb6c>
 800ab9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aba0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800aba4:	d822      	bhi.n	800abec <_strtod_l+0xb6c>
 800aba6:	a32e      	add	r3, pc, #184	; (adr r3, 800ac60 <_strtod_l+0xbe0>)
 800aba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abac:	4640      	mov	r0, r8
 800abae:	4649      	mov	r1, r9
 800abb0:	f7f5 ffa6 	bl	8000b00 <__aeabi_dcmple>
 800abb4:	b1a0      	cbz	r0, 800abe0 <_strtod_l+0xb60>
 800abb6:	4649      	mov	r1, r9
 800abb8:	4640      	mov	r0, r8
 800abba:	f7f5 fffd 	bl	8000bb8 <__aeabi_d2uiz>
 800abbe:	2801      	cmp	r0, #1
 800abc0:	bf38      	it	cc
 800abc2:	2001      	movcc	r0, #1
 800abc4:	f7f5 fca6 	bl	8000514 <__aeabi_ui2d>
 800abc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abca:	4680      	mov	r8, r0
 800abcc:	4689      	mov	r9, r1
 800abce:	bb23      	cbnz	r3, 800ac1a <_strtod_l+0xb9a>
 800abd0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800abd4:	9010      	str	r0, [sp, #64]	; 0x40
 800abd6:	9311      	str	r3, [sp, #68]	; 0x44
 800abd8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800abdc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800abe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abe2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800abe4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800abe8:	1a9b      	subs	r3, r3, r2
 800abea:	9309      	str	r3, [sp, #36]	; 0x24
 800abec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800abf0:	eeb0 0a48 	vmov.f32	s0, s16
 800abf4:	eef0 0a68 	vmov.f32	s1, s17
 800abf8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800abfc:	f001 fe4a 	bl	800c894 <__ulp>
 800ac00:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ac04:	ec53 2b10 	vmov	r2, r3, d0
 800ac08:	f7f5 fcfe 	bl	8000608 <__aeabi_dmul>
 800ac0c:	ec53 2b18 	vmov	r2, r3, d8
 800ac10:	f7f5 fb44 	bl	800029c <__adddf3>
 800ac14:	4682      	mov	sl, r0
 800ac16:	468b      	mov	fp, r1
 800ac18:	e78d      	b.n	800ab36 <_strtod_l+0xab6>
 800ac1a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800ac1e:	e7db      	b.n	800abd8 <_strtod_l+0xb58>
 800ac20:	a311      	add	r3, pc, #68	; (adr r3, 800ac68 <_strtod_l+0xbe8>)
 800ac22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac26:	f7f5 ff61 	bl	8000aec <__aeabi_dcmplt>
 800ac2a:	e7b2      	b.n	800ab92 <_strtod_l+0xb12>
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	930a      	str	r3, [sp, #40]	; 0x28
 800ac30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ac32:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ac34:	6013      	str	r3, [r2, #0]
 800ac36:	f7ff ba6b 	b.w	800a110 <_strtod_l+0x90>
 800ac3a:	2a65      	cmp	r2, #101	; 0x65
 800ac3c:	f43f ab5f 	beq.w	800a2fe <_strtod_l+0x27e>
 800ac40:	2a45      	cmp	r2, #69	; 0x45
 800ac42:	f43f ab5c 	beq.w	800a2fe <_strtod_l+0x27e>
 800ac46:	2301      	movs	r3, #1
 800ac48:	f7ff bb94 	b.w	800a374 <_strtod_l+0x2f4>
 800ac4c:	f3af 8000 	nop.w
 800ac50:	94a03595 	.word	0x94a03595
 800ac54:	3fdfffff 	.word	0x3fdfffff
 800ac58:	35afe535 	.word	0x35afe535
 800ac5c:	3fe00000 	.word	0x3fe00000
 800ac60:	ffc00000 	.word	0xffc00000
 800ac64:	41dfffff 	.word	0x41dfffff
 800ac68:	94a03595 	.word	0x94a03595
 800ac6c:	3fcfffff 	.word	0x3fcfffff
 800ac70:	3ff00000 	.word	0x3ff00000
 800ac74:	7ff00000 	.word	0x7ff00000
 800ac78:	7fe00000 	.word	0x7fe00000
 800ac7c:	7c9fffff 	.word	0x7c9fffff
 800ac80:	3fe00000 	.word	0x3fe00000
 800ac84:	bff00000 	.word	0xbff00000
 800ac88:	7fefffff 	.word	0x7fefffff

0800ac8c <_strtod_r>:
 800ac8c:	4b01      	ldr	r3, [pc, #4]	; (800ac94 <_strtod_r+0x8>)
 800ac8e:	f7ff b9f7 	b.w	800a080 <_strtod_l>
 800ac92:	bf00      	nop
 800ac94:	20000084 	.word	0x20000084

0800ac98 <_strtol_l.constprop.0>:
 800ac98:	2b01      	cmp	r3, #1
 800ac9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac9e:	d001      	beq.n	800aca4 <_strtol_l.constprop.0+0xc>
 800aca0:	2b24      	cmp	r3, #36	; 0x24
 800aca2:	d906      	bls.n	800acb2 <_strtol_l.constprop.0+0x1a>
 800aca4:	f7fe fae0 	bl	8009268 <__errno>
 800aca8:	2316      	movs	r3, #22
 800acaa:	6003      	str	r3, [r0, #0]
 800acac:	2000      	movs	r0, #0
 800acae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acb2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ad98 <_strtol_l.constprop.0+0x100>
 800acb6:	460d      	mov	r5, r1
 800acb8:	462e      	mov	r6, r5
 800acba:	f815 4b01 	ldrb.w	r4, [r5], #1
 800acbe:	f814 700c 	ldrb.w	r7, [r4, ip]
 800acc2:	f017 0708 	ands.w	r7, r7, #8
 800acc6:	d1f7      	bne.n	800acb8 <_strtol_l.constprop.0+0x20>
 800acc8:	2c2d      	cmp	r4, #45	; 0x2d
 800acca:	d132      	bne.n	800ad32 <_strtol_l.constprop.0+0x9a>
 800accc:	782c      	ldrb	r4, [r5, #0]
 800acce:	2701      	movs	r7, #1
 800acd0:	1cb5      	adds	r5, r6, #2
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d05b      	beq.n	800ad8e <_strtol_l.constprop.0+0xf6>
 800acd6:	2b10      	cmp	r3, #16
 800acd8:	d109      	bne.n	800acee <_strtol_l.constprop.0+0x56>
 800acda:	2c30      	cmp	r4, #48	; 0x30
 800acdc:	d107      	bne.n	800acee <_strtol_l.constprop.0+0x56>
 800acde:	782c      	ldrb	r4, [r5, #0]
 800ace0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ace4:	2c58      	cmp	r4, #88	; 0x58
 800ace6:	d14d      	bne.n	800ad84 <_strtol_l.constprop.0+0xec>
 800ace8:	786c      	ldrb	r4, [r5, #1]
 800acea:	2310      	movs	r3, #16
 800acec:	3502      	adds	r5, #2
 800acee:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800acf2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800acf6:	f04f 0c00 	mov.w	ip, #0
 800acfa:	fbb8 f9f3 	udiv	r9, r8, r3
 800acfe:	4666      	mov	r6, ip
 800ad00:	fb03 8a19 	mls	sl, r3, r9, r8
 800ad04:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800ad08:	f1be 0f09 	cmp.w	lr, #9
 800ad0c:	d816      	bhi.n	800ad3c <_strtol_l.constprop.0+0xa4>
 800ad0e:	4674      	mov	r4, lr
 800ad10:	42a3      	cmp	r3, r4
 800ad12:	dd24      	ble.n	800ad5e <_strtol_l.constprop.0+0xc6>
 800ad14:	f1bc 0f00 	cmp.w	ip, #0
 800ad18:	db1e      	blt.n	800ad58 <_strtol_l.constprop.0+0xc0>
 800ad1a:	45b1      	cmp	r9, r6
 800ad1c:	d31c      	bcc.n	800ad58 <_strtol_l.constprop.0+0xc0>
 800ad1e:	d101      	bne.n	800ad24 <_strtol_l.constprop.0+0x8c>
 800ad20:	45a2      	cmp	sl, r4
 800ad22:	db19      	blt.n	800ad58 <_strtol_l.constprop.0+0xc0>
 800ad24:	fb06 4603 	mla	r6, r6, r3, r4
 800ad28:	f04f 0c01 	mov.w	ip, #1
 800ad2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ad30:	e7e8      	b.n	800ad04 <_strtol_l.constprop.0+0x6c>
 800ad32:	2c2b      	cmp	r4, #43	; 0x2b
 800ad34:	bf04      	itt	eq
 800ad36:	782c      	ldrbeq	r4, [r5, #0]
 800ad38:	1cb5      	addeq	r5, r6, #2
 800ad3a:	e7ca      	b.n	800acd2 <_strtol_l.constprop.0+0x3a>
 800ad3c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800ad40:	f1be 0f19 	cmp.w	lr, #25
 800ad44:	d801      	bhi.n	800ad4a <_strtol_l.constprop.0+0xb2>
 800ad46:	3c37      	subs	r4, #55	; 0x37
 800ad48:	e7e2      	b.n	800ad10 <_strtol_l.constprop.0+0x78>
 800ad4a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800ad4e:	f1be 0f19 	cmp.w	lr, #25
 800ad52:	d804      	bhi.n	800ad5e <_strtol_l.constprop.0+0xc6>
 800ad54:	3c57      	subs	r4, #87	; 0x57
 800ad56:	e7db      	b.n	800ad10 <_strtol_l.constprop.0+0x78>
 800ad58:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800ad5c:	e7e6      	b.n	800ad2c <_strtol_l.constprop.0+0x94>
 800ad5e:	f1bc 0f00 	cmp.w	ip, #0
 800ad62:	da05      	bge.n	800ad70 <_strtol_l.constprop.0+0xd8>
 800ad64:	2322      	movs	r3, #34	; 0x22
 800ad66:	6003      	str	r3, [r0, #0]
 800ad68:	4646      	mov	r6, r8
 800ad6a:	b942      	cbnz	r2, 800ad7e <_strtol_l.constprop.0+0xe6>
 800ad6c:	4630      	mov	r0, r6
 800ad6e:	e79e      	b.n	800acae <_strtol_l.constprop.0+0x16>
 800ad70:	b107      	cbz	r7, 800ad74 <_strtol_l.constprop.0+0xdc>
 800ad72:	4276      	negs	r6, r6
 800ad74:	2a00      	cmp	r2, #0
 800ad76:	d0f9      	beq.n	800ad6c <_strtol_l.constprop.0+0xd4>
 800ad78:	f1bc 0f00 	cmp.w	ip, #0
 800ad7c:	d000      	beq.n	800ad80 <_strtol_l.constprop.0+0xe8>
 800ad7e:	1e69      	subs	r1, r5, #1
 800ad80:	6011      	str	r1, [r2, #0]
 800ad82:	e7f3      	b.n	800ad6c <_strtol_l.constprop.0+0xd4>
 800ad84:	2430      	movs	r4, #48	; 0x30
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d1b1      	bne.n	800acee <_strtol_l.constprop.0+0x56>
 800ad8a:	2308      	movs	r3, #8
 800ad8c:	e7af      	b.n	800acee <_strtol_l.constprop.0+0x56>
 800ad8e:	2c30      	cmp	r4, #48	; 0x30
 800ad90:	d0a5      	beq.n	800acde <_strtol_l.constprop.0+0x46>
 800ad92:	230a      	movs	r3, #10
 800ad94:	e7ab      	b.n	800acee <_strtol_l.constprop.0+0x56>
 800ad96:	bf00      	nop
 800ad98:	0800ec51 	.word	0x0800ec51

0800ad9c <_strtol_r>:
 800ad9c:	f7ff bf7c 	b.w	800ac98 <_strtol_l.constprop.0>

0800ada0 <quorem>:
 800ada0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ada4:	6903      	ldr	r3, [r0, #16]
 800ada6:	690c      	ldr	r4, [r1, #16]
 800ada8:	42a3      	cmp	r3, r4
 800adaa:	4607      	mov	r7, r0
 800adac:	f2c0 8081 	blt.w	800aeb2 <quorem+0x112>
 800adb0:	3c01      	subs	r4, #1
 800adb2:	f101 0814 	add.w	r8, r1, #20
 800adb6:	f100 0514 	add.w	r5, r0, #20
 800adba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800adbe:	9301      	str	r3, [sp, #4]
 800adc0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800adc4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800adc8:	3301      	adds	r3, #1
 800adca:	429a      	cmp	r2, r3
 800adcc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800add0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800add4:	fbb2 f6f3 	udiv	r6, r2, r3
 800add8:	d331      	bcc.n	800ae3e <quorem+0x9e>
 800adda:	f04f 0e00 	mov.w	lr, #0
 800adde:	4640      	mov	r0, r8
 800ade0:	46ac      	mov	ip, r5
 800ade2:	46f2      	mov	sl, lr
 800ade4:	f850 2b04 	ldr.w	r2, [r0], #4
 800ade8:	b293      	uxth	r3, r2
 800adea:	fb06 e303 	mla	r3, r6, r3, lr
 800adee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800adf2:	b29b      	uxth	r3, r3
 800adf4:	ebaa 0303 	sub.w	r3, sl, r3
 800adf8:	f8dc a000 	ldr.w	sl, [ip]
 800adfc:	0c12      	lsrs	r2, r2, #16
 800adfe:	fa13 f38a 	uxtah	r3, r3, sl
 800ae02:	fb06 e202 	mla	r2, r6, r2, lr
 800ae06:	9300      	str	r3, [sp, #0]
 800ae08:	9b00      	ldr	r3, [sp, #0]
 800ae0a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ae0e:	b292      	uxth	r2, r2
 800ae10:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ae14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ae18:	f8bd 3000 	ldrh.w	r3, [sp]
 800ae1c:	4581      	cmp	r9, r0
 800ae1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae22:	f84c 3b04 	str.w	r3, [ip], #4
 800ae26:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ae2a:	d2db      	bcs.n	800ade4 <quorem+0x44>
 800ae2c:	f855 300b 	ldr.w	r3, [r5, fp]
 800ae30:	b92b      	cbnz	r3, 800ae3e <quorem+0x9e>
 800ae32:	9b01      	ldr	r3, [sp, #4]
 800ae34:	3b04      	subs	r3, #4
 800ae36:	429d      	cmp	r5, r3
 800ae38:	461a      	mov	r2, r3
 800ae3a:	d32e      	bcc.n	800ae9a <quorem+0xfa>
 800ae3c:	613c      	str	r4, [r7, #16]
 800ae3e:	4638      	mov	r0, r7
 800ae40:	f001 fc82 	bl	800c748 <__mcmp>
 800ae44:	2800      	cmp	r0, #0
 800ae46:	db24      	blt.n	800ae92 <quorem+0xf2>
 800ae48:	3601      	adds	r6, #1
 800ae4a:	4628      	mov	r0, r5
 800ae4c:	f04f 0c00 	mov.w	ip, #0
 800ae50:	f858 2b04 	ldr.w	r2, [r8], #4
 800ae54:	f8d0 e000 	ldr.w	lr, [r0]
 800ae58:	b293      	uxth	r3, r2
 800ae5a:	ebac 0303 	sub.w	r3, ip, r3
 800ae5e:	0c12      	lsrs	r2, r2, #16
 800ae60:	fa13 f38e 	uxtah	r3, r3, lr
 800ae64:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ae68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ae6c:	b29b      	uxth	r3, r3
 800ae6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae72:	45c1      	cmp	r9, r8
 800ae74:	f840 3b04 	str.w	r3, [r0], #4
 800ae78:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ae7c:	d2e8      	bcs.n	800ae50 <quorem+0xb0>
 800ae7e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ae82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ae86:	b922      	cbnz	r2, 800ae92 <quorem+0xf2>
 800ae88:	3b04      	subs	r3, #4
 800ae8a:	429d      	cmp	r5, r3
 800ae8c:	461a      	mov	r2, r3
 800ae8e:	d30a      	bcc.n	800aea6 <quorem+0x106>
 800ae90:	613c      	str	r4, [r7, #16]
 800ae92:	4630      	mov	r0, r6
 800ae94:	b003      	add	sp, #12
 800ae96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae9a:	6812      	ldr	r2, [r2, #0]
 800ae9c:	3b04      	subs	r3, #4
 800ae9e:	2a00      	cmp	r2, #0
 800aea0:	d1cc      	bne.n	800ae3c <quorem+0x9c>
 800aea2:	3c01      	subs	r4, #1
 800aea4:	e7c7      	b.n	800ae36 <quorem+0x96>
 800aea6:	6812      	ldr	r2, [r2, #0]
 800aea8:	3b04      	subs	r3, #4
 800aeaa:	2a00      	cmp	r2, #0
 800aeac:	d1f0      	bne.n	800ae90 <quorem+0xf0>
 800aeae:	3c01      	subs	r4, #1
 800aeb0:	e7eb      	b.n	800ae8a <quorem+0xea>
 800aeb2:	2000      	movs	r0, #0
 800aeb4:	e7ee      	b.n	800ae94 <quorem+0xf4>
	...

0800aeb8 <_dtoa_r>:
 800aeb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aebc:	ed2d 8b04 	vpush	{d8-d9}
 800aec0:	ec57 6b10 	vmov	r6, r7, d0
 800aec4:	b093      	sub	sp, #76	; 0x4c
 800aec6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800aec8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800aecc:	9106      	str	r1, [sp, #24]
 800aece:	ee10 aa10 	vmov	sl, s0
 800aed2:	4604      	mov	r4, r0
 800aed4:	9209      	str	r2, [sp, #36]	; 0x24
 800aed6:	930c      	str	r3, [sp, #48]	; 0x30
 800aed8:	46bb      	mov	fp, r7
 800aeda:	b975      	cbnz	r5, 800aefa <_dtoa_r+0x42>
 800aedc:	2010      	movs	r0, #16
 800aede:	f001 f94d 	bl	800c17c <malloc>
 800aee2:	4602      	mov	r2, r0
 800aee4:	6260      	str	r0, [r4, #36]	; 0x24
 800aee6:	b920      	cbnz	r0, 800aef2 <_dtoa_r+0x3a>
 800aee8:	4ba7      	ldr	r3, [pc, #668]	; (800b188 <_dtoa_r+0x2d0>)
 800aeea:	21ea      	movs	r1, #234	; 0xea
 800aeec:	48a7      	ldr	r0, [pc, #668]	; (800b18c <_dtoa_r+0x2d4>)
 800aeee:	f002 f8ad 	bl	800d04c <__assert_func>
 800aef2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800aef6:	6005      	str	r5, [r0, #0]
 800aef8:	60c5      	str	r5, [r0, #12]
 800aefa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aefc:	6819      	ldr	r1, [r3, #0]
 800aefe:	b151      	cbz	r1, 800af16 <_dtoa_r+0x5e>
 800af00:	685a      	ldr	r2, [r3, #4]
 800af02:	604a      	str	r2, [r1, #4]
 800af04:	2301      	movs	r3, #1
 800af06:	4093      	lsls	r3, r2
 800af08:	608b      	str	r3, [r1, #8]
 800af0a:	4620      	mov	r0, r4
 800af0c:	f001 f990 	bl	800c230 <_Bfree>
 800af10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af12:	2200      	movs	r2, #0
 800af14:	601a      	str	r2, [r3, #0]
 800af16:	1e3b      	subs	r3, r7, #0
 800af18:	bfaa      	itet	ge
 800af1a:	2300      	movge	r3, #0
 800af1c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800af20:	f8c8 3000 	strge.w	r3, [r8]
 800af24:	4b9a      	ldr	r3, [pc, #616]	; (800b190 <_dtoa_r+0x2d8>)
 800af26:	bfbc      	itt	lt
 800af28:	2201      	movlt	r2, #1
 800af2a:	f8c8 2000 	strlt.w	r2, [r8]
 800af2e:	ea33 030b 	bics.w	r3, r3, fp
 800af32:	d11b      	bne.n	800af6c <_dtoa_r+0xb4>
 800af34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af36:	f242 730f 	movw	r3, #9999	; 0x270f
 800af3a:	6013      	str	r3, [r2, #0]
 800af3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800af40:	4333      	orrs	r3, r6
 800af42:	f000 8592 	beq.w	800ba6a <_dtoa_r+0xbb2>
 800af46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af48:	b963      	cbnz	r3, 800af64 <_dtoa_r+0xac>
 800af4a:	4b92      	ldr	r3, [pc, #584]	; (800b194 <_dtoa_r+0x2dc>)
 800af4c:	e022      	b.n	800af94 <_dtoa_r+0xdc>
 800af4e:	4b92      	ldr	r3, [pc, #584]	; (800b198 <_dtoa_r+0x2e0>)
 800af50:	9301      	str	r3, [sp, #4]
 800af52:	3308      	adds	r3, #8
 800af54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800af56:	6013      	str	r3, [r2, #0]
 800af58:	9801      	ldr	r0, [sp, #4]
 800af5a:	b013      	add	sp, #76	; 0x4c
 800af5c:	ecbd 8b04 	vpop	{d8-d9}
 800af60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af64:	4b8b      	ldr	r3, [pc, #556]	; (800b194 <_dtoa_r+0x2dc>)
 800af66:	9301      	str	r3, [sp, #4]
 800af68:	3303      	adds	r3, #3
 800af6a:	e7f3      	b.n	800af54 <_dtoa_r+0x9c>
 800af6c:	2200      	movs	r2, #0
 800af6e:	2300      	movs	r3, #0
 800af70:	4650      	mov	r0, sl
 800af72:	4659      	mov	r1, fp
 800af74:	f7f5 fdb0 	bl	8000ad8 <__aeabi_dcmpeq>
 800af78:	ec4b ab19 	vmov	d9, sl, fp
 800af7c:	4680      	mov	r8, r0
 800af7e:	b158      	cbz	r0, 800af98 <_dtoa_r+0xe0>
 800af80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af82:	2301      	movs	r3, #1
 800af84:	6013      	str	r3, [r2, #0]
 800af86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af88:	2b00      	cmp	r3, #0
 800af8a:	f000 856b 	beq.w	800ba64 <_dtoa_r+0xbac>
 800af8e:	4883      	ldr	r0, [pc, #524]	; (800b19c <_dtoa_r+0x2e4>)
 800af90:	6018      	str	r0, [r3, #0]
 800af92:	1e43      	subs	r3, r0, #1
 800af94:	9301      	str	r3, [sp, #4]
 800af96:	e7df      	b.n	800af58 <_dtoa_r+0xa0>
 800af98:	ec4b ab10 	vmov	d0, sl, fp
 800af9c:	aa10      	add	r2, sp, #64	; 0x40
 800af9e:	a911      	add	r1, sp, #68	; 0x44
 800afa0:	4620      	mov	r0, r4
 800afa2:	f001 fcf3 	bl	800c98c <__d2b>
 800afa6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800afaa:	ee08 0a10 	vmov	s16, r0
 800afae:	2d00      	cmp	r5, #0
 800afb0:	f000 8084 	beq.w	800b0bc <_dtoa_r+0x204>
 800afb4:	ee19 3a90 	vmov	r3, s19
 800afb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800afbc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800afc0:	4656      	mov	r6, sl
 800afc2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800afc6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800afca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800afce:	4b74      	ldr	r3, [pc, #464]	; (800b1a0 <_dtoa_r+0x2e8>)
 800afd0:	2200      	movs	r2, #0
 800afd2:	4630      	mov	r0, r6
 800afd4:	4639      	mov	r1, r7
 800afd6:	f7f5 f95f 	bl	8000298 <__aeabi_dsub>
 800afda:	a365      	add	r3, pc, #404	; (adr r3, 800b170 <_dtoa_r+0x2b8>)
 800afdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe0:	f7f5 fb12 	bl	8000608 <__aeabi_dmul>
 800afe4:	a364      	add	r3, pc, #400	; (adr r3, 800b178 <_dtoa_r+0x2c0>)
 800afe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afea:	f7f5 f957 	bl	800029c <__adddf3>
 800afee:	4606      	mov	r6, r0
 800aff0:	4628      	mov	r0, r5
 800aff2:	460f      	mov	r7, r1
 800aff4:	f7f5 fa9e 	bl	8000534 <__aeabi_i2d>
 800aff8:	a361      	add	r3, pc, #388	; (adr r3, 800b180 <_dtoa_r+0x2c8>)
 800affa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800affe:	f7f5 fb03 	bl	8000608 <__aeabi_dmul>
 800b002:	4602      	mov	r2, r0
 800b004:	460b      	mov	r3, r1
 800b006:	4630      	mov	r0, r6
 800b008:	4639      	mov	r1, r7
 800b00a:	f7f5 f947 	bl	800029c <__adddf3>
 800b00e:	4606      	mov	r6, r0
 800b010:	460f      	mov	r7, r1
 800b012:	f7f5 fda9 	bl	8000b68 <__aeabi_d2iz>
 800b016:	2200      	movs	r2, #0
 800b018:	9000      	str	r0, [sp, #0]
 800b01a:	2300      	movs	r3, #0
 800b01c:	4630      	mov	r0, r6
 800b01e:	4639      	mov	r1, r7
 800b020:	f7f5 fd64 	bl	8000aec <__aeabi_dcmplt>
 800b024:	b150      	cbz	r0, 800b03c <_dtoa_r+0x184>
 800b026:	9800      	ldr	r0, [sp, #0]
 800b028:	f7f5 fa84 	bl	8000534 <__aeabi_i2d>
 800b02c:	4632      	mov	r2, r6
 800b02e:	463b      	mov	r3, r7
 800b030:	f7f5 fd52 	bl	8000ad8 <__aeabi_dcmpeq>
 800b034:	b910      	cbnz	r0, 800b03c <_dtoa_r+0x184>
 800b036:	9b00      	ldr	r3, [sp, #0]
 800b038:	3b01      	subs	r3, #1
 800b03a:	9300      	str	r3, [sp, #0]
 800b03c:	9b00      	ldr	r3, [sp, #0]
 800b03e:	2b16      	cmp	r3, #22
 800b040:	d85a      	bhi.n	800b0f8 <_dtoa_r+0x240>
 800b042:	9a00      	ldr	r2, [sp, #0]
 800b044:	4b57      	ldr	r3, [pc, #348]	; (800b1a4 <_dtoa_r+0x2ec>)
 800b046:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b04e:	ec51 0b19 	vmov	r0, r1, d9
 800b052:	f7f5 fd4b 	bl	8000aec <__aeabi_dcmplt>
 800b056:	2800      	cmp	r0, #0
 800b058:	d050      	beq.n	800b0fc <_dtoa_r+0x244>
 800b05a:	9b00      	ldr	r3, [sp, #0]
 800b05c:	3b01      	subs	r3, #1
 800b05e:	9300      	str	r3, [sp, #0]
 800b060:	2300      	movs	r3, #0
 800b062:	930b      	str	r3, [sp, #44]	; 0x2c
 800b064:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b066:	1b5d      	subs	r5, r3, r5
 800b068:	1e6b      	subs	r3, r5, #1
 800b06a:	9305      	str	r3, [sp, #20]
 800b06c:	bf45      	ittet	mi
 800b06e:	f1c5 0301 	rsbmi	r3, r5, #1
 800b072:	9304      	strmi	r3, [sp, #16]
 800b074:	2300      	movpl	r3, #0
 800b076:	2300      	movmi	r3, #0
 800b078:	bf4c      	ite	mi
 800b07a:	9305      	strmi	r3, [sp, #20]
 800b07c:	9304      	strpl	r3, [sp, #16]
 800b07e:	9b00      	ldr	r3, [sp, #0]
 800b080:	2b00      	cmp	r3, #0
 800b082:	db3d      	blt.n	800b100 <_dtoa_r+0x248>
 800b084:	9b05      	ldr	r3, [sp, #20]
 800b086:	9a00      	ldr	r2, [sp, #0]
 800b088:	920a      	str	r2, [sp, #40]	; 0x28
 800b08a:	4413      	add	r3, r2
 800b08c:	9305      	str	r3, [sp, #20]
 800b08e:	2300      	movs	r3, #0
 800b090:	9307      	str	r3, [sp, #28]
 800b092:	9b06      	ldr	r3, [sp, #24]
 800b094:	2b09      	cmp	r3, #9
 800b096:	f200 8089 	bhi.w	800b1ac <_dtoa_r+0x2f4>
 800b09a:	2b05      	cmp	r3, #5
 800b09c:	bfc4      	itt	gt
 800b09e:	3b04      	subgt	r3, #4
 800b0a0:	9306      	strgt	r3, [sp, #24]
 800b0a2:	9b06      	ldr	r3, [sp, #24]
 800b0a4:	f1a3 0302 	sub.w	r3, r3, #2
 800b0a8:	bfcc      	ite	gt
 800b0aa:	2500      	movgt	r5, #0
 800b0ac:	2501      	movle	r5, #1
 800b0ae:	2b03      	cmp	r3, #3
 800b0b0:	f200 8087 	bhi.w	800b1c2 <_dtoa_r+0x30a>
 800b0b4:	e8df f003 	tbb	[pc, r3]
 800b0b8:	59383a2d 	.word	0x59383a2d
 800b0bc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b0c0:	441d      	add	r5, r3
 800b0c2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b0c6:	2b20      	cmp	r3, #32
 800b0c8:	bfc1      	itttt	gt
 800b0ca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b0ce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b0d2:	fa0b f303 	lslgt.w	r3, fp, r3
 800b0d6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b0da:	bfda      	itte	le
 800b0dc:	f1c3 0320 	rsble	r3, r3, #32
 800b0e0:	fa06 f003 	lslle.w	r0, r6, r3
 800b0e4:	4318      	orrgt	r0, r3
 800b0e6:	f7f5 fa15 	bl	8000514 <__aeabi_ui2d>
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	4606      	mov	r6, r0
 800b0ee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b0f2:	3d01      	subs	r5, #1
 800b0f4:	930e      	str	r3, [sp, #56]	; 0x38
 800b0f6:	e76a      	b.n	800afce <_dtoa_r+0x116>
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	e7b2      	b.n	800b062 <_dtoa_r+0x1aa>
 800b0fc:	900b      	str	r0, [sp, #44]	; 0x2c
 800b0fe:	e7b1      	b.n	800b064 <_dtoa_r+0x1ac>
 800b100:	9b04      	ldr	r3, [sp, #16]
 800b102:	9a00      	ldr	r2, [sp, #0]
 800b104:	1a9b      	subs	r3, r3, r2
 800b106:	9304      	str	r3, [sp, #16]
 800b108:	4253      	negs	r3, r2
 800b10a:	9307      	str	r3, [sp, #28]
 800b10c:	2300      	movs	r3, #0
 800b10e:	930a      	str	r3, [sp, #40]	; 0x28
 800b110:	e7bf      	b.n	800b092 <_dtoa_r+0x1da>
 800b112:	2300      	movs	r3, #0
 800b114:	9308      	str	r3, [sp, #32]
 800b116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b118:	2b00      	cmp	r3, #0
 800b11a:	dc55      	bgt.n	800b1c8 <_dtoa_r+0x310>
 800b11c:	2301      	movs	r3, #1
 800b11e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b122:	461a      	mov	r2, r3
 800b124:	9209      	str	r2, [sp, #36]	; 0x24
 800b126:	e00c      	b.n	800b142 <_dtoa_r+0x28a>
 800b128:	2301      	movs	r3, #1
 800b12a:	e7f3      	b.n	800b114 <_dtoa_r+0x25c>
 800b12c:	2300      	movs	r3, #0
 800b12e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b130:	9308      	str	r3, [sp, #32]
 800b132:	9b00      	ldr	r3, [sp, #0]
 800b134:	4413      	add	r3, r2
 800b136:	9302      	str	r3, [sp, #8]
 800b138:	3301      	adds	r3, #1
 800b13a:	2b01      	cmp	r3, #1
 800b13c:	9303      	str	r3, [sp, #12]
 800b13e:	bfb8      	it	lt
 800b140:	2301      	movlt	r3, #1
 800b142:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b144:	2200      	movs	r2, #0
 800b146:	6042      	str	r2, [r0, #4]
 800b148:	2204      	movs	r2, #4
 800b14a:	f102 0614 	add.w	r6, r2, #20
 800b14e:	429e      	cmp	r6, r3
 800b150:	6841      	ldr	r1, [r0, #4]
 800b152:	d93d      	bls.n	800b1d0 <_dtoa_r+0x318>
 800b154:	4620      	mov	r0, r4
 800b156:	f001 f82b 	bl	800c1b0 <_Balloc>
 800b15a:	9001      	str	r0, [sp, #4]
 800b15c:	2800      	cmp	r0, #0
 800b15e:	d13b      	bne.n	800b1d8 <_dtoa_r+0x320>
 800b160:	4b11      	ldr	r3, [pc, #68]	; (800b1a8 <_dtoa_r+0x2f0>)
 800b162:	4602      	mov	r2, r0
 800b164:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b168:	e6c0      	b.n	800aeec <_dtoa_r+0x34>
 800b16a:	2301      	movs	r3, #1
 800b16c:	e7df      	b.n	800b12e <_dtoa_r+0x276>
 800b16e:	bf00      	nop
 800b170:	636f4361 	.word	0x636f4361
 800b174:	3fd287a7 	.word	0x3fd287a7
 800b178:	8b60c8b3 	.word	0x8b60c8b3
 800b17c:	3fc68a28 	.word	0x3fc68a28
 800b180:	509f79fb 	.word	0x509f79fb
 800b184:	3fd34413 	.word	0x3fd34413
 800b188:	0800ed5e 	.word	0x0800ed5e
 800b18c:	0800ed75 	.word	0x0800ed75
 800b190:	7ff00000 	.word	0x7ff00000
 800b194:	0800ed5a 	.word	0x0800ed5a
 800b198:	0800ed51 	.word	0x0800ed51
 800b19c:	0800ebd1 	.word	0x0800ebd1
 800b1a0:	3ff80000 	.word	0x3ff80000
 800b1a4:	0800eee0 	.word	0x0800eee0
 800b1a8:	0800edd0 	.word	0x0800edd0
 800b1ac:	2501      	movs	r5, #1
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	9306      	str	r3, [sp, #24]
 800b1b2:	9508      	str	r5, [sp, #32]
 800b1b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b1b8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b1bc:	2200      	movs	r2, #0
 800b1be:	2312      	movs	r3, #18
 800b1c0:	e7b0      	b.n	800b124 <_dtoa_r+0x26c>
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	9308      	str	r3, [sp, #32]
 800b1c6:	e7f5      	b.n	800b1b4 <_dtoa_r+0x2fc>
 800b1c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1ca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b1ce:	e7b8      	b.n	800b142 <_dtoa_r+0x28a>
 800b1d0:	3101      	adds	r1, #1
 800b1d2:	6041      	str	r1, [r0, #4]
 800b1d4:	0052      	lsls	r2, r2, #1
 800b1d6:	e7b8      	b.n	800b14a <_dtoa_r+0x292>
 800b1d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b1da:	9a01      	ldr	r2, [sp, #4]
 800b1dc:	601a      	str	r2, [r3, #0]
 800b1de:	9b03      	ldr	r3, [sp, #12]
 800b1e0:	2b0e      	cmp	r3, #14
 800b1e2:	f200 809d 	bhi.w	800b320 <_dtoa_r+0x468>
 800b1e6:	2d00      	cmp	r5, #0
 800b1e8:	f000 809a 	beq.w	800b320 <_dtoa_r+0x468>
 800b1ec:	9b00      	ldr	r3, [sp, #0]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	dd32      	ble.n	800b258 <_dtoa_r+0x3a0>
 800b1f2:	4ab7      	ldr	r2, [pc, #732]	; (800b4d0 <_dtoa_r+0x618>)
 800b1f4:	f003 030f 	and.w	r3, r3, #15
 800b1f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b1fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b200:	9b00      	ldr	r3, [sp, #0]
 800b202:	05d8      	lsls	r0, r3, #23
 800b204:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b208:	d516      	bpl.n	800b238 <_dtoa_r+0x380>
 800b20a:	4bb2      	ldr	r3, [pc, #712]	; (800b4d4 <_dtoa_r+0x61c>)
 800b20c:	ec51 0b19 	vmov	r0, r1, d9
 800b210:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b214:	f7f5 fb22 	bl	800085c <__aeabi_ddiv>
 800b218:	f007 070f 	and.w	r7, r7, #15
 800b21c:	4682      	mov	sl, r0
 800b21e:	468b      	mov	fp, r1
 800b220:	2503      	movs	r5, #3
 800b222:	4eac      	ldr	r6, [pc, #688]	; (800b4d4 <_dtoa_r+0x61c>)
 800b224:	b957      	cbnz	r7, 800b23c <_dtoa_r+0x384>
 800b226:	4642      	mov	r2, r8
 800b228:	464b      	mov	r3, r9
 800b22a:	4650      	mov	r0, sl
 800b22c:	4659      	mov	r1, fp
 800b22e:	f7f5 fb15 	bl	800085c <__aeabi_ddiv>
 800b232:	4682      	mov	sl, r0
 800b234:	468b      	mov	fp, r1
 800b236:	e028      	b.n	800b28a <_dtoa_r+0x3d2>
 800b238:	2502      	movs	r5, #2
 800b23a:	e7f2      	b.n	800b222 <_dtoa_r+0x36a>
 800b23c:	07f9      	lsls	r1, r7, #31
 800b23e:	d508      	bpl.n	800b252 <_dtoa_r+0x39a>
 800b240:	4640      	mov	r0, r8
 800b242:	4649      	mov	r1, r9
 800b244:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b248:	f7f5 f9de 	bl	8000608 <__aeabi_dmul>
 800b24c:	3501      	adds	r5, #1
 800b24e:	4680      	mov	r8, r0
 800b250:	4689      	mov	r9, r1
 800b252:	107f      	asrs	r7, r7, #1
 800b254:	3608      	adds	r6, #8
 800b256:	e7e5      	b.n	800b224 <_dtoa_r+0x36c>
 800b258:	f000 809b 	beq.w	800b392 <_dtoa_r+0x4da>
 800b25c:	9b00      	ldr	r3, [sp, #0]
 800b25e:	4f9d      	ldr	r7, [pc, #628]	; (800b4d4 <_dtoa_r+0x61c>)
 800b260:	425e      	negs	r6, r3
 800b262:	4b9b      	ldr	r3, [pc, #620]	; (800b4d0 <_dtoa_r+0x618>)
 800b264:	f006 020f 	and.w	r2, r6, #15
 800b268:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b270:	ec51 0b19 	vmov	r0, r1, d9
 800b274:	f7f5 f9c8 	bl	8000608 <__aeabi_dmul>
 800b278:	1136      	asrs	r6, r6, #4
 800b27a:	4682      	mov	sl, r0
 800b27c:	468b      	mov	fp, r1
 800b27e:	2300      	movs	r3, #0
 800b280:	2502      	movs	r5, #2
 800b282:	2e00      	cmp	r6, #0
 800b284:	d17a      	bne.n	800b37c <_dtoa_r+0x4c4>
 800b286:	2b00      	cmp	r3, #0
 800b288:	d1d3      	bne.n	800b232 <_dtoa_r+0x37a>
 800b28a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	f000 8082 	beq.w	800b396 <_dtoa_r+0x4de>
 800b292:	4b91      	ldr	r3, [pc, #580]	; (800b4d8 <_dtoa_r+0x620>)
 800b294:	2200      	movs	r2, #0
 800b296:	4650      	mov	r0, sl
 800b298:	4659      	mov	r1, fp
 800b29a:	f7f5 fc27 	bl	8000aec <__aeabi_dcmplt>
 800b29e:	2800      	cmp	r0, #0
 800b2a0:	d079      	beq.n	800b396 <_dtoa_r+0x4de>
 800b2a2:	9b03      	ldr	r3, [sp, #12]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d076      	beq.n	800b396 <_dtoa_r+0x4de>
 800b2a8:	9b02      	ldr	r3, [sp, #8]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	dd36      	ble.n	800b31c <_dtoa_r+0x464>
 800b2ae:	9b00      	ldr	r3, [sp, #0]
 800b2b0:	4650      	mov	r0, sl
 800b2b2:	4659      	mov	r1, fp
 800b2b4:	1e5f      	subs	r7, r3, #1
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	4b88      	ldr	r3, [pc, #544]	; (800b4dc <_dtoa_r+0x624>)
 800b2ba:	f7f5 f9a5 	bl	8000608 <__aeabi_dmul>
 800b2be:	9e02      	ldr	r6, [sp, #8]
 800b2c0:	4682      	mov	sl, r0
 800b2c2:	468b      	mov	fp, r1
 800b2c4:	3501      	adds	r5, #1
 800b2c6:	4628      	mov	r0, r5
 800b2c8:	f7f5 f934 	bl	8000534 <__aeabi_i2d>
 800b2cc:	4652      	mov	r2, sl
 800b2ce:	465b      	mov	r3, fp
 800b2d0:	f7f5 f99a 	bl	8000608 <__aeabi_dmul>
 800b2d4:	4b82      	ldr	r3, [pc, #520]	; (800b4e0 <_dtoa_r+0x628>)
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	f7f4 ffe0 	bl	800029c <__adddf3>
 800b2dc:	46d0      	mov	r8, sl
 800b2de:	46d9      	mov	r9, fp
 800b2e0:	4682      	mov	sl, r0
 800b2e2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b2e6:	2e00      	cmp	r6, #0
 800b2e8:	d158      	bne.n	800b39c <_dtoa_r+0x4e4>
 800b2ea:	4b7e      	ldr	r3, [pc, #504]	; (800b4e4 <_dtoa_r+0x62c>)
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	4640      	mov	r0, r8
 800b2f0:	4649      	mov	r1, r9
 800b2f2:	f7f4 ffd1 	bl	8000298 <__aeabi_dsub>
 800b2f6:	4652      	mov	r2, sl
 800b2f8:	465b      	mov	r3, fp
 800b2fa:	4680      	mov	r8, r0
 800b2fc:	4689      	mov	r9, r1
 800b2fe:	f7f5 fc13 	bl	8000b28 <__aeabi_dcmpgt>
 800b302:	2800      	cmp	r0, #0
 800b304:	f040 8295 	bne.w	800b832 <_dtoa_r+0x97a>
 800b308:	4652      	mov	r2, sl
 800b30a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b30e:	4640      	mov	r0, r8
 800b310:	4649      	mov	r1, r9
 800b312:	f7f5 fbeb 	bl	8000aec <__aeabi_dcmplt>
 800b316:	2800      	cmp	r0, #0
 800b318:	f040 8289 	bne.w	800b82e <_dtoa_r+0x976>
 800b31c:	ec5b ab19 	vmov	sl, fp, d9
 800b320:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b322:	2b00      	cmp	r3, #0
 800b324:	f2c0 8148 	blt.w	800b5b8 <_dtoa_r+0x700>
 800b328:	9a00      	ldr	r2, [sp, #0]
 800b32a:	2a0e      	cmp	r2, #14
 800b32c:	f300 8144 	bgt.w	800b5b8 <_dtoa_r+0x700>
 800b330:	4b67      	ldr	r3, [pc, #412]	; (800b4d0 <_dtoa_r+0x618>)
 800b332:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b336:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b33a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	f280 80d5 	bge.w	800b4ec <_dtoa_r+0x634>
 800b342:	9b03      	ldr	r3, [sp, #12]
 800b344:	2b00      	cmp	r3, #0
 800b346:	f300 80d1 	bgt.w	800b4ec <_dtoa_r+0x634>
 800b34a:	f040 826f 	bne.w	800b82c <_dtoa_r+0x974>
 800b34e:	4b65      	ldr	r3, [pc, #404]	; (800b4e4 <_dtoa_r+0x62c>)
 800b350:	2200      	movs	r2, #0
 800b352:	4640      	mov	r0, r8
 800b354:	4649      	mov	r1, r9
 800b356:	f7f5 f957 	bl	8000608 <__aeabi_dmul>
 800b35a:	4652      	mov	r2, sl
 800b35c:	465b      	mov	r3, fp
 800b35e:	f7f5 fbd9 	bl	8000b14 <__aeabi_dcmpge>
 800b362:	9e03      	ldr	r6, [sp, #12]
 800b364:	4637      	mov	r7, r6
 800b366:	2800      	cmp	r0, #0
 800b368:	f040 8245 	bne.w	800b7f6 <_dtoa_r+0x93e>
 800b36c:	9d01      	ldr	r5, [sp, #4]
 800b36e:	2331      	movs	r3, #49	; 0x31
 800b370:	f805 3b01 	strb.w	r3, [r5], #1
 800b374:	9b00      	ldr	r3, [sp, #0]
 800b376:	3301      	adds	r3, #1
 800b378:	9300      	str	r3, [sp, #0]
 800b37a:	e240      	b.n	800b7fe <_dtoa_r+0x946>
 800b37c:	07f2      	lsls	r2, r6, #31
 800b37e:	d505      	bpl.n	800b38c <_dtoa_r+0x4d4>
 800b380:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b384:	f7f5 f940 	bl	8000608 <__aeabi_dmul>
 800b388:	3501      	adds	r5, #1
 800b38a:	2301      	movs	r3, #1
 800b38c:	1076      	asrs	r6, r6, #1
 800b38e:	3708      	adds	r7, #8
 800b390:	e777      	b.n	800b282 <_dtoa_r+0x3ca>
 800b392:	2502      	movs	r5, #2
 800b394:	e779      	b.n	800b28a <_dtoa_r+0x3d2>
 800b396:	9f00      	ldr	r7, [sp, #0]
 800b398:	9e03      	ldr	r6, [sp, #12]
 800b39a:	e794      	b.n	800b2c6 <_dtoa_r+0x40e>
 800b39c:	9901      	ldr	r1, [sp, #4]
 800b39e:	4b4c      	ldr	r3, [pc, #304]	; (800b4d0 <_dtoa_r+0x618>)
 800b3a0:	4431      	add	r1, r6
 800b3a2:	910d      	str	r1, [sp, #52]	; 0x34
 800b3a4:	9908      	ldr	r1, [sp, #32]
 800b3a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b3aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b3ae:	2900      	cmp	r1, #0
 800b3b0:	d043      	beq.n	800b43a <_dtoa_r+0x582>
 800b3b2:	494d      	ldr	r1, [pc, #308]	; (800b4e8 <_dtoa_r+0x630>)
 800b3b4:	2000      	movs	r0, #0
 800b3b6:	f7f5 fa51 	bl	800085c <__aeabi_ddiv>
 800b3ba:	4652      	mov	r2, sl
 800b3bc:	465b      	mov	r3, fp
 800b3be:	f7f4 ff6b 	bl	8000298 <__aeabi_dsub>
 800b3c2:	9d01      	ldr	r5, [sp, #4]
 800b3c4:	4682      	mov	sl, r0
 800b3c6:	468b      	mov	fp, r1
 800b3c8:	4649      	mov	r1, r9
 800b3ca:	4640      	mov	r0, r8
 800b3cc:	f7f5 fbcc 	bl	8000b68 <__aeabi_d2iz>
 800b3d0:	4606      	mov	r6, r0
 800b3d2:	f7f5 f8af 	bl	8000534 <__aeabi_i2d>
 800b3d6:	4602      	mov	r2, r0
 800b3d8:	460b      	mov	r3, r1
 800b3da:	4640      	mov	r0, r8
 800b3dc:	4649      	mov	r1, r9
 800b3de:	f7f4 ff5b 	bl	8000298 <__aeabi_dsub>
 800b3e2:	3630      	adds	r6, #48	; 0x30
 800b3e4:	f805 6b01 	strb.w	r6, [r5], #1
 800b3e8:	4652      	mov	r2, sl
 800b3ea:	465b      	mov	r3, fp
 800b3ec:	4680      	mov	r8, r0
 800b3ee:	4689      	mov	r9, r1
 800b3f0:	f7f5 fb7c 	bl	8000aec <__aeabi_dcmplt>
 800b3f4:	2800      	cmp	r0, #0
 800b3f6:	d163      	bne.n	800b4c0 <_dtoa_r+0x608>
 800b3f8:	4642      	mov	r2, r8
 800b3fa:	464b      	mov	r3, r9
 800b3fc:	4936      	ldr	r1, [pc, #216]	; (800b4d8 <_dtoa_r+0x620>)
 800b3fe:	2000      	movs	r0, #0
 800b400:	f7f4 ff4a 	bl	8000298 <__aeabi_dsub>
 800b404:	4652      	mov	r2, sl
 800b406:	465b      	mov	r3, fp
 800b408:	f7f5 fb70 	bl	8000aec <__aeabi_dcmplt>
 800b40c:	2800      	cmp	r0, #0
 800b40e:	f040 80b5 	bne.w	800b57c <_dtoa_r+0x6c4>
 800b412:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b414:	429d      	cmp	r5, r3
 800b416:	d081      	beq.n	800b31c <_dtoa_r+0x464>
 800b418:	4b30      	ldr	r3, [pc, #192]	; (800b4dc <_dtoa_r+0x624>)
 800b41a:	2200      	movs	r2, #0
 800b41c:	4650      	mov	r0, sl
 800b41e:	4659      	mov	r1, fp
 800b420:	f7f5 f8f2 	bl	8000608 <__aeabi_dmul>
 800b424:	4b2d      	ldr	r3, [pc, #180]	; (800b4dc <_dtoa_r+0x624>)
 800b426:	4682      	mov	sl, r0
 800b428:	468b      	mov	fp, r1
 800b42a:	4640      	mov	r0, r8
 800b42c:	4649      	mov	r1, r9
 800b42e:	2200      	movs	r2, #0
 800b430:	f7f5 f8ea 	bl	8000608 <__aeabi_dmul>
 800b434:	4680      	mov	r8, r0
 800b436:	4689      	mov	r9, r1
 800b438:	e7c6      	b.n	800b3c8 <_dtoa_r+0x510>
 800b43a:	4650      	mov	r0, sl
 800b43c:	4659      	mov	r1, fp
 800b43e:	f7f5 f8e3 	bl	8000608 <__aeabi_dmul>
 800b442:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b444:	9d01      	ldr	r5, [sp, #4]
 800b446:	930f      	str	r3, [sp, #60]	; 0x3c
 800b448:	4682      	mov	sl, r0
 800b44a:	468b      	mov	fp, r1
 800b44c:	4649      	mov	r1, r9
 800b44e:	4640      	mov	r0, r8
 800b450:	f7f5 fb8a 	bl	8000b68 <__aeabi_d2iz>
 800b454:	4606      	mov	r6, r0
 800b456:	f7f5 f86d 	bl	8000534 <__aeabi_i2d>
 800b45a:	3630      	adds	r6, #48	; 0x30
 800b45c:	4602      	mov	r2, r0
 800b45e:	460b      	mov	r3, r1
 800b460:	4640      	mov	r0, r8
 800b462:	4649      	mov	r1, r9
 800b464:	f7f4 ff18 	bl	8000298 <__aeabi_dsub>
 800b468:	f805 6b01 	strb.w	r6, [r5], #1
 800b46c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b46e:	429d      	cmp	r5, r3
 800b470:	4680      	mov	r8, r0
 800b472:	4689      	mov	r9, r1
 800b474:	f04f 0200 	mov.w	r2, #0
 800b478:	d124      	bne.n	800b4c4 <_dtoa_r+0x60c>
 800b47a:	4b1b      	ldr	r3, [pc, #108]	; (800b4e8 <_dtoa_r+0x630>)
 800b47c:	4650      	mov	r0, sl
 800b47e:	4659      	mov	r1, fp
 800b480:	f7f4 ff0c 	bl	800029c <__adddf3>
 800b484:	4602      	mov	r2, r0
 800b486:	460b      	mov	r3, r1
 800b488:	4640      	mov	r0, r8
 800b48a:	4649      	mov	r1, r9
 800b48c:	f7f5 fb4c 	bl	8000b28 <__aeabi_dcmpgt>
 800b490:	2800      	cmp	r0, #0
 800b492:	d173      	bne.n	800b57c <_dtoa_r+0x6c4>
 800b494:	4652      	mov	r2, sl
 800b496:	465b      	mov	r3, fp
 800b498:	4913      	ldr	r1, [pc, #76]	; (800b4e8 <_dtoa_r+0x630>)
 800b49a:	2000      	movs	r0, #0
 800b49c:	f7f4 fefc 	bl	8000298 <__aeabi_dsub>
 800b4a0:	4602      	mov	r2, r0
 800b4a2:	460b      	mov	r3, r1
 800b4a4:	4640      	mov	r0, r8
 800b4a6:	4649      	mov	r1, r9
 800b4a8:	f7f5 fb20 	bl	8000aec <__aeabi_dcmplt>
 800b4ac:	2800      	cmp	r0, #0
 800b4ae:	f43f af35 	beq.w	800b31c <_dtoa_r+0x464>
 800b4b2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b4b4:	1e6b      	subs	r3, r5, #1
 800b4b6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b4b8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b4bc:	2b30      	cmp	r3, #48	; 0x30
 800b4be:	d0f8      	beq.n	800b4b2 <_dtoa_r+0x5fa>
 800b4c0:	9700      	str	r7, [sp, #0]
 800b4c2:	e049      	b.n	800b558 <_dtoa_r+0x6a0>
 800b4c4:	4b05      	ldr	r3, [pc, #20]	; (800b4dc <_dtoa_r+0x624>)
 800b4c6:	f7f5 f89f 	bl	8000608 <__aeabi_dmul>
 800b4ca:	4680      	mov	r8, r0
 800b4cc:	4689      	mov	r9, r1
 800b4ce:	e7bd      	b.n	800b44c <_dtoa_r+0x594>
 800b4d0:	0800eee0 	.word	0x0800eee0
 800b4d4:	0800eeb8 	.word	0x0800eeb8
 800b4d8:	3ff00000 	.word	0x3ff00000
 800b4dc:	40240000 	.word	0x40240000
 800b4e0:	401c0000 	.word	0x401c0000
 800b4e4:	40140000 	.word	0x40140000
 800b4e8:	3fe00000 	.word	0x3fe00000
 800b4ec:	9d01      	ldr	r5, [sp, #4]
 800b4ee:	4656      	mov	r6, sl
 800b4f0:	465f      	mov	r7, fp
 800b4f2:	4642      	mov	r2, r8
 800b4f4:	464b      	mov	r3, r9
 800b4f6:	4630      	mov	r0, r6
 800b4f8:	4639      	mov	r1, r7
 800b4fa:	f7f5 f9af 	bl	800085c <__aeabi_ddiv>
 800b4fe:	f7f5 fb33 	bl	8000b68 <__aeabi_d2iz>
 800b502:	4682      	mov	sl, r0
 800b504:	f7f5 f816 	bl	8000534 <__aeabi_i2d>
 800b508:	4642      	mov	r2, r8
 800b50a:	464b      	mov	r3, r9
 800b50c:	f7f5 f87c 	bl	8000608 <__aeabi_dmul>
 800b510:	4602      	mov	r2, r0
 800b512:	460b      	mov	r3, r1
 800b514:	4630      	mov	r0, r6
 800b516:	4639      	mov	r1, r7
 800b518:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b51c:	f7f4 febc 	bl	8000298 <__aeabi_dsub>
 800b520:	f805 6b01 	strb.w	r6, [r5], #1
 800b524:	9e01      	ldr	r6, [sp, #4]
 800b526:	9f03      	ldr	r7, [sp, #12]
 800b528:	1bae      	subs	r6, r5, r6
 800b52a:	42b7      	cmp	r7, r6
 800b52c:	4602      	mov	r2, r0
 800b52e:	460b      	mov	r3, r1
 800b530:	d135      	bne.n	800b59e <_dtoa_r+0x6e6>
 800b532:	f7f4 feb3 	bl	800029c <__adddf3>
 800b536:	4642      	mov	r2, r8
 800b538:	464b      	mov	r3, r9
 800b53a:	4606      	mov	r6, r0
 800b53c:	460f      	mov	r7, r1
 800b53e:	f7f5 faf3 	bl	8000b28 <__aeabi_dcmpgt>
 800b542:	b9d0      	cbnz	r0, 800b57a <_dtoa_r+0x6c2>
 800b544:	4642      	mov	r2, r8
 800b546:	464b      	mov	r3, r9
 800b548:	4630      	mov	r0, r6
 800b54a:	4639      	mov	r1, r7
 800b54c:	f7f5 fac4 	bl	8000ad8 <__aeabi_dcmpeq>
 800b550:	b110      	cbz	r0, 800b558 <_dtoa_r+0x6a0>
 800b552:	f01a 0f01 	tst.w	sl, #1
 800b556:	d110      	bne.n	800b57a <_dtoa_r+0x6c2>
 800b558:	4620      	mov	r0, r4
 800b55a:	ee18 1a10 	vmov	r1, s16
 800b55e:	f000 fe67 	bl	800c230 <_Bfree>
 800b562:	2300      	movs	r3, #0
 800b564:	9800      	ldr	r0, [sp, #0]
 800b566:	702b      	strb	r3, [r5, #0]
 800b568:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b56a:	3001      	adds	r0, #1
 800b56c:	6018      	str	r0, [r3, #0]
 800b56e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b570:	2b00      	cmp	r3, #0
 800b572:	f43f acf1 	beq.w	800af58 <_dtoa_r+0xa0>
 800b576:	601d      	str	r5, [r3, #0]
 800b578:	e4ee      	b.n	800af58 <_dtoa_r+0xa0>
 800b57a:	9f00      	ldr	r7, [sp, #0]
 800b57c:	462b      	mov	r3, r5
 800b57e:	461d      	mov	r5, r3
 800b580:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b584:	2a39      	cmp	r2, #57	; 0x39
 800b586:	d106      	bne.n	800b596 <_dtoa_r+0x6de>
 800b588:	9a01      	ldr	r2, [sp, #4]
 800b58a:	429a      	cmp	r2, r3
 800b58c:	d1f7      	bne.n	800b57e <_dtoa_r+0x6c6>
 800b58e:	9901      	ldr	r1, [sp, #4]
 800b590:	2230      	movs	r2, #48	; 0x30
 800b592:	3701      	adds	r7, #1
 800b594:	700a      	strb	r2, [r1, #0]
 800b596:	781a      	ldrb	r2, [r3, #0]
 800b598:	3201      	adds	r2, #1
 800b59a:	701a      	strb	r2, [r3, #0]
 800b59c:	e790      	b.n	800b4c0 <_dtoa_r+0x608>
 800b59e:	4ba6      	ldr	r3, [pc, #664]	; (800b838 <_dtoa_r+0x980>)
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	f7f5 f831 	bl	8000608 <__aeabi_dmul>
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	4606      	mov	r6, r0
 800b5ac:	460f      	mov	r7, r1
 800b5ae:	f7f5 fa93 	bl	8000ad8 <__aeabi_dcmpeq>
 800b5b2:	2800      	cmp	r0, #0
 800b5b4:	d09d      	beq.n	800b4f2 <_dtoa_r+0x63a>
 800b5b6:	e7cf      	b.n	800b558 <_dtoa_r+0x6a0>
 800b5b8:	9a08      	ldr	r2, [sp, #32]
 800b5ba:	2a00      	cmp	r2, #0
 800b5bc:	f000 80d7 	beq.w	800b76e <_dtoa_r+0x8b6>
 800b5c0:	9a06      	ldr	r2, [sp, #24]
 800b5c2:	2a01      	cmp	r2, #1
 800b5c4:	f300 80ba 	bgt.w	800b73c <_dtoa_r+0x884>
 800b5c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b5ca:	2a00      	cmp	r2, #0
 800b5cc:	f000 80b2 	beq.w	800b734 <_dtoa_r+0x87c>
 800b5d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b5d4:	9e07      	ldr	r6, [sp, #28]
 800b5d6:	9d04      	ldr	r5, [sp, #16]
 800b5d8:	9a04      	ldr	r2, [sp, #16]
 800b5da:	441a      	add	r2, r3
 800b5dc:	9204      	str	r2, [sp, #16]
 800b5de:	9a05      	ldr	r2, [sp, #20]
 800b5e0:	2101      	movs	r1, #1
 800b5e2:	441a      	add	r2, r3
 800b5e4:	4620      	mov	r0, r4
 800b5e6:	9205      	str	r2, [sp, #20]
 800b5e8:	f000 ff24 	bl	800c434 <__i2b>
 800b5ec:	4607      	mov	r7, r0
 800b5ee:	2d00      	cmp	r5, #0
 800b5f0:	dd0c      	ble.n	800b60c <_dtoa_r+0x754>
 800b5f2:	9b05      	ldr	r3, [sp, #20]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	dd09      	ble.n	800b60c <_dtoa_r+0x754>
 800b5f8:	42ab      	cmp	r3, r5
 800b5fa:	9a04      	ldr	r2, [sp, #16]
 800b5fc:	bfa8      	it	ge
 800b5fe:	462b      	movge	r3, r5
 800b600:	1ad2      	subs	r2, r2, r3
 800b602:	9204      	str	r2, [sp, #16]
 800b604:	9a05      	ldr	r2, [sp, #20]
 800b606:	1aed      	subs	r5, r5, r3
 800b608:	1ad3      	subs	r3, r2, r3
 800b60a:	9305      	str	r3, [sp, #20]
 800b60c:	9b07      	ldr	r3, [sp, #28]
 800b60e:	b31b      	cbz	r3, 800b658 <_dtoa_r+0x7a0>
 800b610:	9b08      	ldr	r3, [sp, #32]
 800b612:	2b00      	cmp	r3, #0
 800b614:	f000 80af 	beq.w	800b776 <_dtoa_r+0x8be>
 800b618:	2e00      	cmp	r6, #0
 800b61a:	dd13      	ble.n	800b644 <_dtoa_r+0x78c>
 800b61c:	4639      	mov	r1, r7
 800b61e:	4632      	mov	r2, r6
 800b620:	4620      	mov	r0, r4
 800b622:	f000 ffc7 	bl	800c5b4 <__pow5mult>
 800b626:	ee18 2a10 	vmov	r2, s16
 800b62a:	4601      	mov	r1, r0
 800b62c:	4607      	mov	r7, r0
 800b62e:	4620      	mov	r0, r4
 800b630:	f000 ff16 	bl	800c460 <__multiply>
 800b634:	ee18 1a10 	vmov	r1, s16
 800b638:	4680      	mov	r8, r0
 800b63a:	4620      	mov	r0, r4
 800b63c:	f000 fdf8 	bl	800c230 <_Bfree>
 800b640:	ee08 8a10 	vmov	s16, r8
 800b644:	9b07      	ldr	r3, [sp, #28]
 800b646:	1b9a      	subs	r2, r3, r6
 800b648:	d006      	beq.n	800b658 <_dtoa_r+0x7a0>
 800b64a:	ee18 1a10 	vmov	r1, s16
 800b64e:	4620      	mov	r0, r4
 800b650:	f000 ffb0 	bl	800c5b4 <__pow5mult>
 800b654:	ee08 0a10 	vmov	s16, r0
 800b658:	2101      	movs	r1, #1
 800b65a:	4620      	mov	r0, r4
 800b65c:	f000 feea 	bl	800c434 <__i2b>
 800b660:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b662:	2b00      	cmp	r3, #0
 800b664:	4606      	mov	r6, r0
 800b666:	f340 8088 	ble.w	800b77a <_dtoa_r+0x8c2>
 800b66a:	461a      	mov	r2, r3
 800b66c:	4601      	mov	r1, r0
 800b66e:	4620      	mov	r0, r4
 800b670:	f000 ffa0 	bl	800c5b4 <__pow5mult>
 800b674:	9b06      	ldr	r3, [sp, #24]
 800b676:	2b01      	cmp	r3, #1
 800b678:	4606      	mov	r6, r0
 800b67a:	f340 8081 	ble.w	800b780 <_dtoa_r+0x8c8>
 800b67e:	f04f 0800 	mov.w	r8, #0
 800b682:	6933      	ldr	r3, [r6, #16]
 800b684:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b688:	6918      	ldr	r0, [r3, #16]
 800b68a:	f000 fe83 	bl	800c394 <__hi0bits>
 800b68e:	f1c0 0020 	rsb	r0, r0, #32
 800b692:	9b05      	ldr	r3, [sp, #20]
 800b694:	4418      	add	r0, r3
 800b696:	f010 001f 	ands.w	r0, r0, #31
 800b69a:	f000 8092 	beq.w	800b7c2 <_dtoa_r+0x90a>
 800b69e:	f1c0 0320 	rsb	r3, r0, #32
 800b6a2:	2b04      	cmp	r3, #4
 800b6a4:	f340 808a 	ble.w	800b7bc <_dtoa_r+0x904>
 800b6a8:	f1c0 001c 	rsb	r0, r0, #28
 800b6ac:	9b04      	ldr	r3, [sp, #16]
 800b6ae:	4403      	add	r3, r0
 800b6b0:	9304      	str	r3, [sp, #16]
 800b6b2:	9b05      	ldr	r3, [sp, #20]
 800b6b4:	4403      	add	r3, r0
 800b6b6:	4405      	add	r5, r0
 800b6b8:	9305      	str	r3, [sp, #20]
 800b6ba:	9b04      	ldr	r3, [sp, #16]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	dd07      	ble.n	800b6d0 <_dtoa_r+0x818>
 800b6c0:	ee18 1a10 	vmov	r1, s16
 800b6c4:	461a      	mov	r2, r3
 800b6c6:	4620      	mov	r0, r4
 800b6c8:	f000 ffce 	bl	800c668 <__lshift>
 800b6cc:	ee08 0a10 	vmov	s16, r0
 800b6d0:	9b05      	ldr	r3, [sp, #20]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	dd05      	ble.n	800b6e2 <_dtoa_r+0x82a>
 800b6d6:	4631      	mov	r1, r6
 800b6d8:	461a      	mov	r2, r3
 800b6da:	4620      	mov	r0, r4
 800b6dc:	f000 ffc4 	bl	800c668 <__lshift>
 800b6e0:	4606      	mov	r6, r0
 800b6e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d06e      	beq.n	800b7c6 <_dtoa_r+0x90e>
 800b6e8:	ee18 0a10 	vmov	r0, s16
 800b6ec:	4631      	mov	r1, r6
 800b6ee:	f001 f82b 	bl	800c748 <__mcmp>
 800b6f2:	2800      	cmp	r0, #0
 800b6f4:	da67      	bge.n	800b7c6 <_dtoa_r+0x90e>
 800b6f6:	9b00      	ldr	r3, [sp, #0]
 800b6f8:	3b01      	subs	r3, #1
 800b6fa:	ee18 1a10 	vmov	r1, s16
 800b6fe:	9300      	str	r3, [sp, #0]
 800b700:	220a      	movs	r2, #10
 800b702:	2300      	movs	r3, #0
 800b704:	4620      	mov	r0, r4
 800b706:	f000 fdb5 	bl	800c274 <__multadd>
 800b70a:	9b08      	ldr	r3, [sp, #32]
 800b70c:	ee08 0a10 	vmov	s16, r0
 800b710:	2b00      	cmp	r3, #0
 800b712:	f000 81b1 	beq.w	800ba78 <_dtoa_r+0xbc0>
 800b716:	2300      	movs	r3, #0
 800b718:	4639      	mov	r1, r7
 800b71a:	220a      	movs	r2, #10
 800b71c:	4620      	mov	r0, r4
 800b71e:	f000 fda9 	bl	800c274 <__multadd>
 800b722:	9b02      	ldr	r3, [sp, #8]
 800b724:	2b00      	cmp	r3, #0
 800b726:	4607      	mov	r7, r0
 800b728:	f300 808e 	bgt.w	800b848 <_dtoa_r+0x990>
 800b72c:	9b06      	ldr	r3, [sp, #24]
 800b72e:	2b02      	cmp	r3, #2
 800b730:	dc51      	bgt.n	800b7d6 <_dtoa_r+0x91e>
 800b732:	e089      	b.n	800b848 <_dtoa_r+0x990>
 800b734:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b736:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b73a:	e74b      	b.n	800b5d4 <_dtoa_r+0x71c>
 800b73c:	9b03      	ldr	r3, [sp, #12]
 800b73e:	1e5e      	subs	r6, r3, #1
 800b740:	9b07      	ldr	r3, [sp, #28]
 800b742:	42b3      	cmp	r3, r6
 800b744:	bfbf      	itttt	lt
 800b746:	9b07      	ldrlt	r3, [sp, #28]
 800b748:	9607      	strlt	r6, [sp, #28]
 800b74a:	1af2      	sublt	r2, r6, r3
 800b74c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b74e:	bfb6      	itet	lt
 800b750:	189b      	addlt	r3, r3, r2
 800b752:	1b9e      	subge	r6, r3, r6
 800b754:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b756:	9b03      	ldr	r3, [sp, #12]
 800b758:	bfb8      	it	lt
 800b75a:	2600      	movlt	r6, #0
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	bfb7      	itett	lt
 800b760:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b764:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b768:	1a9d      	sublt	r5, r3, r2
 800b76a:	2300      	movlt	r3, #0
 800b76c:	e734      	b.n	800b5d8 <_dtoa_r+0x720>
 800b76e:	9e07      	ldr	r6, [sp, #28]
 800b770:	9d04      	ldr	r5, [sp, #16]
 800b772:	9f08      	ldr	r7, [sp, #32]
 800b774:	e73b      	b.n	800b5ee <_dtoa_r+0x736>
 800b776:	9a07      	ldr	r2, [sp, #28]
 800b778:	e767      	b.n	800b64a <_dtoa_r+0x792>
 800b77a:	9b06      	ldr	r3, [sp, #24]
 800b77c:	2b01      	cmp	r3, #1
 800b77e:	dc18      	bgt.n	800b7b2 <_dtoa_r+0x8fa>
 800b780:	f1ba 0f00 	cmp.w	sl, #0
 800b784:	d115      	bne.n	800b7b2 <_dtoa_r+0x8fa>
 800b786:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b78a:	b993      	cbnz	r3, 800b7b2 <_dtoa_r+0x8fa>
 800b78c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b790:	0d1b      	lsrs	r3, r3, #20
 800b792:	051b      	lsls	r3, r3, #20
 800b794:	b183      	cbz	r3, 800b7b8 <_dtoa_r+0x900>
 800b796:	9b04      	ldr	r3, [sp, #16]
 800b798:	3301      	adds	r3, #1
 800b79a:	9304      	str	r3, [sp, #16]
 800b79c:	9b05      	ldr	r3, [sp, #20]
 800b79e:	3301      	adds	r3, #1
 800b7a0:	9305      	str	r3, [sp, #20]
 800b7a2:	f04f 0801 	mov.w	r8, #1
 800b7a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	f47f af6a 	bne.w	800b682 <_dtoa_r+0x7ca>
 800b7ae:	2001      	movs	r0, #1
 800b7b0:	e76f      	b.n	800b692 <_dtoa_r+0x7da>
 800b7b2:	f04f 0800 	mov.w	r8, #0
 800b7b6:	e7f6      	b.n	800b7a6 <_dtoa_r+0x8ee>
 800b7b8:	4698      	mov	r8, r3
 800b7ba:	e7f4      	b.n	800b7a6 <_dtoa_r+0x8ee>
 800b7bc:	f43f af7d 	beq.w	800b6ba <_dtoa_r+0x802>
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	301c      	adds	r0, #28
 800b7c4:	e772      	b.n	800b6ac <_dtoa_r+0x7f4>
 800b7c6:	9b03      	ldr	r3, [sp, #12]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	dc37      	bgt.n	800b83c <_dtoa_r+0x984>
 800b7cc:	9b06      	ldr	r3, [sp, #24]
 800b7ce:	2b02      	cmp	r3, #2
 800b7d0:	dd34      	ble.n	800b83c <_dtoa_r+0x984>
 800b7d2:	9b03      	ldr	r3, [sp, #12]
 800b7d4:	9302      	str	r3, [sp, #8]
 800b7d6:	9b02      	ldr	r3, [sp, #8]
 800b7d8:	b96b      	cbnz	r3, 800b7f6 <_dtoa_r+0x93e>
 800b7da:	4631      	mov	r1, r6
 800b7dc:	2205      	movs	r2, #5
 800b7de:	4620      	mov	r0, r4
 800b7e0:	f000 fd48 	bl	800c274 <__multadd>
 800b7e4:	4601      	mov	r1, r0
 800b7e6:	4606      	mov	r6, r0
 800b7e8:	ee18 0a10 	vmov	r0, s16
 800b7ec:	f000 ffac 	bl	800c748 <__mcmp>
 800b7f0:	2800      	cmp	r0, #0
 800b7f2:	f73f adbb 	bgt.w	800b36c <_dtoa_r+0x4b4>
 800b7f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7f8:	9d01      	ldr	r5, [sp, #4]
 800b7fa:	43db      	mvns	r3, r3
 800b7fc:	9300      	str	r3, [sp, #0]
 800b7fe:	f04f 0800 	mov.w	r8, #0
 800b802:	4631      	mov	r1, r6
 800b804:	4620      	mov	r0, r4
 800b806:	f000 fd13 	bl	800c230 <_Bfree>
 800b80a:	2f00      	cmp	r7, #0
 800b80c:	f43f aea4 	beq.w	800b558 <_dtoa_r+0x6a0>
 800b810:	f1b8 0f00 	cmp.w	r8, #0
 800b814:	d005      	beq.n	800b822 <_dtoa_r+0x96a>
 800b816:	45b8      	cmp	r8, r7
 800b818:	d003      	beq.n	800b822 <_dtoa_r+0x96a>
 800b81a:	4641      	mov	r1, r8
 800b81c:	4620      	mov	r0, r4
 800b81e:	f000 fd07 	bl	800c230 <_Bfree>
 800b822:	4639      	mov	r1, r7
 800b824:	4620      	mov	r0, r4
 800b826:	f000 fd03 	bl	800c230 <_Bfree>
 800b82a:	e695      	b.n	800b558 <_dtoa_r+0x6a0>
 800b82c:	2600      	movs	r6, #0
 800b82e:	4637      	mov	r7, r6
 800b830:	e7e1      	b.n	800b7f6 <_dtoa_r+0x93e>
 800b832:	9700      	str	r7, [sp, #0]
 800b834:	4637      	mov	r7, r6
 800b836:	e599      	b.n	800b36c <_dtoa_r+0x4b4>
 800b838:	40240000 	.word	0x40240000
 800b83c:	9b08      	ldr	r3, [sp, #32]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	f000 80ca 	beq.w	800b9d8 <_dtoa_r+0xb20>
 800b844:	9b03      	ldr	r3, [sp, #12]
 800b846:	9302      	str	r3, [sp, #8]
 800b848:	2d00      	cmp	r5, #0
 800b84a:	dd05      	ble.n	800b858 <_dtoa_r+0x9a0>
 800b84c:	4639      	mov	r1, r7
 800b84e:	462a      	mov	r2, r5
 800b850:	4620      	mov	r0, r4
 800b852:	f000 ff09 	bl	800c668 <__lshift>
 800b856:	4607      	mov	r7, r0
 800b858:	f1b8 0f00 	cmp.w	r8, #0
 800b85c:	d05b      	beq.n	800b916 <_dtoa_r+0xa5e>
 800b85e:	6879      	ldr	r1, [r7, #4]
 800b860:	4620      	mov	r0, r4
 800b862:	f000 fca5 	bl	800c1b0 <_Balloc>
 800b866:	4605      	mov	r5, r0
 800b868:	b928      	cbnz	r0, 800b876 <_dtoa_r+0x9be>
 800b86a:	4b87      	ldr	r3, [pc, #540]	; (800ba88 <_dtoa_r+0xbd0>)
 800b86c:	4602      	mov	r2, r0
 800b86e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b872:	f7ff bb3b 	b.w	800aeec <_dtoa_r+0x34>
 800b876:	693a      	ldr	r2, [r7, #16]
 800b878:	3202      	adds	r2, #2
 800b87a:	0092      	lsls	r2, r2, #2
 800b87c:	f107 010c 	add.w	r1, r7, #12
 800b880:	300c      	adds	r0, #12
 800b882:	f7fd fd1b 	bl	80092bc <memcpy>
 800b886:	2201      	movs	r2, #1
 800b888:	4629      	mov	r1, r5
 800b88a:	4620      	mov	r0, r4
 800b88c:	f000 feec 	bl	800c668 <__lshift>
 800b890:	9b01      	ldr	r3, [sp, #4]
 800b892:	f103 0901 	add.w	r9, r3, #1
 800b896:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b89a:	4413      	add	r3, r2
 800b89c:	9305      	str	r3, [sp, #20]
 800b89e:	f00a 0301 	and.w	r3, sl, #1
 800b8a2:	46b8      	mov	r8, r7
 800b8a4:	9304      	str	r3, [sp, #16]
 800b8a6:	4607      	mov	r7, r0
 800b8a8:	4631      	mov	r1, r6
 800b8aa:	ee18 0a10 	vmov	r0, s16
 800b8ae:	f7ff fa77 	bl	800ada0 <quorem>
 800b8b2:	4641      	mov	r1, r8
 800b8b4:	9002      	str	r0, [sp, #8]
 800b8b6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b8ba:	ee18 0a10 	vmov	r0, s16
 800b8be:	f000 ff43 	bl	800c748 <__mcmp>
 800b8c2:	463a      	mov	r2, r7
 800b8c4:	9003      	str	r0, [sp, #12]
 800b8c6:	4631      	mov	r1, r6
 800b8c8:	4620      	mov	r0, r4
 800b8ca:	f000 ff59 	bl	800c780 <__mdiff>
 800b8ce:	68c2      	ldr	r2, [r0, #12]
 800b8d0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800b8d4:	4605      	mov	r5, r0
 800b8d6:	bb02      	cbnz	r2, 800b91a <_dtoa_r+0xa62>
 800b8d8:	4601      	mov	r1, r0
 800b8da:	ee18 0a10 	vmov	r0, s16
 800b8de:	f000 ff33 	bl	800c748 <__mcmp>
 800b8e2:	4602      	mov	r2, r0
 800b8e4:	4629      	mov	r1, r5
 800b8e6:	4620      	mov	r0, r4
 800b8e8:	9207      	str	r2, [sp, #28]
 800b8ea:	f000 fca1 	bl	800c230 <_Bfree>
 800b8ee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b8f2:	ea43 0102 	orr.w	r1, r3, r2
 800b8f6:	9b04      	ldr	r3, [sp, #16]
 800b8f8:	430b      	orrs	r3, r1
 800b8fa:	464d      	mov	r5, r9
 800b8fc:	d10f      	bne.n	800b91e <_dtoa_r+0xa66>
 800b8fe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b902:	d02a      	beq.n	800b95a <_dtoa_r+0xaa2>
 800b904:	9b03      	ldr	r3, [sp, #12]
 800b906:	2b00      	cmp	r3, #0
 800b908:	dd02      	ble.n	800b910 <_dtoa_r+0xa58>
 800b90a:	9b02      	ldr	r3, [sp, #8]
 800b90c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b910:	f88b a000 	strb.w	sl, [fp]
 800b914:	e775      	b.n	800b802 <_dtoa_r+0x94a>
 800b916:	4638      	mov	r0, r7
 800b918:	e7ba      	b.n	800b890 <_dtoa_r+0x9d8>
 800b91a:	2201      	movs	r2, #1
 800b91c:	e7e2      	b.n	800b8e4 <_dtoa_r+0xa2c>
 800b91e:	9b03      	ldr	r3, [sp, #12]
 800b920:	2b00      	cmp	r3, #0
 800b922:	db04      	blt.n	800b92e <_dtoa_r+0xa76>
 800b924:	9906      	ldr	r1, [sp, #24]
 800b926:	430b      	orrs	r3, r1
 800b928:	9904      	ldr	r1, [sp, #16]
 800b92a:	430b      	orrs	r3, r1
 800b92c:	d122      	bne.n	800b974 <_dtoa_r+0xabc>
 800b92e:	2a00      	cmp	r2, #0
 800b930:	ddee      	ble.n	800b910 <_dtoa_r+0xa58>
 800b932:	ee18 1a10 	vmov	r1, s16
 800b936:	2201      	movs	r2, #1
 800b938:	4620      	mov	r0, r4
 800b93a:	f000 fe95 	bl	800c668 <__lshift>
 800b93e:	4631      	mov	r1, r6
 800b940:	ee08 0a10 	vmov	s16, r0
 800b944:	f000 ff00 	bl	800c748 <__mcmp>
 800b948:	2800      	cmp	r0, #0
 800b94a:	dc03      	bgt.n	800b954 <_dtoa_r+0xa9c>
 800b94c:	d1e0      	bne.n	800b910 <_dtoa_r+0xa58>
 800b94e:	f01a 0f01 	tst.w	sl, #1
 800b952:	d0dd      	beq.n	800b910 <_dtoa_r+0xa58>
 800b954:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b958:	d1d7      	bne.n	800b90a <_dtoa_r+0xa52>
 800b95a:	2339      	movs	r3, #57	; 0x39
 800b95c:	f88b 3000 	strb.w	r3, [fp]
 800b960:	462b      	mov	r3, r5
 800b962:	461d      	mov	r5, r3
 800b964:	3b01      	subs	r3, #1
 800b966:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b96a:	2a39      	cmp	r2, #57	; 0x39
 800b96c:	d071      	beq.n	800ba52 <_dtoa_r+0xb9a>
 800b96e:	3201      	adds	r2, #1
 800b970:	701a      	strb	r2, [r3, #0]
 800b972:	e746      	b.n	800b802 <_dtoa_r+0x94a>
 800b974:	2a00      	cmp	r2, #0
 800b976:	dd07      	ble.n	800b988 <_dtoa_r+0xad0>
 800b978:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b97c:	d0ed      	beq.n	800b95a <_dtoa_r+0xaa2>
 800b97e:	f10a 0301 	add.w	r3, sl, #1
 800b982:	f88b 3000 	strb.w	r3, [fp]
 800b986:	e73c      	b.n	800b802 <_dtoa_r+0x94a>
 800b988:	9b05      	ldr	r3, [sp, #20]
 800b98a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b98e:	4599      	cmp	r9, r3
 800b990:	d047      	beq.n	800ba22 <_dtoa_r+0xb6a>
 800b992:	ee18 1a10 	vmov	r1, s16
 800b996:	2300      	movs	r3, #0
 800b998:	220a      	movs	r2, #10
 800b99a:	4620      	mov	r0, r4
 800b99c:	f000 fc6a 	bl	800c274 <__multadd>
 800b9a0:	45b8      	cmp	r8, r7
 800b9a2:	ee08 0a10 	vmov	s16, r0
 800b9a6:	f04f 0300 	mov.w	r3, #0
 800b9aa:	f04f 020a 	mov.w	r2, #10
 800b9ae:	4641      	mov	r1, r8
 800b9b0:	4620      	mov	r0, r4
 800b9b2:	d106      	bne.n	800b9c2 <_dtoa_r+0xb0a>
 800b9b4:	f000 fc5e 	bl	800c274 <__multadd>
 800b9b8:	4680      	mov	r8, r0
 800b9ba:	4607      	mov	r7, r0
 800b9bc:	f109 0901 	add.w	r9, r9, #1
 800b9c0:	e772      	b.n	800b8a8 <_dtoa_r+0x9f0>
 800b9c2:	f000 fc57 	bl	800c274 <__multadd>
 800b9c6:	4639      	mov	r1, r7
 800b9c8:	4680      	mov	r8, r0
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	220a      	movs	r2, #10
 800b9ce:	4620      	mov	r0, r4
 800b9d0:	f000 fc50 	bl	800c274 <__multadd>
 800b9d4:	4607      	mov	r7, r0
 800b9d6:	e7f1      	b.n	800b9bc <_dtoa_r+0xb04>
 800b9d8:	9b03      	ldr	r3, [sp, #12]
 800b9da:	9302      	str	r3, [sp, #8]
 800b9dc:	9d01      	ldr	r5, [sp, #4]
 800b9de:	ee18 0a10 	vmov	r0, s16
 800b9e2:	4631      	mov	r1, r6
 800b9e4:	f7ff f9dc 	bl	800ada0 <quorem>
 800b9e8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b9ec:	9b01      	ldr	r3, [sp, #4]
 800b9ee:	f805 ab01 	strb.w	sl, [r5], #1
 800b9f2:	1aea      	subs	r2, r5, r3
 800b9f4:	9b02      	ldr	r3, [sp, #8]
 800b9f6:	4293      	cmp	r3, r2
 800b9f8:	dd09      	ble.n	800ba0e <_dtoa_r+0xb56>
 800b9fa:	ee18 1a10 	vmov	r1, s16
 800b9fe:	2300      	movs	r3, #0
 800ba00:	220a      	movs	r2, #10
 800ba02:	4620      	mov	r0, r4
 800ba04:	f000 fc36 	bl	800c274 <__multadd>
 800ba08:	ee08 0a10 	vmov	s16, r0
 800ba0c:	e7e7      	b.n	800b9de <_dtoa_r+0xb26>
 800ba0e:	9b02      	ldr	r3, [sp, #8]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	bfc8      	it	gt
 800ba14:	461d      	movgt	r5, r3
 800ba16:	9b01      	ldr	r3, [sp, #4]
 800ba18:	bfd8      	it	le
 800ba1a:	2501      	movle	r5, #1
 800ba1c:	441d      	add	r5, r3
 800ba1e:	f04f 0800 	mov.w	r8, #0
 800ba22:	ee18 1a10 	vmov	r1, s16
 800ba26:	2201      	movs	r2, #1
 800ba28:	4620      	mov	r0, r4
 800ba2a:	f000 fe1d 	bl	800c668 <__lshift>
 800ba2e:	4631      	mov	r1, r6
 800ba30:	ee08 0a10 	vmov	s16, r0
 800ba34:	f000 fe88 	bl	800c748 <__mcmp>
 800ba38:	2800      	cmp	r0, #0
 800ba3a:	dc91      	bgt.n	800b960 <_dtoa_r+0xaa8>
 800ba3c:	d102      	bne.n	800ba44 <_dtoa_r+0xb8c>
 800ba3e:	f01a 0f01 	tst.w	sl, #1
 800ba42:	d18d      	bne.n	800b960 <_dtoa_r+0xaa8>
 800ba44:	462b      	mov	r3, r5
 800ba46:	461d      	mov	r5, r3
 800ba48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ba4c:	2a30      	cmp	r2, #48	; 0x30
 800ba4e:	d0fa      	beq.n	800ba46 <_dtoa_r+0xb8e>
 800ba50:	e6d7      	b.n	800b802 <_dtoa_r+0x94a>
 800ba52:	9a01      	ldr	r2, [sp, #4]
 800ba54:	429a      	cmp	r2, r3
 800ba56:	d184      	bne.n	800b962 <_dtoa_r+0xaaa>
 800ba58:	9b00      	ldr	r3, [sp, #0]
 800ba5a:	3301      	adds	r3, #1
 800ba5c:	9300      	str	r3, [sp, #0]
 800ba5e:	2331      	movs	r3, #49	; 0x31
 800ba60:	7013      	strb	r3, [r2, #0]
 800ba62:	e6ce      	b.n	800b802 <_dtoa_r+0x94a>
 800ba64:	4b09      	ldr	r3, [pc, #36]	; (800ba8c <_dtoa_r+0xbd4>)
 800ba66:	f7ff ba95 	b.w	800af94 <_dtoa_r+0xdc>
 800ba6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	f47f aa6e 	bne.w	800af4e <_dtoa_r+0x96>
 800ba72:	4b07      	ldr	r3, [pc, #28]	; (800ba90 <_dtoa_r+0xbd8>)
 800ba74:	f7ff ba8e 	b.w	800af94 <_dtoa_r+0xdc>
 800ba78:	9b02      	ldr	r3, [sp, #8]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	dcae      	bgt.n	800b9dc <_dtoa_r+0xb24>
 800ba7e:	9b06      	ldr	r3, [sp, #24]
 800ba80:	2b02      	cmp	r3, #2
 800ba82:	f73f aea8 	bgt.w	800b7d6 <_dtoa_r+0x91e>
 800ba86:	e7a9      	b.n	800b9dc <_dtoa_r+0xb24>
 800ba88:	0800edd0 	.word	0x0800edd0
 800ba8c:	0800ebd0 	.word	0x0800ebd0
 800ba90:	0800ed51 	.word	0x0800ed51

0800ba94 <rshift>:
 800ba94:	6903      	ldr	r3, [r0, #16]
 800ba96:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ba9a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ba9e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800baa2:	f100 0414 	add.w	r4, r0, #20
 800baa6:	dd45      	ble.n	800bb34 <rshift+0xa0>
 800baa8:	f011 011f 	ands.w	r1, r1, #31
 800baac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bab0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bab4:	d10c      	bne.n	800bad0 <rshift+0x3c>
 800bab6:	f100 0710 	add.w	r7, r0, #16
 800baba:	4629      	mov	r1, r5
 800babc:	42b1      	cmp	r1, r6
 800babe:	d334      	bcc.n	800bb2a <rshift+0x96>
 800bac0:	1a9b      	subs	r3, r3, r2
 800bac2:	009b      	lsls	r3, r3, #2
 800bac4:	1eea      	subs	r2, r5, #3
 800bac6:	4296      	cmp	r6, r2
 800bac8:	bf38      	it	cc
 800baca:	2300      	movcc	r3, #0
 800bacc:	4423      	add	r3, r4
 800bace:	e015      	b.n	800bafc <rshift+0x68>
 800bad0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bad4:	f1c1 0820 	rsb	r8, r1, #32
 800bad8:	40cf      	lsrs	r7, r1
 800bada:	f105 0e04 	add.w	lr, r5, #4
 800bade:	46a1      	mov	r9, r4
 800bae0:	4576      	cmp	r6, lr
 800bae2:	46f4      	mov	ip, lr
 800bae4:	d815      	bhi.n	800bb12 <rshift+0x7e>
 800bae6:	1a9a      	subs	r2, r3, r2
 800bae8:	0092      	lsls	r2, r2, #2
 800baea:	3a04      	subs	r2, #4
 800baec:	3501      	adds	r5, #1
 800baee:	42ae      	cmp	r6, r5
 800baf0:	bf38      	it	cc
 800baf2:	2200      	movcc	r2, #0
 800baf4:	18a3      	adds	r3, r4, r2
 800baf6:	50a7      	str	r7, [r4, r2]
 800baf8:	b107      	cbz	r7, 800bafc <rshift+0x68>
 800bafa:	3304      	adds	r3, #4
 800bafc:	1b1a      	subs	r2, r3, r4
 800bafe:	42a3      	cmp	r3, r4
 800bb00:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bb04:	bf08      	it	eq
 800bb06:	2300      	moveq	r3, #0
 800bb08:	6102      	str	r2, [r0, #16]
 800bb0a:	bf08      	it	eq
 800bb0c:	6143      	streq	r3, [r0, #20]
 800bb0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb12:	f8dc c000 	ldr.w	ip, [ip]
 800bb16:	fa0c fc08 	lsl.w	ip, ip, r8
 800bb1a:	ea4c 0707 	orr.w	r7, ip, r7
 800bb1e:	f849 7b04 	str.w	r7, [r9], #4
 800bb22:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bb26:	40cf      	lsrs	r7, r1
 800bb28:	e7da      	b.n	800bae0 <rshift+0x4c>
 800bb2a:	f851 cb04 	ldr.w	ip, [r1], #4
 800bb2e:	f847 cf04 	str.w	ip, [r7, #4]!
 800bb32:	e7c3      	b.n	800babc <rshift+0x28>
 800bb34:	4623      	mov	r3, r4
 800bb36:	e7e1      	b.n	800bafc <rshift+0x68>

0800bb38 <__hexdig_fun>:
 800bb38:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800bb3c:	2b09      	cmp	r3, #9
 800bb3e:	d802      	bhi.n	800bb46 <__hexdig_fun+0xe>
 800bb40:	3820      	subs	r0, #32
 800bb42:	b2c0      	uxtb	r0, r0
 800bb44:	4770      	bx	lr
 800bb46:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800bb4a:	2b05      	cmp	r3, #5
 800bb4c:	d801      	bhi.n	800bb52 <__hexdig_fun+0x1a>
 800bb4e:	3847      	subs	r0, #71	; 0x47
 800bb50:	e7f7      	b.n	800bb42 <__hexdig_fun+0xa>
 800bb52:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800bb56:	2b05      	cmp	r3, #5
 800bb58:	d801      	bhi.n	800bb5e <__hexdig_fun+0x26>
 800bb5a:	3827      	subs	r0, #39	; 0x27
 800bb5c:	e7f1      	b.n	800bb42 <__hexdig_fun+0xa>
 800bb5e:	2000      	movs	r0, #0
 800bb60:	4770      	bx	lr
	...

0800bb64 <__gethex>:
 800bb64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb68:	ed2d 8b02 	vpush	{d8}
 800bb6c:	b089      	sub	sp, #36	; 0x24
 800bb6e:	ee08 0a10 	vmov	s16, r0
 800bb72:	9304      	str	r3, [sp, #16]
 800bb74:	4bb4      	ldr	r3, [pc, #720]	; (800be48 <__gethex+0x2e4>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	9301      	str	r3, [sp, #4]
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	468b      	mov	fp, r1
 800bb7e:	4690      	mov	r8, r2
 800bb80:	f7f4 fb2e 	bl	80001e0 <strlen>
 800bb84:	9b01      	ldr	r3, [sp, #4]
 800bb86:	f8db 2000 	ldr.w	r2, [fp]
 800bb8a:	4403      	add	r3, r0
 800bb8c:	4682      	mov	sl, r0
 800bb8e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800bb92:	9305      	str	r3, [sp, #20]
 800bb94:	1c93      	adds	r3, r2, #2
 800bb96:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800bb9a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800bb9e:	32fe      	adds	r2, #254	; 0xfe
 800bba0:	18d1      	adds	r1, r2, r3
 800bba2:	461f      	mov	r7, r3
 800bba4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bba8:	9100      	str	r1, [sp, #0]
 800bbaa:	2830      	cmp	r0, #48	; 0x30
 800bbac:	d0f8      	beq.n	800bba0 <__gethex+0x3c>
 800bbae:	f7ff ffc3 	bl	800bb38 <__hexdig_fun>
 800bbb2:	4604      	mov	r4, r0
 800bbb4:	2800      	cmp	r0, #0
 800bbb6:	d13a      	bne.n	800bc2e <__gethex+0xca>
 800bbb8:	9901      	ldr	r1, [sp, #4]
 800bbba:	4652      	mov	r2, sl
 800bbbc:	4638      	mov	r0, r7
 800bbbe:	f001 fa23 	bl	800d008 <strncmp>
 800bbc2:	4605      	mov	r5, r0
 800bbc4:	2800      	cmp	r0, #0
 800bbc6:	d168      	bne.n	800bc9a <__gethex+0x136>
 800bbc8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800bbcc:	eb07 060a 	add.w	r6, r7, sl
 800bbd0:	f7ff ffb2 	bl	800bb38 <__hexdig_fun>
 800bbd4:	2800      	cmp	r0, #0
 800bbd6:	d062      	beq.n	800bc9e <__gethex+0x13a>
 800bbd8:	4633      	mov	r3, r6
 800bbda:	7818      	ldrb	r0, [r3, #0]
 800bbdc:	2830      	cmp	r0, #48	; 0x30
 800bbde:	461f      	mov	r7, r3
 800bbe0:	f103 0301 	add.w	r3, r3, #1
 800bbe4:	d0f9      	beq.n	800bbda <__gethex+0x76>
 800bbe6:	f7ff ffa7 	bl	800bb38 <__hexdig_fun>
 800bbea:	2301      	movs	r3, #1
 800bbec:	fab0 f480 	clz	r4, r0
 800bbf0:	0964      	lsrs	r4, r4, #5
 800bbf2:	4635      	mov	r5, r6
 800bbf4:	9300      	str	r3, [sp, #0]
 800bbf6:	463a      	mov	r2, r7
 800bbf8:	4616      	mov	r6, r2
 800bbfa:	3201      	adds	r2, #1
 800bbfc:	7830      	ldrb	r0, [r6, #0]
 800bbfe:	f7ff ff9b 	bl	800bb38 <__hexdig_fun>
 800bc02:	2800      	cmp	r0, #0
 800bc04:	d1f8      	bne.n	800bbf8 <__gethex+0x94>
 800bc06:	9901      	ldr	r1, [sp, #4]
 800bc08:	4652      	mov	r2, sl
 800bc0a:	4630      	mov	r0, r6
 800bc0c:	f001 f9fc 	bl	800d008 <strncmp>
 800bc10:	b980      	cbnz	r0, 800bc34 <__gethex+0xd0>
 800bc12:	b94d      	cbnz	r5, 800bc28 <__gethex+0xc4>
 800bc14:	eb06 050a 	add.w	r5, r6, sl
 800bc18:	462a      	mov	r2, r5
 800bc1a:	4616      	mov	r6, r2
 800bc1c:	3201      	adds	r2, #1
 800bc1e:	7830      	ldrb	r0, [r6, #0]
 800bc20:	f7ff ff8a 	bl	800bb38 <__hexdig_fun>
 800bc24:	2800      	cmp	r0, #0
 800bc26:	d1f8      	bne.n	800bc1a <__gethex+0xb6>
 800bc28:	1bad      	subs	r5, r5, r6
 800bc2a:	00ad      	lsls	r5, r5, #2
 800bc2c:	e004      	b.n	800bc38 <__gethex+0xd4>
 800bc2e:	2400      	movs	r4, #0
 800bc30:	4625      	mov	r5, r4
 800bc32:	e7e0      	b.n	800bbf6 <__gethex+0x92>
 800bc34:	2d00      	cmp	r5, #0
 800bc36:	d1f7      	bne.n	800bc28 <__gethex+0xc4>
 800bc38:	7833      	ldrb	r3, [r6, #0]
 800bc3a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bc3e:	2b50      	cmp	r3, #80	; 0x50
 800bc40:	d13b      	bne.n	800bcba <__gethex+0x156>
 800bc42:	7873      	ldrb	r3, [r6, #1]
 800bc44:	2b2b      	cmp	r3, #43	; 0x2b
 800bc46:	d02c      	beq.n	800bca2 <__gethex+0x13e>
 800bc48:	2b2d      	cmp	r3, #45	; 0x2d
 800bc4a:	d02e      	beq.n	800bcaa <__gethex+0x146>
 800bc4c:	1c71      	adds	r1, r6, #1
 800bc4e:	f04f 0900 	mov.w	r9, #0
 800bc52:	7808      	ldrb	r0, [r1, #0]
 800bc54:	f7ff ff70 	bl	800bb38 <__hexdig_fun>
 800bc58:	1e43      	subs	r3, r0, #1
 800bc5a:	b2db      	uxtb	r3, r3
 800bc5c:	2b18      	cmp	r3, #24
 800bc5e:	d82c      	bhi.n	800bcba <__gethex+0x156>
 800bc60:	f1a0 0210 	sub.w	r2, r0, #16
 800bc64:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bc68:	f7ff ff66 	bl	800bb38 <__hexdig_fun>
 800bc6c:	1e43      	subs	r3, r0, #1
 800bc6e:	b2db      	uxtb	r3, r3
 800bc70:	2b18      	cmp	r3, #24
 800bc72:	d91d      	bls.n	800bcb0 <__gethex+0x14c>
 800bc74:	f1b9 0f00 	cmp.w	r9, #0
 800bc78:	d000      	beq.n	800bc7c <__gethex+0x118>
 800bc7a:	4252      	negs	r2, r2
 800bc7c:	4415      	add	r5, r2
 800bc7e:	f8cb 1000 	str.w	r1, [fp]
 800bc82:	b1e4      	cbz	r4, 800bcbe <__gethex+0x15a>
 800bc84:	9b00      	ldr	r3, [sp, #0]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	bf14      	ite	ne
 800bc8a:	2700      	movne	r7, #0
 800bc8c:	2706      	moveq	r7, #6
 800bc8e:	4638      	mov	r0, r7
 800bc90:	b009      	add	sp, #36	; 0x24
 800bc92:	ecbd 8b02 	vpop	{d8}
 800bc96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc9a:	463e      	mov	r6, r7
 800bc9c:	4625      	mov	r5, r4
 800bc9e:	2401      	movs	r4, #1
 800bca0:	e7ca      	b.n	800bc38 <__gethex+0xd4>
 800bca2:	f04f 0900 	mov.w	r9, #0
 800bca6:	1cb1      	adds	r1, r6, #2
 800bca8:	e7d3      	b.n	800bc52 <__gethex+0xee>
 800bcaa:	f04f 0901 	mov.w	r9, #1
 800bcae:	e7fa      	b.n	800bca6 <__gethex+0x142>
 800bcb0:	230a      	movs	r3, #10
 800bcb2:	fb03 0202 	mla	r2, r3, r2, r0
 800bcb6:	3a10      	subs	r2, #16
 800bcb8:	e7d4      	b.n	800bc64 <__gethex+0x100>
 800bcba:	4631      	mov	r1, r6
 800bcbc:	e7df      	b.n	800bc7e <__gethex+0x11a>
 800bcbe:	1bf3      	subs	r3, r6, r7
 800bcc0:	3b01      	subs	r3, #1
 800bcc2:	4621      	mov	r1, r4
 800bcc4:	2b07      	cmp	r3, #7
 800bcc6:	dc0b      	bgt.n	800bce0 <__gethex+0x17c>
 800bcc8:	ee18 0a10 	vmov	r0, s16
 800bccc:	f000 fa70 	bl	800c1b0 <_Balloc>
 800bcd0:	4604      	mov	r4, r0
 800bcd2:	b940      	cbnz	r0, 800bce6 <__gethex+0x182>
 800bcd4:	4b5d      	ldr	r3, [pc, #372]	; (800be4c <__gethex+0x2e8>)
 800bcd6:	4602      	mov	r2, r0
 800bcd8:	21de      	movs	r1, #222	; 0xde
 800bcda:	485d      	ldr	r0, [pc, #372]	; (800be50 <__gethex+0x2ec>)
 800bcdc:	f001 f9b6 	bl	800d04c <__assert_func>
 800bce0:	3101      	adds	r1, #1
 800bce2:	105b      	asrs	r3, r3, #1
 800bce4:	e7ee      	b.n	800bcc4 <__gethex+0x160>
 800bce6:	f100 0914 	add.w	r9, r0, #20
 800bcea:	f04f 0b00 	mov.w	fp, #0
 800bcee:	f1ca 0301 	rsb	r3, sl, #1
 800bcf2:	f8cd 9008 	str.w	r9, [sp, #8]
 800bcf6:	f8cd b000 	str.w	fp, [sp]
 800bcfa:	9306      	str	r3, [sp, #24]
 800bcfc:	42b7      	cmp	r7, r6
 800bcfe:	d340      	bcc.n	800bd82 <__gethex+0x21e>
 800bd00:	9802      	ldr	r0, [sp, #8]
 800bd02:	9b00      	ldr	r3, [sp, #0]
 800bd04:	f840 3b04 	str.w	r3, [r0], #4
 800bd08:	eba0 0009 	sub.w	r0, r0, r9
 800bd0c:	1080      	asrs	r0, r0, #2
 800bd0e:	0146      	lsls	r6, r0, #5
 800bd10:	6120      	str	r0, [r4, #16]
 800bd12:	4618      	mov	r0, r3
 800bd14:	f000 fb3e 	bl	800c394 <__hi0bits>
 800bd18:	1a30      	subs	r0, r6, r0
 800bd1a:	f8d8 6000 	ldr.w	r6, [r8]
 800bd1e:	42b0      	cmp	r0, r6
 800bd20:	dd63      	ble.n	800bdea <__gethex+0x286>
 800bd22:	1b87      	subs	r7, r0, r6
 800bd24:	4639      	mov	r1, r7
 800bd26:	4620      	mov	r0, r4
 800bd28:	f000 fee2 	bl	800caf0 <__any_on>
 800bd2c:	4682      	mov	sl, r0
 800bd2e:	b1a8      	cbz	r0, 800bd5c <__gethex+0x1f8>
 800bd30:	1e7b      	subs	r3, r7, #1
 800bd32:	1159      	asrs	r1, r3, #5
 800bd34:	f003 021f 	and.w	r2, r3, #31
 800bd38:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800bd3c:	f04f 0a01 	mov.w	sl, #1
 800bd40:	fa0a f202 	lsl.w	r2, sl, r2
 800bd44:	420a      	tst	r2, r1
 800bd46:	d009      	beq.n	800bd5c <__gethex+0x1f8>
 800bd48:	4553      	cmp	r3, sl
 800bd4a:	dd05      	ble.n	800bd58 <__gethex+0x1f4>
 800bd4c:	1eb9      	subs	r1, r7, #2
 800bd4e:	4620      	mov	r0, r4
 800bd50:	f000 fece 	bl	800caf0 <__any_on>
 800bd54:	2800      	cmp	r0, #0
 800bd56:	d145      	bne.n	800bde4 <__gethex+0x280>
 800bd58:	f04f 0a02 	mov.w	sl, #2
 800bd5c:	4639      	mov	r1, r7
 800bd5e:	4620      	mov	r0, r4
 800bd60:	f7ff fe98 	bl	800ba94 <rshift>
 800bd64:	443d      	add	r5, r7
 800bd66:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bd6a:	42ab      	cmp	r3, r5
 800bd6c:	da4c      	bge.n	800be08 <__gethex+0x2a4>
 800bd6e:	ee18 0a10 	vmov	r0, s16
 800bd72:	4621      	mov	r1, r4
 800bd74:	f000 fa5c 	bl	800c230 <_Bfree>
 800bd78:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	6013      	str	r3, [r2, #0]
 800bd7e:	27a3      	movs	r7, #163	; 0xa3
 800bd80:	e785      	b.n	800bc8e <__gethex+0x12a>
 800bd82:	1e73      	subs	r3, r6, #1
 800bd84:	9a05      	ldr	r2, [sp, #20]
 800bd86:	9303      	str	r3, [sp, #12]
 800bd88:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bd8c:	4293      	cmp	r3, r2
 800bd8e:	d019      	beq.n	800bdc4 <__gethex+0x260>
 800bd90:	f1bb 0f20 	cmp.w	fp, #32
 800bd94:	d107      	bne.n	800bda6 <__gethex+0x242>
 800bd96:	9b02      	ldr	r3, [sp, #8]
 800bd98:	9a00      	ldr	r2, [sp, #0]
 800bd9a:	f843 2b04 	str.w	r2, [r3], #4
 800bd9e:	9302      	str	r3, [sp, #8]
 800bda0:	2300      	movs	r3, #0
 800bda2:	9300      	str	r3, [sp, #0]
 800bda4:	469b      	mov	fp, r3
 800bda6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800bdaa:	f7ff fec5 	bl	800bb38 <__hexdig_fun>
 800bdae:	9b00      	ldr	r3, [sp, #0]
 800bdb0:	f000 000f 	and.w	r0, r0, #15
 800bdb4:	fa00 f00b 	lsl.w	r0, r0, fp
 800bdb8:	4303      	orrs	r3, r0
 800bdba:	9300      	str	r3, [sp, #0]
 800bdbc:	f10b 0b04 	add.w	fp, fp, #4
 800bdc0:	9b03      	ldr	r3, [sp, #12]
 800bdc2:	e00d      	b.n	800bde0 <__gethex+0x27c>
 800bdc4:	9b03      	ldr	r3, [sp, #12]
 800bdc6:	9a06      	ldr	r2, [sp, #24]
 800bdc8:	4413      	add	r3, r2
 800bdca:	42bb      	cmp	r3, r7
 800bdcc:	d3e0      	bcc.n	800bd90 <__gethex+0x22c>
 800bdce:	4618      	mov	r0, r3
 800bdd0:	9901      	ldr	r1, [sp, #4]
 800bdd2:	9307      	str	r3, [sp, #28]
 800bdd4:	4652      	mov	r2, sl
 800bdd6:	f001 f917 	bl	800d008 <strncmp>
 800bdda:	9b07      	ldr	r3, [sp, #28]
 800bddc:	2800      	cmp	r0, #0
 800bdde:	d1d7      	bne.n	800bd90 <__gethex+0x22c>
 800bde0:	461e      	mov	r6, r3
 800bde2:	e78b      	b.n	800bcfc <__gethex+0x198>
 800bde4:	f04f 0a03 	mov.w	sl, #3
 800bde8:	e7b8      	b.n	800bd5c <__gethex+0x1f8>
 800bdea:	da0a      	bge.n	800be02 <__gethex+0x29e>
 800bdec:	1a37      	subs	r7, r6, r0
 800bdee:	4621      	mov	r1, r4
 800bdf0:	ee18 0a10 	vmov	r0, s16
 800bdf4:	463a      	mov	r2, r7
 800bdf6:	f000 fc37 	bl	800c668 <__lshift>
 800bdfa:	1bed      	subs	r5, r5, r7
 800bdfc:	4604      	mov	r4, r0
 800bdfe:	f100 0914 	add.w	r9, r0, #20
 800be02:	f04f 0a00 	mov.w	sl, #0
 800be06:	e7ae      	b.n	800bd66 <__gethex+0x202>
 800be08:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800be0c:	42a8      	cmp	r0, r5
 800be0e:	dd72      	ble.n	800bef6 <__gethex+0x392>
 800be10:	1b45      	subs	r5, r0, r5
 800be12:	42ae      	cmp	r6, r5
 800be14:	dc36      	bgt.n	800be84 <__gethex+0x320>
 800be16:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800be1a:	2b02      	cmp	r3, #2
 800be1c:	d02a      	beq.n	800be74 <__gethex+0x310>
 800be1e:	2b03      	cmp	r3, #3
 800be20:	d02c      	beq.n	800be7c <__gethex+0x318>
 800be22:	2b01      	cmp	r3, #1
 800be24:	d11c      	bne.n	800be60 <__gethex+0x2fc>
 800be26:	42ae      	cmp	r6, r5
 800be28:	d11a      	bne.n	800be60 <__gethex+0x2fc>
 800be2a:	2e01      	cmp	r6, #1
 800be2c:	d112      	bne.n	800be54 <__gethex+0x2f0>
 800be2e:	9a04      	ldr	r2, [sp, #16]
 800be30:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800be34:	6013      	str	r3, [r2, #0]
 800be36:	2301      	movs	r3, #1
 800be38:	6123      	str	r3, [r4, #16]
 800be3a:	f8c9 3000 	str.w	r3, [r9]
 800be3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800be40:	2762      	movs	r7, #98	; 0x62
 800be42:	601c      	str	r4, [r3, #0]
 800be44:	e723      	b.n	800bc8e <__gethex+0x12a>
 800be46:	bf00      	nop
 800be48:	0800ee48 	.word	0x0800ee48
 800be4c:	0800edd0 	.word	0x0800edd0
 800be50:	0800ede1 	.word	0x0800ede1
 800be54:	1e71      	subs	r1, r6, #1
 800be56:	4620      	mov	r0, r4
 800be58:	f000 fe4a 	bl	800caf0 <__any_on>
 800be5c:	2800      	cmp	r0, #0
 800be5e:	d1e6      	bne.n	800be2e <__gethex+0x2ca>
 800be60:	ee18 0a10 	vmov	r0, s16
 800be64:	4621      	mov	r1, r4
 800be66:	f000 f9e3 	bl	800c230 <_Bfree>
 800be6a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800be6c:	2300      	movs	r3, #0
 800be6e:	6013      	str	r3, [r2, #0]
 800be70:	2750      	movs	r7, #80	; 0x50
 800be72:	e70c      	b.n	800bc8e <__gethex+0x12a>
 800be74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800be76:	2b00      	cmp	r3, #0
 800be78:	d1f2      	bne.n	800be60 <__gethex+0x2fc>
 800be7a:	e7d8      	b.n	800be2e <__gethex+0x2ca>
 800be7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d1d5      	bne.n	800be2e <__gethex+0x2ca>
 800be82:	e7ed      	b.n	800be60 <__gethex+0x2fc>
 800be84:	1e6f      	subs	r7, r5, #1
 800be86:	f1ba 0f00 	cmp.w	sl, #0
 800be8a:	d131      	bne.n	800bef0 <__gethex+0x38c>
 800be8c:	b127      	cbz	r7, 800be98 <__gethex+0x334>
 800be8e:	4639      	mov	r1, r7
 800be90:	4620      	mov	r0, r4
 800be92:	f000 fe2d 	bl	800caf0 <__any_on>
 800be96:	4682      	mov	sl, r0
 800be98:	117b      	asrs	r3, r7, #5
 800be9a:	2101      	movs	r1, #1
 800be9c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800bea0:	f007 071f 	and.w	r7, r7, #31
 800bea4:	fa01 f707 	lsl.w	r7, r1, r7
 800bea8:	421f      	tst	r7, r3
 800beaa:	4629      	mov	r1, r5
 800beac:	4620      	mov	r0, r4
 800beae:	bf18      	it	ne
 800beb0:	f04a 0a02 	orrne.w	sl, sl, #2
 800beb4:	1b76      	subs	r6, r6, r5
 800beb6:	f7ff fded 	bl	800ba94 <rshift>
 800beba:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bebe:	2702      	movs	r7, #2
 800bec0:	f1ba 0f00 	cmp.w	sl, #0
 800bec4:	d048      	beq.n	800bf58 <__gethex+0x3f4>
 800bec6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800beca:	2b02      	cmp	r3, #2
 800becc:	d015      	beq.n	800befa <__gethex+0x396>
 800bece:	2b03      	cmp	r3, #3
 800bed0:	d017      	beq.n	800bf02 <__gethex+0x39e>
 800bed2:	2b01      	cmp	r3, #1
 800bed4:	d109      	bne.n	800beea <__gethex+0x386>
 800bed6:	f01a 0f02 	tst.w	sl, #2
 800beda:	d006      	beq.n	800beea <__gethex+0x386>
 800bedc:	f8d9 0000 	ldr.w	r0, [r9]
 800bee0:	ea4a 0a00 	orr.w	sl, sl, r0
 800bee4:	f01a 0f01 	tst.w	sl, #1
 800bee8:	d10e      	bne.n	800bf08 <__gethex+0x3a4>
 800beea:	f047 0710 	orr.w	r7, r7, #16
 800beee:	e033      	b.n	800bf58 <__gethex+0x3f4>
 800bef0:	f04f 0a01 	mov.w	sl, #1
 800bef4:	e7d0      	b.n	800be98 <__gethex+0x334>
 800bef6:	2701      	movs	r7, #1
 800bef8:	e7e2      	b.n	800bec0 <__gethex+0x35c>
 800befa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800befc:	f1c3 0301 	rsb	r3, r3, #1
 800bf00:	9315      	str	r3, [sp, #84]	; 0x54
 800bf02:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d0f0      	beq.n	800beea <__gethex+0x386>
 800bf08:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bf0c:	f104 0314 	add.w	r3, r4, #20
 800bf10:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bf14:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bf18:	f04f 0c00 	mov.w	ip, #0
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf22:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800bf26:	d01c      	beq.n	800bf62 <__gethex+0x3fe>
 800bf28:	3201      	adds	r2, #1
 800bf2a:	6002      	str	r2, [r0, #0]
 800bf2c:	2f02      	cmp	r7, #2
 800bf2e:	f104 0314 	add.w	r3, r4, #20
 800bf32:	d13f      	bne.n	800bfb4 <__gethex+0x450>
 800bf34:	f8d8 2000 	ldr.w	r2, [r8]
 800bf38:	3a01      	subs	r2, #1
 800bf3a:	42b2      	cmp	r2, r6
 800bf3c:	d10a      	bne.n	800bf54 <__gethex+0x3f0>
 800bf3e:	1171      	asrs	r1, r6, #5
 800bf40:	2201      	movs	r2, #1
 800bf42:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bf46:	f006 061f 	and.w	r6, r6, #31
 800bf4a:	fa02 f606 	lsl.w	r6, r2, r6
 800bf4e:	421e      	tst	r6, r3
 800bf50:	bf18      	it	ne
 800bf52:	4617      	movne	r7, r2
 800bf54:	f047 0720 	orr.w	r7, r7, #32
 800bf58:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bf5a:	601c      	str	r4, [r3, #0]
 800bf5c:	9b04      	ldr	r3, [sp, #16]
 800bf5e:	601d      	str	r5, [r3, #0]
 800bf60:	e695      	b.n	800bc8e <__gethex+0x12a>
 800bf62:	4299      	cmp	r1, r3
 800bf64:	f843 cc04 	str.w	ip, [r3, #-4]
 800bf68:	d8d8      	bhi.n	800bf1c <__gethex+0x3b8>
 800bf6a:	68a3      	ldr	r3, [r4, #8]
 800bf6c:	459b      	cmp	fp, r3
 800bf6e:	db19      	blt.n	800bfa4 <__gethex+0x440>
 800bf70:	6861      	ldr	r1, [r4, #4]
 800bf72:	ee18 0a10 	vmov	r0, s16
 800bf76:	3101      	adds	r1, #1
 800bf78:	f000 f91a 	bl	800c1b0 <_Balloc>
 800bf7c:	4681      	mov	r9, r0
 800bf7e:	b918      	cbnz	r0, 800bf88 <__gethex+0x424>
 800bf80:	4b1a      	ldr	r3, [pc, #104]	; (800bfec <__gethex+0x488>)
 800bf82:	4602      	mov	r2, r0
 800bf84:	2184      	movs	r1, #132	; 0x84
 800bf86:	e6a8      	b.n	800bcda <__gethex+0x176>
 800bf88:	6922      	ldr	r2, [r4, #16]
 800bf8a:	3202      	adds	r2, #2
 800bf8c:	f104 010c 	add.w	r1, r4, #12
 800bf90:	0092      	lsls	r2, r2, #2
 800bf92:	300c      	adds	r0, #12
 800bf94:	f7fd f992 	bl	80092bc <memcpy>
 800bf98:	4621      	mov	r1, r4
 800bf9a:	ee18 0a10 	vmov	r0, s16
 800bf9e:	f000 f947 	bl	800c230 <_Bfree>
 800bfa2:	464c      	mov	r4, r9
 800bfa4:	6923      	ldr	r3, [r4, #16]
 800bfa6:	1c5a      	adds	r2, r3, #1
 800bfa8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bfac:	6122      	str	r2, [r4, #16]
 800bfae:	2201      	movs	r2, #1
 800bfb0:	615a      	str	r2, [r3, #20]
 800bfb2:	e7bb      	b.n	800bf2c <__gethex+0x3c8>
 800bfb4:	6922      	ldr	r2, [r4, #16]
 800bfb6:	455a      	cmp	r2, fp
 800bfb8:	dd0b      	ble.n	800bfd2 <__gethex+0x46e>
 800bfba:	2101      	movs	r1, #1
 800bfbc:	4620      	mov	r0, r4
 800bfbe:	f7ff fd69 	bl	800ba94 <rshift>
 800bfc2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bfc6:	3501      	adds	r5, #1
 800bfc8:	42ab      	cmp	r3, r5
 800bfca:	f6ff aed0 	blt.w	800bd6e <__gethex+0x20a>
 800bfce:	2701      	movs	r7, #1
 800bfd0:	e7c0      	b.n	800bf54 <__gethex+0x3f0>
 800bfd2:	f016 061f 	ands.w	r6, r6, #31
 800bfd6:	d0fa      	beq.n	800bfce <__gethex+0x46a>
 800bfd8:	4453      	add	r3, sl
 800bfda:	f1c6 0620 	rsb	r6, r6, #32
 800bfde:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bfe2:	f000 f9d7 	bl	800c394 <__hi0bits>
 800bfe6:	42b0      	cmp	r0, r6
 800bfe8:	dbe7      	blt.n	800bfba <__gethex+0x456>
 800bfea:	e7f0      	b.n	800bfce <__gethex+0x46a>
 800bfec:	0800edd0 	.word	0x0800edd0

0800bff0 <L_shift>:
 800bff0:	f1c2 0208 	rsb	r2, r2, #8
 800bff4:	0092      	lsls	r2, r2, #2
 800bff6:	b570      	push	{r4, r5, r6, lr}
 800bff8:	f1c2 0620 	rsb	r6, r2, #32
 800bffc:	6843      	ldr	r3, [r0, #4]
 800bffe:	6804      	ldr	r4, [r0, #0]
 800c000:	fa03 f506 	lsl.w	r5, r3, r6
 800c004:	432c      	orrs	r4, r5
 800c006:	40d3      	lsrs	r3, r2
 800c008:	6004      	str	r4, [r0, #0]
 800c00a:	f840 3f04 	str.w	r3, [r0, #4]!
 800c00e:	4288      	cmp	r0, r1
 800c010:	d3f4      	bcc.n	800bffc <L_shift+0xc>
 800c012:	bd70      	pop	{r4, r5, r6, pc}

0800c014 <__match>:
 800c014:	b530      	push	{r4, r5, lr}
 800c016:	6803      	ldr	r3, [r0, #0]
 800c018:	3301      	adds	r3, #1
 800c01a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c01e:	b914      	cbnz	r4, 800c026 <__match+0x12>
 800c020:	6003      	str	r3, [r0, #0]
 800c022:	2001      	movs	r0, #1
 800c024:	bd30      	pop	{r4, r5, pc}
 800c026:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c02a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c02e:	2d19      	cmp	r5, #25
 800c030:	bf98      	it	ls
 800c032:	3220      	addls	r2, #32
 800c034:	42a2      	cmp	r2, r4
 800c036:	d0f0      	beq.n	800c01a <__match+0x6>
 800c038:	2000      	movs	r0, #0
 800c03a:	e7f3      	b.n	800c024 <__match+0x10>

0800c03c <__hexnan>:
 800c03c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c040:	680b      	ldr	r3, [r1, #0]
 800c042:	115e      	asrs	r6, r3, #5
 800c044:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c048:	f013 031f 	ands.w	r3, r3, #31
 800c04c:	b087      	sub	sp, #28
 800c04e:	bf18      	it	ne
 800c050:	3604      	addne	r6, #4
 800c052:	2500      	movs	r5, #0
 800c054:	1f37      	subs	r7, r6, #4
 800c056:	4690      	mov	r8, r2
 800c058:	6802      	ldr	r2, [r0, #0]
 800c05a:	9301      	str	r3, [sp, #4]
 800c05c:	4682      	mov	sl, r0
 800c05e:	f846 5c04 	str.w	r5, [r6, #-4]
 800c062:	46b9      	mov	r9, r7
 800c064:	463c      	mov	r4, r7
 800c066:	9502      	str	r5, [sp, #8]
 800c068:	46ab      	mov	fp, r5
 800c06a:	7851      	ldrb	r1, [r2, #1]
 800c06c:	1c53      	adds	r3, r2, #1
 800c06e:	9303      	str	r3, [sp, #12]
 800c070:	b341      	cbz	r1, 800c0c4 <__hexnan+0x88>
 800c072:	4608      	mov	r0, r1
 800c074:	9205      	str	r2, [sp, #20]
 800c076:	9104      	str	r1, [sp, #16]
 800c078:	f7ff fd5e 	bl	800bb38 <__hexdig_fun>
 800c07c:	2800      	cmp	r0, #0
 800c07e:	d14f      	bne.n	800c120 <__hexnan+0xe4>
 800c080:	9904      	ldr	r1, [sp, #16]
 800c082:	9a05      	ldr	r2, [sp, #20]
 800c084:	2920      	cmp	r1, #32
 800c086:	d818      	bhi.n	800c0ba <__hexnan+0x7e>
 800c088:	9b02      	ldr	r3, [sp, #8]
 800c08a:	459b      	cmp	fp, r3
 800c08c:	dd13      	ble.n	800c0b6 <__hexnan+0x7a>
 800c08e:	454c      	cmp	r4, r9
 800c090:	d206      	bcs.n	800c0a0 <__hexnan+0x64>
 800c092:	2d07      	cmp	r5, #7
 800c094:	dc04      	bgt.n	800c0a0 <__hexnan+0x64>
 800c096:	462a      	mov	r2, r5
 800c098:	4649      	mov	r1, r9
 800c09a:	4620      	mov	r0, r4
 800c09c:	f7ff ffa8 	bl	800bff0 <L_shift>
 800c0a0:	4544      	cmp	r4, r8
 800c0a2:	d950      	bls.n	800c146 <__hexnan+0x10a>
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	f1a4 0904 	sub.w	r9, r4, #4
 800c0aa:	f844 3c04 	str.w	r3, [r4, #-4]
 800c0ae:	f8cd b008 	str.w	fp, [sp, #8]
 800c0b2:	464c      	mov	r4, r9
 800c0b4:	461d      	mov	r5, r3
 800c0b6:	9a03      	ldr	r2, [sp, #12]
 800c0b8:	e7d7      	b.n	800c06a <__hexnan+0x2e>
 800c0ba:	2929      	cmp	r1, #41	; 0x29
 800c0bc:	d156      	bne.n	800c16c <__hexnan+0x130>
 800c0be:	3202      	adds	r2, #2
 800c0c0:	f8ca 2000 	str.w	r2, [sl]
 800c0c4:	f1bb 0f00 	cmp.w	fp, #0
 800c0c8:	d050      	beq.n	800c16c <__hexnan+0x130>
 800c0ca:	454c      	cmp	r4, r9
 800c0cc:	d206      	bcs.n	800c0dc <__hexnan+0xa0>
 800c0ce:	2d07      	cmp	r5, #7
 800c0d0:	dc04      	bgt.n	800c0dc <__hexnan+0xa0>
 800c0d2:	462a      	mov	r2, r5
 800c0d4:	4649      	mov	r1, r9
 800c0d6:	4620      	mov	r0, r4
 800c0d8:	f7ff ff8a 	bl	800bff0 <L_shift>
 800c0dc:	4544      	cmp	r4, r8
 800c0de:	d934      	bls.n	800c14a <__hexnan+0x10e>
 800c0e0:	f1a8 0204 	sub.w	r2, r8, #4
 800c0e4:	4623      	mov	r3, r4
 800c0e6:	f853 1b04 	ldr.w	r1, [r3], #4
 800c0ea:	f842 1f04 	str.w	r1, [r2, #4]!
 800c0ee:	429f      	cmp	r7, r3
 800c0f0:	d2f9      	bcs.n	800c0e6 <__hexnan+0xaa>
 800c0f2:	1b3b      	subs	r3, r7, r4
 800c0f4:	f023 0303 	bic.w	r3, r3, #3
 800c0f8:	3304      	adds	r3, #4
 800c0fa:	3401      	adds	r4, #1
 800c0fc:	3e03      	subs	r6, #3
 800c0fe:	42b4      	cmp	r4, r6
 800c100:	bf88      	it	hi
 800c102:	2304      	movhi	r3, #4
 800c104:	4443      	add	r3, r8
 800c106:	2200      	movs	r2, #0
 800c108:	f843 2b04 	str.w	r2, [r3], #4
 800c10c:	429f      	cmp	r7, r3
 800c10e:	d2fb      	bcs.n	800c108 <__hexnan+0xcc>
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	b91b      	cbnz	r3, 800c11c <__hexnan+0xe0>
 800c114:	4547      	cmp	r7, r8
 800c116:	d127      	bne.n	800c168 <__hexnan+0x12c>
 800c118:	2301      	movs	r3, #1
 800c11a:	603b      	str	r3, [r7, #0]
 800c11c:	2005      	movs	r0, #5
 800c11e:	e026      	b.n	800c16e <__hexnan+0x132>
 800c120:	3501      	adds	r5, #1
 800c122:	2d08      	cmp	r5, #8
 800c124:	f10b 0b01 	add.w	fp, fp, #1
 800c128:	dd06      	ble.n	800c138 <__hexnan+0xfc>
 800c12a:	4544      	cmp	r4, r8
 800c12c:	d9c3      	bls.n	800c0b6 <__hexnan+0x7a>
 800c12e:	2300      	movs	r3, #0
 800c130:	f844 3c04 	str.w	r3, [r4, #-4]
 800c134:	2501      	movs	r5, #1
 800c136:	3c04      	subs	r4, #4
 800c138:	6822      	ldr	r2, [r4, #0]
 800c13a:	f000 000f 	and.w	r0, r0, #15
 800c13e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c142:	6022      	str	r2, [r4, #0]
 800c144:	e7b7      	b.n	800c0b6 <__hexnan+0x7a>
 800c146:	2508      	movs	r5, #8
 800c148:	e7b5      	b.n	800c0b6 <__hexnan+0x7a>
 800c14a:	9b01      	ldr	r3, [sp, #4]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d0df      	beq.n	800c110 <__hexnan+0xd4>
 800c150:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c154:	f1c3 0320 	rsb	r3, r3, #32
 800c158:	fa22 f303 	lsr.w	r3, r2, r3
 800c15c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c160:	401a      	ands	r2, r3
 800c162:	f846 2c04 	str.w	r2, [r6, #-4]
 800c166:	e7d3      	b.n	800c110 <__hexnan+0xd4>
 800c168:	3f04      	subs	r7, #4
 800c16a:	e7d1      	b.n	800c110 <__hexnan+0xd4>
 800c16c:	2004      	movs	r0, #4
 800c16e:	b007      	add	sp, #28
 800c170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c174 <_localeconv_r>:
 800c174:	4800      	ldr	r0, [pc, #0]	; (800c178 <_localeconv_r+0x4>)
 800c176:	4770      	bx	lr
 800c178:	20000174 	.word	0x20000174

0800c17c <malloc>:
 800c17c:	4b02      	ldr	r3, [pc, #8]	; (800c188 <malloc+0xc>)
 800c17e:	4601      	mov	r1, r0
 800c180:	6818      	ldr	r0, [r3, #0]
 800c182:	f000 bd59 	b.w	800cc38 <_malloc_r>
 800c186:	bf00      	nop
 800c188:	2000001c 	.word	0x2000001c

0800c18c <__ascii_mbtowc>:
 800c18c:	b082      	sub	sp, #8
 800c18e:	b901      	cbnz	r1, 800c192 <__ascii_mbtowc+0x6>
 800c190:	a901      	add	r1, sp, #4
 800c192:	b142      	cbz	r2, 800c1a6 <__ascii_mbtowc+0x1a>
 800c194:	b14b      	cbz	r3, 800c1aa <__ascii_mbtowc+0x1e>
 800c196:	7813      	ldrb	r3, [r2, #0]
 800c198:	600b      	str	r3, [r1, #0]
 800c19a:	7812      	ldrb	r2, [r2, #0]
 800c19c:	1e10      	subs	r0, r2, #0
 800c19e:	bf18      	it	ne
 800c1a0:	2001      	movne	r0, #1
 800c1a2:	b002      	add	sp, #8
 800c1a4:	4770      	bx	lr
 800c1a6:	4610      	mov	r0, r2
 800c1a8:	e7fb      	b.n	800c1a2 <__ascii_mbtowc+0x16>
 800c1aa:	f06f 0001 	mvn.w	r0, #1
 800c1ae:	e7f8      	b.n	800c1a2 <__ascii_mbtowc+0x16>

0800c1b0 <_Balloc>:
 800c1b0:	b570      	push	{r4, r5, r6, lr}
 800c1b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c1b4:	4604      	mov	r4, r0
 800c1b6:	460d      	mov	r5, r1
 800c1b8:	b976      	cbnz	r6, 800c1d8 <_Balloc+0x28>
 800c1ba:	2010      	movs	r0, #16
 800c1bc:	f7ff ffde 	bl	800c17c <malloc>
 800c1c0:	4602      	mov	r2, r0
 800c1c2:	6260      	str	r0, [r4, #36]	; 0x24
 800c1c4:	b920      	cbnz	r0, 800c1d0 <_Balloc+0x20>
 800c1c6:	4b18      	ldr	r3, [pc, #96]	; (800c228 <_Balloc+0x78>)
 800c1c8:	4818      	ldr	r0, [pc, #96]	; (800c22c <_Balloc+0x7c>)
 800c1ca:	2166      	movs	r1, #102	; 0x66
 800c1cc:	f000 ff3e 	bl	800d04c <__assert_func>
 800c1d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c1d4:	6006      	str	r6, [r0, #0]
 800c1d6:	60c6      	str	r6, [r0, #12]
 800c1d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c1da:	68f3      	ldr	r3, [r6, #12]
 800c1dc:	b183      	cbz	r3, 800c200 <_Balloc+0x50>
 800c1de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c1e0:	68db      	ldr	r3, [r3, #12]
 800c1e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c1e6:	b9b8      	cbnz	r0, 800c218 <_Balloc+0x68>
 800c1e8:	2101      	movs	r1, #1
 800c1ea:	fa01 f605 	lsl.w	r6, r1, r5
 800c1ee:	1d72      	adds	r2, r6, #5
 800c1f0:	0092      	lsls	r2, r2, #2
 800c1f2:	4620      	mov	r0, r4
 800c1f4:	f000 fc9d 	bl	800cb32 <_calloc_r>
 800c1f8:	b160      	cbz	r0, 800c214 <_Balloc+0x64>
 800c1fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c1fe:	e00e      	b.n	800c21e <_Balloc+0x6e>
 800c200:	2221      	movs	r2, #33	; 0x21
 800c202:	2104      	movs	r1, #4
 800c204:	4620      	mov	r0, r4
 800c206:	f000 fc94 	bl	800cb32 <_calloc_r>
 800c20a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c20c:	60f0      	str	r0, [r6, #12]
 800c20e:	68db      	ldr	r3, [r3, #12]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d1e4      	bne.n	800c1de <_Balloc+0x2e>
 800c214:	2000      	movs	r0, #0
 800c216:	bd70      	pop	{r4, r5, r6, pc}
 800c218:	6802      	ldr	r2, [r0, #0]
 800c21a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c21e:	2300      	movs	r3, #0
 800c220:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c224:	e7f7      	b.n	800c216 <_Balloc+0x66>
 800c226:	bf00      	nop
 800c228:	0800ed5e 	.word	0x0800ed5e
 800c22c:	0800ee5c 	.word	0x0800ee5c

0800c230 <_Bfree>:
 800c230:	b570      	push	{r4, r5, r6, lr}
 800c232:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c234:	4605      	mov	r5, r0
 800c236:	460c      	mov	r4, r1
 800c238:	b976      	cbnz	r6, 800c258 <_Bfree+0x28>
 800c23a:	2010      	movs	r0, #16
 800c23c:	f7ff ff9e 	bl	800c17c <malloc>
 800c240:	4602      	mov	r2, r0
 800c242:	6268      	str	r0, [r5, #36]	; 0x24
 800c244:	b920      	cbnz	r0, 800c250 <_Bfree+0x20>
 800c246:	4b09      	ldr	r3, [pc, #36]	; (800c26c <_Bfree+0x3c>)
 800c248:	4809      	ldr	r0, [pc, #36]	; (800c270 <_Bfree+0x40>)
 800c24a:	218a      	movs	r1, #138	; 0x8a
 800c24c:	f000 fefe 	bl	800d04c <__assert_func>
 800c250:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c254:	6006      	str	r6, [r0, #0]
 800c256:	60c6      	str	r6, [r0, #12]
 800c258:	b13c      	cbz	r4, 800c26a <_Bfree+0x3a>
 800c25a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c25c:	6862      	ldr	r2, [r4, #4]
 800c25e:	68db      	ldr	r3, [r3, #12]
 800c260:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c264:	6021      	str	r1, [r4, #0]
 800c266:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c26a:	bd70      	pop	{r4, r5, r6, pc}
 800c26c:	0800ed5e 	.word	0x0800ed5e
 800c270:	0800ee5c 	.word	0x0800ee5c

0800c274 <__multadd>:
 800c274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c278:	690d      	ldr	r5, [r1, #16]
 800c27a:	4607      	mov	r7, r0
 800c27c:	460c      	mov	r4, r1
 800c27e:	461e      	mov	r6, r3
 800c280:	f101 0c14 	add.w	ip, r1, #20
 800c284:	2000      	movs	r0, #0
 800c286:	f8dc 3000 	ldr.w	r3, [ip]
 800c28a:	b299      	uxth	r1, r3
 800c28c:	fb02 6101 	mla	r1, r2, r1, r6
 800c290:	0c1e      	lsrs	r6, r3, #16
 800c292:	0c0b      	lsrs	r3, r1, #16
 800c294:	fb02 3306 	mla	r3, r2, r6, r3
 800c298:	b289      	uxth	r1, r1
 800c29a:	3001      	adds	r0, #1
 800c29c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c2a0:	4285      	cmp	r5, r0
 800c2a2:	f84c 1b04 	str.w	r1, [ip], #4
 800c2a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c2aa:	dcec      	bgt.n	800c286 <__multadd+0x12>
 800c2ac:	b30e      	cbz	r6, 800c2f2 <__multadd+0x7e>
 800c2ae:	68a3      	ldr	r3, [r4, #8]
 800c2b0:	42ab      	cmp	r3, r5
 800c2b2:	dc19      	bgt.n	800c2e8 <__multadd+0x74>
 800c2b4:	6861      	ldr	r1, [r4, #4]
 800c2b6:	4638      	mov	r0, r7
 800c2b8:	3101      	adds	r1, #1
 800c2ba:	f7ff ff79 	bl	800c1b0 <_Balloc>
 800c2be:	4680      	mov	r8, r0
 800c2c0:	b928      	cbnz	r0, 800c2ce <__multadd+0x5a>
 800c2c2:	4602      	mov	r2, r0
 800c2c4:	4b0c      	ldr	r3, [pc, #48]	; (800c2f8 <__multadd+0x84>)
 800c2c6:	480d      	ldr	r0, [pc, #52]	; (800c2fc <__multadd+0x88>)
 800c2c8:	21b5      	movs	r1, #181	; 0xb5
 800c2ca:	f000 febf 	bl	800d04c <__assert_func>
 800c2ce:	6922      	ldr	r2, [r4, #16]
 800c2d0:	3202      	adds	r2, #2
 800c2d2:	f104 010c 	add.w	r1, r4, #12
 800c2d6:	0092      	lsls	r2, r2, #2
 800c2d8:	300c      	adds	r0, #12
 800c2da:	f7fc ffef 	bl	80092bc <memcpy>
 800c2de:	4621      	mov	r1, r4
 800c2e0:	4638      	mov	r0, r7
 800c2e2:	f7ff ffa5 	bl	800c230 <_Bfree>
 800c2e6:	4644      	mov	r4, r8
 800c2e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c2ec:	3501      	adds	r5, #1
 800c2ee:	615e      	str	r6, [r3, #20]
 800c2f0:	6125      	str	r5, [r4, #16]
 800c2f2:	4620      	mov	r0, r4
 800c2f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2f8:	0800edd0 	.word	0x0800edd0
 800c2fc:	0800ee5c 	.word	0x0800ee5c

0800c300 <__s2b>:
 800c300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c304:	460c      	mov	r4, r1
 800c306:	4615      	mov	r5, r2
 800c308:	461f      	mov	r7, r3
 800c30a:	2209      	movs	r2, #9
 800c30c:	3308      	adds	r3, #8
 800c30e:	4606      	mov	r6, r0
 800c310:	fb93 f3f2 	sdiv	r3, r3, r2
 800c314:	2100      	movs	r1, #0
 800c316:	2201      	movs	r2, #1
 800c318:	429a      	cmp	r2, r3
 800c31a:	db09      	blt.n	800c330 <__s2b+0x30>
 800c31c:	4630      	mov	r0, r6
 800c31e:	f7ff ff47 	bl	800c1b0 <_Balloc>
 800c322:	b940      	cbnz	r0, 800c336 <__s2b+0x36>
 800c324:	4602      	mov	r2, r0
 800c326:	4b19      	ldr	r3, [pc, #100]	; (800c38c <__s2b+0x8c>)
 800c328:	4819      	ldr	r0, [pc, #100]	; (800c390 <__s2b+0x90>)
 800c32a:	21ce      	movs	r1, #206	; 0xce
 800c32c:	f000 fe8e 	bl	800d04c <__assert_func>
 800c330:	0052      	lsls	r2, r2, #1
 800c332:	3101      	adds	r1, #1
 800c334:	e7f0      	b.n	800c318 <__s2b+0x18>
 800c336:	9b08      	ldr	r3, [sp, #32]
 800c338:	6143      	str	r3, [r0, #20]
 800c33a:	2d09      	cmp	r5, #9
 800c33c:	f04f 0301 	mov.w	r3, #1
 800c340:	6103      	str	r3, [r0, #16]
 800c342:	dd16      	ble.n	800c372 <__s2b+0x72>
 800c344:	f104 0909 	add.w	r9, r4, #9
 800c348:	46c8      	mov	r8, r9
 800c34a:	442c      	add	r4, r5
 800c34c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c350:	4601      	mov	r1, r0
 800c352:	3b30      	subs	r3, #48	; 0x30
 800c354:	220a      	movs	r2, #10
 800c356:	4630      	mov	r0, r6
 800c358:	f7ff ff8c 	bl	800c274 <__multadd>
 800c35c:	45a0      	cmp	r8, r4
 800c35e:	d1f5      	bne.n	800c34c <__s2b+0x4c>
 800c360:	f1a5 0408 	sub.w	r4, r5, #8
 800c364:	444c      	add	r4, r9
 800c366:	1b2d      	subs	r5, r5, r4
 800c368:	1963      	adds	r3, r4, r5
 800c36a:	42bb      	cmp	r3, r7
 800c36c:	db04      	blt.n	800c378 <__s2b+0x78>
 800c36e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c372:	340a      	adds	r4, #10
 800c374:	2509      	movs	r5, #9
 800c376:	e7f6      	b.n	800c366 <__s2b+0x66>
 800c378:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c37c:	4601      	mov	r1, r0
 800c37e:	3b30      	subs	r3, #48	; 0x30
 800c380:	220a      	movs	r2, #10
 800c382:	4630      	mov	r0, r6
 800c384:	f7ff ff76 	bl	800c274 <__multadd>
 800c388:	e7ee      	b.n	800c368 <__s2b+0x68>
 800c38a:	bf00      	nop
 800c38c:	0800edd0 	.word	0x0800edd0
 800c390:	0800ee5c 	.word	0x0800ee5c

0800c394 <__hi0bits>:
 800c394:	0c03      	lsrs	r3, r0, #16
 800c396:	041b      	lsls	r3, r3, #16
 800c398:	b9d3      	cbnz	r3, 800c3d0 <__hi0bits+0x3c>
 800c39a:	0400      	lsls	r0, r0, #16
 800c39c:	2310      	movs	r3, #16
 800c39e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c3a2:	bf04      	itt	eq
 800c3a4:	0200      	lsleq	r0, r0, #8
 800c3a6:	3308      	addeq	r3, #8
 800c3a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c3ac:	bf04      	itt	eq
 800c3ae:	0100      	lsleq	r0, r0, #4
 800c3b0:	3304      	addeq	r3, #4
 800c3b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c3b6:	bf04      	itt	eq
 800c3b8:	0080      	lsleq	r0, r0, #2
 800c3ba:	3302      	addeq	r3, #2
 800c3bc:	2800      	cmp	r0, #0
 800c3be:	db05      	blt.n	800c3cc <__hi0bits+0x38>
 800c3c0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c3c4:	f103 0301 	add.w	r3, r3, #1
 800c3c8:	bf08      	it	eq
 800c3ca:	2320      	moveq	r3, #32
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	4770      	bx	lr
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	e7e4      	b.n	800c39e <__hi0bits+0xa>

0800c3d4 <__lo0bits>:
 800c3d4:	6803      	ldr	r3, [r0, #0]
 800c3d6:	f013 0207 	ands.w	r2, r3, #7
 800c3da:	4601      	mov	r1, r0
 800c3dc:	d00b      	beq.n	800c3f6 <__lo0bits+0x22>
 800c3de:	07da      	lsls	r2, r3, #31
 800c3e0:	d423      	bmi.n	800c42a <__lo0bits+0x56>
 800c3e2:	0798      	lsls	r0, r3, #30
 800c3e4:	bf49      	itett	mi
 800c3e6:	085b      	lsrmi	r3, r3, #1
 800c3e8:	089b      	lsrpl	r3, r3, #2
 800c3ea:	2001      	movmi	r0, #1
 800c3ec:	600b      	strmi	r3, [r1, #0]
 800c3ee:	bf5c      	itt	pl
 800c3f0:	600b      	strpl	r3, [r1, #0]
 800c3f2:	2002      	movpl	r0, #2
 800c3f4:	4770      	bx	lr
 800c3f6:	b298      	uxth	r0, r3
 800c3f8:	b9a8      	cbnz	r0, 800c426 <__lo0bits+0x52>
 800c3fa:	0c1b      	lsrs	r3, r3, #16
 800c3fc:	2010      	movs	r0, #16
 800c3fe:	b2da      	uxtb	r2, r3
 800c400:	b90a      	cbnz	r2, 800c406 <__lo0bits+0x32>
 800c402:	3008      	adds	r0, #8
 800c404:	0a1b      	lsrs	r3, r3, #8
 800c406:	071a      	lsls	r2, r3, #28
 800c408:	bf04      	itt	eq
 800c40a:	091b      	lsreq	r3, r3, #4
 800c40c:	3004      	addeq	r0, #4
 800c40e:	079a      	lsls	r2, r3, #30
 800c410:	bf04      	itt	eq
 800c412:	089b      	lsreq	r3, r3, #2
 800c414:	3002      	addeq	r0, #2
 800c416:	07da      	lsls	r2, r3, #31
 800c418:	d403      	bmi.n	800c422 <__lo0bits+0x4e>
 800c41a:	085b      	lsrs	r3, r3, #1
 800c41c:	f100 0001 	add.w	r0, r0, #1
 800c420:	d005      	beq.n	800c42e <__lo0bits+0x5a>
 800c422:	600b      	str	r3, [r1, #0]
 800c424:	4770      	bx	lr
 800c426:	4610      	mov	r0, r2
 800c428:	e7e9      	b.n	800c3fe <__lo0bits+0x2a>
 800c42a:	2000      	movs	r0, #0
 800c42c:	4770      	bx	lr
 800c42e:	2020      	movs	r0, #32
 800c430:	4770      	bx	lr
	...

0800c434 <__i2b>:
 800c434:	b510      	push	{r4, lr}
 800c436:	460c      	mov	r4, r1
 800c438:	2101      	movs	r1, #1
 800c43a:	f7ff feb9 	bl	800c1b0 <_Balloc>
 800c43e:	4602      	mov	r2, r0
 800c440:	b928      	cbnz	r0, 800c44e <__i2b+0x1a>
 800c442:	4b05      	ldr	r3, [pc, #20]	; (800c458 <__i2b+0x24>)
 800c444:	4805      	ldr	r0, [pc, #20]	; (800c45c <__i2b+0x28>)
 800c446:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c44a:	f000 fdff 	bl	800d04c <__assert_func>
 800c44e:	2301      	movs	r3, #1
 800c450:	6144      	str	r4, [r0, #20]
 800c452:	6103      	str	r3, [r0, #16]
 800c454:	bd10      	pop	{r4, pc}
 800c456:	bf00      	nop
 800c458:	0800edd0 	.word	0x0800edd0
 800c45c:	0800ee5c 	.word	0x0800ee5c

0800c460 <__multiply>:
 800c460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c464:	4691      	mov	r9, r2
 800c466:	690a      	ldr	r2, [r1, #16]
 800c468:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c46c:	429a      	cmp	r2, r3
 800c46e:	bfb8      	it	lt
 800c470:	460b      	movlt	r3, r1
 800c472:	460c      	mov	r4, r1
 800c474:	bfbc      	itt	lt
 800c476:	464c      	movlt	r4, r9
 800c478:	4699      	movlt	r9, r3
 800c47a:	6927      	ldr	r7, [r4, #16]
 800c47c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c480:	68a3      	ldr	r3, [r4, #8]
 800c482:	6861      	ldr	r1, [r4, #4]
 800c484:	eb07 060a 	add.w	r6, r7, sl
 800c488:	42b3      	cmp	r3, r6
 800c48a:	b085      	sub	sp, #20
 800c48c:	bfb8      	it	lt
 800c48e:	3101      	addlt	r1, #1
 800c490:	f7ff fe8e 	bl	800c1b0 <_Balloc>
 800c494:	b930      	cbnz	r0, 800c4a4 <__multiply+0x44>
 800c496:	4602      	mov	r2, r0
 800c498:	4b44      	ldr	r3, [pc, #272]	; (800c5ac <__multiply+0x14c>)
 800c49a:	4845      	ldr	r0, [pc, #276]	; (800c5b0 <__multiply+0x150>)
 800c49c:	f240 115d 	movw	r1, #349	; 0x15d
 800c4a0:	f000 fdd4 	bl	800d04c <__assert_func>
 800c4a4:	f100 0514 	add.w	r5, r0, #20
 800c4a8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c4ac:	462b      	mov	r3, r5
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	4543      	cmp	r3, r8
 800c4b2:	d321      	bcc.n	800c4f8 <__multiply+0x98>
 800c4b4:	f104 0314 	add.w	r3, r4, #20
 800c4b8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c4bc:	f109 0314 	add.w	r3, r9, #20
 800c4c0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c4c4:	9202      	str	r2, [sp, #8]
 800c4c6:	1b3a      	subs	r2, r7, r4
 800c4c8:	3a15      	subs	r2, #21
 800c4ca:	f022 0203 	bic.w	r2, r2, #3
 800c4ce:	3204      	adds	r2, #4
 800c4d0:	f104 0115 	add.w	r1, r4, #21
 800c4d4:	428f      	cmp	r7, r1
 800c4d6:	bf38      	it	cc
 800c4d8:	2204      	movcc	r2, #4
 800c4da:	9201      	str	r2, [sp, #4]
 800c4dc:	9a02      	ldr	r2, [sp, #8]
 800c4de:	9303      	str	r3, [sp, #12]
 800c4e0:	429a      	cmp	r2, r3
 800c4e2:	d80c      	bhi.n	800c4fe <__multiply+0x9e>
 800c4e4:	2e00      	cmp	r6, #0
 800c4e6:	dd03      	ble.n	800c4f0 <__multiply+0x90>
 800c4e8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d05a      	beq.n	800c5a6 <__multiply+0x146>
 800c4f0:	6106      	str	r6, [r0, #16]
 800c4f2:	b005      	add	sp, #20
 800c4f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4f8:	f843 2b04 	str.w	r2, [r3], #4
 800c4fc:	e7d8      	b.n	800c4b0 <__multiply+0x50>
 800c4fe:	f8b3 a000 	ldrh.w	sl, [r3]
 800c502:	f1ba 0f00 	cmp.w	sl, #0
 800c506:	d024      	beq.n	800c552 <__multiply+0xf2>
 800c508:	f104 0e14 	add.w	lr, r4, #20
 800c50c:	46a9      	mov	r9, r5
 800c50e:	f04f 0c00 	mov.w	ip, #0
 800c512:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c516:	f8d9 1000 	ldr.w	r1, [r9]
 800c51a:	fa1f fb82 	uxth.w	fp, r2
 800c51e:	b289      	uxth	r1, r1
 800c520:	fb0a 110b 	mla	r1, sl, fp, r1
 800c524:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c528:	f8d9 2000 	ldr.w	r2, [r9]
 800c52c:	4461      	add	r1, ip
 800c52e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c532:	fb0a c20b 	mla	r2, sl, fp, ip
 800c536:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c53a:	b289      	uxth	r1, r1
 800c53c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c540:	4577      	cmp	r7, lr
 800c542:	f849 1b04 	str.w	r1, [r9], #4
 800c546:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c54a:	d8e2      	bhi.n	800c512 <__multiply+0xb2>
 800c54c:	9a01      	ldr	r2, [sp, #4]
 800c54e:	f845 c002 	str.w	ip, [r5, r2]
 800c552:	9a03      	ldr	r2, [sp, #12]
 800c554:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c558:	3304      	adds	r3, #4
 800c55a:	f1b9 0f00 	cmp.w	r9, #0
 800c55e:	d020      	beq.n	800c5a2 <__multiply+0x142>
 800c560:	6829      	ldr	r1, [r5, #0]
 800c562:	f104 0c14 	add.w	ip, r4, #20
 800c566:	46ae      	mov	lr, r5
 800c568:	f04f 0a00 	mov.w	sl, #0
 800c56c:	f8bc b000 	ldrh.w	fp, [ip]
 800c570:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c574:	fb09 220b 	mla	r2, r9, fp, r2
 800c578:	4492      	add	sl, r2
 800c57a:	b289      	uxth	r1, r1
 800c57c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c580:	f84e 1b04 	str.w	r1, [lr], #4
 800c584:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c588:	f8be 1000 	ldrh.w	r1, [lr]
 800c58c:	0c12      	lsrs	r2, r2, #16
 800c58e:	fb09 1102 	mla	r1, r9, r2, r1
 800c592:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c596:	4567      	cmp	r7, ip
 800c598:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c59c:	d8e6      	bhi.n	800c56c <__multiply+0x10c>
 800c59e:	9a01      	ldr	r2, [sp, #4]
 800c5a0:	50a9      	str	r1, [r5, r2]
 800c5a2:	3504      	adds	r5, #4
 800c5a4:	e79a      	b.n	800c4dc <__multiply+0x7c>
 800c5a6:	3e01      	subs	r6, #1
 800c5a8:	e79c      	b.n	800c4e4 <__multiply+0x84>
 800c5aa:	bf00      	nop
 800c5ac:	0800edd0 	.word	0x0800edd0
 800c5b0:	0800ee5c 	.word	0x0800ee5c

0800c5b4 <__pow5mult>:
 800c5b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5b8:	4615      	mov	r5, r2
 800c5ba:	f012 0203 	ands.w	r2, r2, #3
 800c5be:	4606      	mov	r6, r0
 800c5c0:	460f      	mov	r7, r1
 800c5c2:	d007      	beq.n	800c5d4 <__pow5mult+0x20>
 800c5c4:	4c25      	ldr	r4, [pc, #148]	; (800c65c <__pow5mult+0xa8>)
 800c5c6:	3a01      	subs	r2, #1
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c5ce:	f7ff fe51 	bl	800c274 <__multadd>
 800c5d2:	4607      	mov	r7, r0
 800c5d4:	10ad      	asrs	r5, r5, #2
 800c5d6:	d03d      	beq.n	800c654 <__pow5mult+0xa0>
 800c5d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c5da:	b97c      	cbnz	r4, 800c5fc <__pow5mult+0x48>
 800c5dc:	2010      	movs	r0, #16
 800c5de:	f7ff fdcd 	bl	800c17c <malloc>
 800c5e2:	4602      	mov	r2, r0
 800c5e4:	6270      	str	r0, [r6, #36]	; 0x24
 800c5e6:	b928      	cbnz	r0, 800c5f4 <__pow5mult+0x40>
 800c5e8:	4b1d      	ldr	r3, [pc, #116]	; (800c660 <__pow5mult+0xac>)
 800c5ea:	481e      	ldr	r0, [pc, #120]	; (800c664 <__pow5mult+0xb0>)
 800c5ec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c5f0:	f000 fd2c 	bl	800d04c <__assert_func>
 800c5f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c5f8:	6004      	str	r4, [r0, #0]
 800c5fa:	60c4      	str	r4, [r0, #12]
 800c5fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c600:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c604:	b94c      	cbnz	r4, 800c61a <__pow5mult+0x66>
 800c606:	f240 2171 	movw	r1, #625	; 0x271
 800c60a:	4630      	mov	r0, r6
 800c60c:	f7ff ff12 	bl	800c434 <__i2b>
 800c610:	2300      	movs	r3, #0
 800c612:	f8c8 0008 	str.w	r0, [r8, #8]
 800c616:	4604      	mov	r4, r0
 800c618:	6003      	str	r3, [r0, #0]
 800c61a:	f04f 0900 	mov.w	r9, #0
 800c61e:	07eb      	lsls	r3, r5, #31
 800c620:	d50a      	bpl.n	800c638 <__pow5mult+0x84>
 800c622:	4639      	mov	r1, r7
 800c624:	4622      	mov	r2, r4
 800c626:	4630      	mov	r0, r6
 800c628:	f7ff ff1a 	bl	800c460 <__multiply>
 800c62c:	4639      	mov	r1, r7
 800c62e:	4680      	mov	r8, r0
 800c630:	4630      	mov	r0, r6
 800c632:	f7ff fdfd 	bl	800c230 <_Bfree>
 800c636:	4647      	mov	r7, r8
 800c638:	106d      	asrs	r5, r5, #1
 800c63a:	d00b      	beq.n	800c654 <__pow5mult+0xa0>
 800c63c:	6820      	ldr	r0, [r4, #0]
 800c63e:	b938      	cbnz	r0, 800c650 <__pow5mult+0x9c>
 800c640:	4622      	mov	r2, r4
 800c642:	4621      	mov	r1, r4
 800c644:	4630      	mov	r0, r6
 800c646:	f7ff ff0b 	bl	800c460 <__multiply>
 800c64a:	6020      	str	r0, [r4, #0]
 800c64c:	f8c0 9000 	str.w	r9, [r0]
 800c650:	4604      	mov	r4, r0
 800c652:	e7e4      	b.n	800c61e <__pow5mult+0x6a>
 800c654:	4638      	mov	r0, r7
 800c656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c65a:	bf00      	nop
 800c65c:	0800efa8 	.word	0x0800efa8
 800c660:	0800ed5e 	.word	0x0800ed5e
 800c664:	0800ee5c 	.word	0x0800ee5c

0800c668 <__lshift>:
 800c668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c66c:	460c      	mov	r4, r1
 800c66e:	6849      	ldr	r1, [r1, #4]
 800c670:	6923      	ldr	r3, [r4, #16]
 800c672:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c676:	68a3      	ldr	r3, [r4, #8]
 800c678:	4607      	mov	r7, r0
 800c67a:	4691      	mov	r9, r2
 800c67c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c680:	f108 0601 	add.w	r6, r8, #1
 800c684:	42b3      	cmp	r3, r6
 800c686:	db0b      	blt.n	800c6a0 <__lshift+0x38>
 800c688:	4638      	mov	r0, r7
 800c68a:	f7ff fd91 	bl	800c1b0 <_Balloc>
 800c68e:	4605      	mov	r5, r0
 800c690:	b948      	cbnz	r0, 800c6a6 <__lshift+0x3e>
 800c692:	4602      	mov	r2, r0
 800c694:	4b2a      	ldr	r3, [pc, #168]	; (800c740 <__lshift+0xd8>)
 800c696:	482b      	ldr	r0, [pc, #172]	; (800c744 <__lshift+0xdc>)
 800c698:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c69c:	f000 fcd6 	bl	800d04c <__assert_func>
 800c6a0:	3101      	adds	r1, #1
 800c6a2:	005b      	lsls	r3, r3, #1
 800c6a4:	e7ee      	b.n	800c684 <__lshift+0x1c>
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	f100 0114 	add.w	r1, r0, #20
 800c6ac:	f100 0210 	add.w	r2, r0, #16
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	4553      	cmp	r3, sl
 800c6b4:	db37      	blt.n	800c726 <__lshift+0xbe>
 800c6b6:	6920      	ldr	r0, [r4, #16]
 800c6b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c6bc:	f104 0314 	add.w	r3, r4, #20
 800c6c0:	f019 091f 	ands.w	r9, r9, #31
 800c6c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c6c8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c6cc:	d02f      	beq.n	800c72e <__lshift+0xc6>
 800c6ce:	f1c9 0e20 	rsb	lr, r9, #32
 800c6d2:	468a      	mov	sl, r1
 800c6d4:	f04f 0c00 	mov.w	ip, #0
 800c6d8:	681a      	ldr	r2, [r3, #0]
 800c6da:	fa02 f209 	lsl.w	r2, r2, r9
 800c6de:	ea42 020c 	orr.w	r2, r2, ip
 800c6e2:	f84a 2b04 	str.w	r2, [sl], #4
 800c6e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6ea:	4298      	cmp	r0, r3
 800c6ec:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c6f0:	d8f2      	bhi.n	800c6d8 <__lshift+0x70>
 800c6f2:	1b03      	subs	r3, r0, r4
 800c6f4:	3b15      	subs	r3, #21
 800c6f6:	f023 0303 	bic.w	r3, r3, #3
 800c6fa:	3304      	adds	r3, #4
 800c6fc:	f104 0215 	add.w	r2, r4, #21
 800c700:	4290      	cmp	r0, r2
 800c702:	bf38      	it	cc
 800c704:	2304      	movcc	r3, #4
 800c706:	f841 c003 	str.w	ip, [r1, r3]
 800c70a:	f1bc 0f00 	cmp.w	ip, #0
 800c70e:	d001      	beq.n	800c714 <__lshift+0xac>
 800c710:	f108 0602 	add.w	r6, r8, #2
 800c714:	3e01      	subs	r6, #1
 800c716:	4638      	mov	r0, r7
 800c718:	612e      	str	r6, [r5, #16]
 800c71a:	4621      	mov	r1, r4
 800c71c:	f7ff fd88 	bl	800c230 <_Bfree>
 800c720:	4628      	mov	r0, r5
 800c722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c726:	f842 0f04 	str.w	r0, [r2, #4]!
 800c72a:	3301      	adds	r3, #1
 800c72c:	e7c1      	b.n	800c6b2 <__lshift+0x4a>
 800c72e:	3904      	subs	r1, #4
 800c730:	f853 2b04 	ldr.w	r2, [r3], #4
 800c734:	f841 2f04 	str.w	r2, [r1, #4]!
 800c738:	4298      	cmp	r0, r3
 800c73a:	d8f9      	bhi.n	800c730 <__lshift+0xc8>
 800c73c:	e7ea      	b.n	800c714 <__lshift+0xac>
 800c73e:	bf00      	nop
 800c740:	0800edd0 	.word	0x0800edd0
 800c744:	0800ee5c 	.word	0x0800ee5c

0800c748 <__mcmp>:
 800c748:	b530      	push	{r4, r5, lr}
 800c74a:	6902      	ldr	r2, [r0, #16]
 800c74c:	690c      	ldr	r4, [r1, #16]
 800c74e:	1b12      	subs	r2, r2, r4
 800c750:	d10e      	bne.n	800c770 <__mcmp+0x28>
 800c752:	f100 0314 	add.w	r3, r0, #20
 800c756:	3114      	adds	r1, #20
 800c758:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c75c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c760:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c764:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c768:	42a5      	cmp	r5, r4
 800c76a:	d003      	beq.n	800c774 <__mcmp+0x2c>
 800c76c:	d305      	bcc.n	800c77a <__mcmp+0x32>
 800c76e:	2201      	movs	r2, #1
 800c770:	4610      	mov	r0, r2
 800c772:	bd30      	pop	{r4, r5, pc}
 800c774:	4283      	cmp	r3, r0
 800c776:	d3f3      	bcc.n	800c760 <__mcmp+0x18>
 800c778:	e7fa      	b.n	800c770 <__mcmp+0x28>
 800c77a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c77e:	e7f7      	b.n	800c770 <__mcmp+0x28>

0800c780 <__mdiff>:
 800c780:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c784:	460c      	mov	r4, r1
 800c786:	4606      	mov	r6, r0
 800c788:	4611      	mov	r1, r2
 800c78a:	4620      	mov	r0, r4
 800c78c:	4690      	mov	r8, r2
 800c78e:	f7ff ffdb 	bl	800c748 <__mcmp>
 800c792:	1e05      	subs	r5, r0, #0
 800c794:	d110      	bne.n	800c7b8 <__mdiff+0x38>
 800c796:	4629      	mov	r1, r5
 800c798:	4630      	mov	r0, r6
 800c79a:	f7ff fd09 	bl	800c1b0 <_Balloc>
 800c79e:	b930      	cbnz	r0, 800c7ae <__mdiff+0x2e>
 800c7a0:	4b3a      	ldr	r3, [pc, #232]	; (800c88c <__mdiff+0x10c>)
 800c7a2:	4602      	mov	r2, r0
 800c7a4:	f240 2132 	movw	r1, #562	; 0x232
 800c7a8:	4839      	ldr	r0, [pc, #228]	; (800c890 <__mdiff+0x110>)
 800c7aa:	f000 fc4f 	bl	800d04c <__assert_func>
 800c7ae:	2301      	movs	r3, #1
 800c7b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c7b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7b8:	bfa4      	itt	ge
 800c7ba:	4643      	movge	r3, r8
 800c7bc:	46a0      	movge	r8, r4
 800c7be:	4630      	mov	r0, r6
 800c7c0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c7c4:	bfa6      	itte	ge
 800c7c6:	461c      	movge	r4, r3
 800c7c8:	2500      	movge	r5, #0
 800c7ca:	2501      	movlt	r5, #1
 800c7cc:	f7ff fcf0 	bl	800c1b0 <_Balloc>
 800c7d0:	b920      	cbnz	r0, 800c7dc <__mdiff+0x5c>
 800c7d2:	4b2e      	ldr	r3, [pc, #184]	; (800c88c <__mdiff+0x10c>)
 800c7d4:	4602      	mov	r2, r0
 800c7d6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c7da:	e7e5      	b.n	800c7a8 <__mdiff+0x28>
 800c7dc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c7e0:	6926      	ldr	r6, [r4, #16]
 800c7e2:	60c5      	str	r5, [r0, #12]
 800c7e4:	f104 0914 	add.w	r9, r4, #20
 800c7e8:	f108 0514 	add.w	r5, r8, #20
 800c7ec:	f100 0e14 	add.w	lr, r0, #20
 800c7f0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c7f4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c7f8:	f108 0210 	add.w	r2, r8, #16
 800c7fc:	46f2      	mov	sl, lr
 800c7fe:	2100      	movs	r1, #0
 800c800:	f859 3b04 	ldr.w	r3, [r9], #4
 800c804:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c808:	fa1f f883 	uxth.w	r8, r3
 800c80c:	fa11 f18b 	uxtah	r1, r1, fp
 800c810:	0c1b      	lsrs	r3, r3, #16
 800c812:	eba1 0808 	sub.w	r8, r1, r8
 800c816:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c81a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c81e:	fa1f f888 	uxth.w	r8, r8
 800c822:	1419      	asrs	r1, r3, #16
 800c824:	454e      	cmp	r6, r9
 800c826:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c82a:	f84a 3b04 	str.w	r3, [sl], #4
 800c82e:	d8e7      	bhi.n	800c800 <__mdiff+0x80>
 800c830:	1b33      	subs	r3, r6, r4
 800c832:	3b15      	subs	r3, #21
 800c834:	f023 0303 	bic.w	r3, r3, #3
 800c838:	3304      	adds	r3, #4
 800c83a:	3415      	adds	r4, #21
 800c83c:	42a6      	cmp	r6, r4
 800c83e:	bf38      	it	cc
 800c840:	2304      	movcc	r3, #4
 800c842:	441d      	add	r5, r3
 800c844:	4473      	add	r3, lr
 800c846:	469e      	mov	lr, r3
 800c848:	462e      	mov	r6, r5
 800c84a:	4566      	cmp	r6, ip
 800c84c:	d30e      	bcc.n	800c86c <__mdiff+0xec>
 800c84e:	f10c 0203 	add.w	r2, ip, #3
 800c852:	1b52      	subs	r2, r2, r5
 800c854:	f022 0203 	bic.w	r2, r2, #3
 800c858:	3d03      	subs	r5, #3
 800c85a:	45ac      	cmp	ip, r5
 800c85c:	bf38      	it	cc
 800c85e:	2200      	movcc	r2, #0
 800c860:	441a      	add	r2, r3
 800c862:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c866:	b17b      	cbz	r3, 800c888 <__mdiff+0x108>
 800c868:	6107      	str	r7, [r0, #16]
 800c86a:	e7a3      	b.n	800c7b4 <__mdiff+0x34>
 800c86c:	f856 8b04 	ldr.w	r8, [r6], #4
 800c870:	fa11 f288 	uxtah	r2, r1, r8
 800c874:	1414      	asrs	r4, r2, #16
 800c876:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c87a:	b292      	uxth	r2, r2
 800c87c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c880:	f84e 2b04 	str.w	r2, [lr], #4
 800c884:	1421      	asrs	r1, r4, #16
 800c886:	e7e0      	b.n	800c84a <__mdiff+0xca>
 800c888:	3f01      	subs	r7, #1
 800c88a:	e7ea      	b.n	800c862 <__mdiff+0xe2>
 800c88c:	0800edd0 	.word	0x0800edd0
 800c890:	0800ee5c 	.word	0x0800ee5c

0800c894 <__ulp>:
 800c894:	b082      	sub	sp, #8
 800c896:	ed8d 0b00 	vstr	d0, [sp]
 800c89a:	9b01      	ldr	r3, [sp, #4]
 800c89c:	4912      	ldr	r1, [pc, #72]	; (800c8e8 <__ulp+0x54>)
 800c89e:	4019      	ands	r1, r3
 800c8a0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c8a4:	2900      	cmp	r1, #0
 800c8a6:	dd05      	ble.n	800c8b4 <__ulp+0x20>
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	460b      	mov	r3, r1
 800c8ac:	ec43 2b10 	vmov	d0, r2, r3
 800c8b0:	b002      	add	sp, #8
 800c8b2:	4770      	bx	lr
 800c8b4:	4249      	negs	r1, r1
 800c8b6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c8ba:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c8be:	f04f 0200 	mov.w	r2, #0
 800c8c2:	f04f 0300 	mov.w	r3, #0
 800c8c6:	da04      	bge.n	800c8d2 <__ulp+0x3e>
 800c8c8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c8cc:	fa41 f300 	asr.w	r3, r1, r0
 800c8d0:	e7ec      	b.n	800c8ac <__ulp+0x18>
 800c8d2:	f1a0 0114 	sub.w	r1, r0, #20
 800c8d6:	291e      	cmp	r1, #30
 800c8d8:	bfda      	itte	le
 800c8da:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c8de:	fa20 f101 	lsrle.w	r1, r0, r1
 800c8e2:	2101      	movgt	r1, #1
 800c8e4:	460a      	mov	r2, r1
 800c8e6:	e7e1      	b.n	800c8ac <__ulp+0x18>
 800c8e8:	7ff00000 	.word	0x7ff00000

0800c8ec <__b2d>:
 800c8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8ee:	6905      	ldr	r5, [r0, #16]
 800c8f0:	f100 0714 	add.w	r7, r0, #20
 800c8f4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c8f8:	1f2e      	subs	r6, r5, #4
 800c8fa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c8fe:	4620      	mov	r0, r4
 800c900:	f7ff fd48 	bl	800c394 <__hi0bits>
 800c904:	f1c0 0320 	rsb	r3, r0, #32
 800c908:	280a      	cmp	r0, #10
 800c90a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c988 <__b2d+0x9c>
 800c90e:	600b      	str	r3, [r1, #0]
 800c910:	dc14      	bgt.n	800c93c <__b2d+0x50>
 800c912:	f1c0 0e0b 	rsb	lr, r0, #11
 800c916:	fa24 f10e 	lsr.w	r1, r4, lr
 800c91a:	42b7      	cmp	r7, r6
 800c91c:	ea41 030c 	orr.w	r3, r1, ip
 800c920:	bf34      	ite	cc
 800c922:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c926:	2100      	movcs	r1, #0
 800c928:	3015      	adds	r0, #21
 800c92a:	fa04 f000 	lsl.w	r0, r4, r0
 800c92e:	fa21 f10e 	lsr.w	r1, r1, lr
 800c932:	ea40 0201 	orr.w	r2, r0, r1
 800c936:	ec43 2b10 	vmov	d0, r2, r3
 800c93a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c93c:	42b7      	cmp	r7, r6
 800c93e:	bf3a      	itte	cc
 800c940:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c944:	f1a5 0608 	subcc.w	r6, r5, #8
 800c948:	2100      	movcs	r1, #0
 800c94a:	380b      	subs	r0, #11
 800c94c:	d017      	beq.n	800c97e <__b2d+0x92>
 800c94e:	f1c0 0c20 	rsb	ip, r0, #32
 800c952:	fa04 f500 	lsl.w	r5, r4, r0
 800c956:	42be      	cmp	r6, r7
 800c958:	fa21 f40c 	lsr.w	r4, r1, ip
 800c95c:	ea45 0504 	orr.w	r5, r5, r4
 800c960:	bf8c      	ite	hi
 800c962:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c966:	2400      	movls	r4, #0
 800c968:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c96c:	fa01 f000 	lsl.w	r0, r1, r0
 800c970:	fa24 f40c 	lsr.w	r4, r4, ip
 800c974:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c978:	ea40 0204 	orr.w	r2, r0, r4
 800c97c:	e7db      	b.n	800c936 <__b2d+0x4a>
 800c97e:	ea44 030c 	orr.w	r3, r4, ip
 800c982:	460a      	mov	r2, r1
 800c984:	e7d7      	b.n	800c936 <__b2d+0x4a>
 800c986:	bf00      	nop
 800c988:	3ff00000 	.word	0x3ff00000

0800c98c <__d2b>:
 800c98c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c990:	4689      	mov	r9, r1
 800c992:	2101      	movs	r1, #1
 800c994:	ec57 6b10 	vmov	r6, r7, d0
 800c998:	4690      	mov	r8, r2
 800c99a:	f7ff fc09 	bl	800c1b0 <_Balloc>
 800c99e:	4604      	mov	r4, r0
 800c9a0:	b930      	cbnz	r0, 800c9b0 <__d2b+0x24>
 800c9a2:	4602      	mov	r2, r0
 800c9a4:	4b25      	ldr	r3, [pc, #148]	; (800ca3c <__d2b+0xb0>)
 800c9a6:	4826      	ldr	r0, [pc, #152]	; (800ca40 <__d2b+0xb4>)
 800c9a8:	f240 310a 	movw	r1, #778	; 0x30a
 800c9ac:	f000 fb4e 	bl	800d04c <__assert_func>
 800c9b0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c9b4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c9b8:	bb35      	cbnz	r5, 800ca08 <__d2b+0x7c>
 800c9ba:	2e00      	cmp	r6, #0
 800c9bc:	9301      	str	r3, [sp, #4]
 800c9be:	d028      	beq.n	800ca12 <__d2b+0x86>
 800c9c0:	4668      	mov	r0, sp
 800c9c2:	9600      	str	r6, [sp, #0]
 800c9c4:	f7ff fd06 	bl	800c3d4 <__lo0bits>
 800c9c8:	9900      	ldr	r1, [sp, #0]
 800c9ca:	b300      	cbz	r0, 800ca0e <__d2b+0x82>
 800c9cc:	9a01      	ldr	r2, [sp, #4]
 800c9ce:	f1c0 0320 	rsb	r3, r0, #32
 800c9d2:	fa02 f303 	lsl.w	r3, r2, r3
 800c9d6:	430b      	orrs	r3, r1
 800c9d8:	40c2      	lsrs	r2, r0
 800c9da:	6163      	str	r3, [r4, #20]
 800c9dc:	9201      	str	r2, [sp, #4]
 800c9de:	9b01      	ldr	r3, [sp, #4]
 800c9e0:	61a3      	str	r3, [r4, #24]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	bf14      	ite	ne
 800c9e6:	2202      	movne	r2, #2
 800c9e8:	2201      	moveq	r2, #1
 800c9ea:	6122      	str	r2, [r4, #16]
 800c9ec:	b1d5      	cbz	r5, 800ca24 <__d2b+0x98>
 800c9ee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c9f2:	4405      	add	r5, r0
 800c9f4:	f8c9 5000 	str.w	r5, [r9]
 800c9f8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c9fc:	f8c8 0000 	str.w	r0, [r8]
 800ca00:	4620      	mov	r0, r4
 800ca02:	b003      	add	sp, #12
 800ca04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ca0c:	e7d5      	b.n	800c9ba <__d2b+0x2e>
 800ca0e:	6161      	str	r1, [r4, #20]
 800ca10:	e7e5      	b.n	800c9de <__d2b+0x52>
 800ca12:	a801      	add	r0, sp, #4
 800ca14:	f7ff fcde 	bl	800c3d4 <__lo0bits>
 800ca18:	9b01      	ldr	r3, [sp, #4]
 800ca1a:	6163      	str	r3, [r4, #20]
 800ca1c:	2201      	movs	r2, #1
 800ca1e:	6122      	str	r2, [r4, #16]
 800ca20:	3020      	adds	r0, #32
 800ca22:	e7e3      	b.n	800c9ec <__d2b+0x60>
 800ca24:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ca28:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ca2c:	f8c9 0000 	str.w	r0, [r9]
 800ca30:	6918      	ldr	r0, [r3, #16]
 800ca32:	f7ff fcaf 	bl	800c394 <__hi0bits>
 800ca36:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ca3a:	e7df      	b.n	800c9fc <__d2b+0x70>
 800ca3c:	0800edd0 	.word	0x0800edd0
 800ca40:	0800ee5c 	.word	0x0800ee5c

0800ca44 <__ratio>:
 800ca44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca48:	4688      	mov	r8, r1
 800ca4a:	4669      	mov	r1, sp
 800ca4c:	4681      	mov	r9, r0
 800ca4e:	f7ff ff4d 	bl	800c8ec <__b2d>
 800ca52:	a901      	add	r1, sp, #4
 800ca54:	4640      	mov	r0, r8
 800ca56:	ec55 4b10 	vmov	r4, r5, d0
 800ca5a:	f7ff ff47 	bl	800c8ec <__b2d>
 800ca5e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ca62:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ca66:	eba3 0c02 	sub.w	ip, r3, r2
 800ca6a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ca6e:	1a9b      	subs	r3, r3, r2
 800ca70:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ca74:	ec51 0b10 	vmov	r0, r1, d0
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	bfd6      	itet	le
 800ca7c:	460a      	movle	r2, r1
 800ca7e:	462a      	movgt	r2, r5
 800ca80:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ca84:	468b      	mov	fp, r1
 800ca86:	462f      	mov	r7, r5
 800ca88:	bfd4      	ite	le
 800ca8a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ca8e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ca92:	4620      	mov	r0, r4
 800ca94:	ee10 2a10 	vmov	r2, s0
 800ca98:	465b      	mov	r3, fp
 800ca9a:	4639      	mov	r1, r7
 800ca9c:	f7f3 fede 	bl	800085c <__aeabi_ddiv>
 800caa0:	ec41 0b10 	vmov	d0, r0, r1
 800caa4:	b003      	add	sp, #12
 800caa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800caaa <__copybits>:
 800caaa:	3901      	subs	r1, #1
 800caac:	b570      	push	{r4, r5, r6, lr}
 800caae:	1149      	asrs	r1, r1, #5
 800cab0:	6914      	ldr	r4, [r2, #16]
 800cab2:	3101      	adds	r1, #1
 800cab4:	f102 0314 	add.w	r3, r2, #20
 800cab8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cabc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cac0:	1f05      	subs	r5, r0, #4
 800cac2:	42a3      	cmp	r3, r4
 800cac4:	d30c      	bcc.n	800cae0 <__copybits+0x36>
 800cac6:	1aa3      	subs	r3, r4, r2
 800cac8:	3b11      	subs	r3, #17
 800caca:	f023 0303 	bic.w	r3, r3, #3
 800cace:	3211      	adds	r2, #17
 800cad0:	42a2      	cmp	r2, r4
 800cad2:	bf88      	it	hi
 800cad4:	2300      	movhi	r3, #0
 800cad6:	4418      	add	r0, r3
 800cad8:	2300      	movs	r3, #0
 800cada:	4288      	cmp	r0, r1
 800cadc:	d305      	bcc.n	800caea <__copybits+0x40>
 800cade:	bd70      	pop	{r4, r5, r6, pc}
 800cae0:	f853 6b04 	ldr.w	r6, [r3], #4
 800cae4:	f845 6f04 	str.w	r6, [r5, #4]!
 800cae8:	e7eb      	b.n	800cac2 <__copybits+0x18>
 800caea:	f840 3b04 	str.w	r3, [r0], #4
 800caee:	e7f4      	b.n	800cada <__copybits+0x30>

0800caf0 <__any_on>:
 800caf0:	f100 0214 	add.w	r2, r0, #20
 800caf4:	6900      	ldr	r0, [r0, #16]
 800caf6:	114b      	asrs	r3, r1, #5
 800caf8:	4298      	cmp	r0, r3
 800cafa:	b510      	push	{r4, lr}
 800cafc:	db11      	blt.n	800cb22 <__any_on+0x32>
 800cafe:	dd0a      	ble.n	800cb16 <__any_on+0x26>
 800cb00:	f011 011f 	ands.w	r1, r1, #31
 800cb04:	d007      	beq.n	800cb16 <__any_on+0x26>
 800cb06:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cb0a:	fa24 f001 	lsr.w	r0, r4, r1
 800cb0e:	fa00 f101 	lsl.w	r1, r0, r1
 800cb12:	428c      	cmp	r4, r1
 800cb14:	d10b      	bne.n	800cb2e <__any_on+0x3e>
 800cb16:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cb1a:	4293      	cmp	r3, r2
 800cb1c:	d803      	bhi.n	800cb26 <__any_on+0x36>
 800cb1e:	2000      	movs	r0, #0
 800cb20:	bd10      	pop	{r4, pc}
 800cb22:	4603      	mov	r3, r0
 800cb24:	e7f7      	b.n	800cb16 <__any_on+0x26>
 800cb26:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cb2a:	2900      	cmp	r1, #0
 800cb2c:	d0f5      	beq.n	800cb1a <__any_on+0x2a>
 800cb2e:	2001      	movs	r0, #1
 800cb30:	e7f6      	b.n	800cb20 <__any_on+0x30>

0800cb32 <_calloc_r>:
 800cb32:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cb34:	fba1 2402 	umull	r2, r4, r1, r2
 800cb38:	b94c      	cbnz	r4, 800cb4e <_calloc_r+0x1c>
 800cb3a:	4611      	mov	r1, r2
 800cb3c:	9201      	str	r2, [sp, #4]
 800cb3e:	f000 f87b 	bl	800cc38 <_malloc_r>
 800cb42:	9a01      	ldr	r2, [sp, #4]
 800cb44:	4605      	mov	r5, r0
 800cb46:	b930      	cbnz	r0, 800cb56 <_calloc_r+0x24>
 800cb48:	4628      	mov	r0, r5
 800cb4a:	b003      	add	sp, #12
 800cb4c:	bd30      	pop	{r4, r5, pc}
 800cb4e:	220c      	movs	r2, #12
 800cb50:	6002      	str	r2, [r0, #0]
 800cb52:	2500      	movs	r5, #0
 800cb54:	e7f8      	b.n	800cb48 <_calloc_r+0x16>
 800cb56:	4621      	mov	r1, r4
 800cb58:	f7fc fbbe 	bl	80092d8 <memset>
 800cb5c:	e7f4      	b.n	800cb48 <_calloc_r+0x16>
	...

0800cb60 <_free_r>:
 800cb60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cb62:	2900      	cmp	r1, #0
 800cb64:	d044      	beq.n	800cbf0 <_free_r+0x90>
 800cb66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb6a:	9001      	str	r0, [sp, #4]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	f1a1 0404 	sub.w	r4, r1, #4
 800cb72:	bfb8      	it	lt
 800cb74:	18e4      	addlt	r4, r4, r3
 800cb76:	f000 fab3 	bl	800d0e0 <__malloc_lock>
 800cb7a:	4a1e      	ldr	r2, [pc, #120]	; (800cbf4 <_free_r+0x94>)
 800cb7c:	9801      	ldr	r0, [sp, #4]
 800cb7e:	6813      	ldr	r3, [r2, #0]
 800cb80:	b933      	cbnz	r3, 800cb90 <_free_r+0x30>
 800cb82:	6063      	str	r3, [r4, #4]
 800cb84:	6014      	str	r4, [r2, #0]
 800cb86:	b003      	add	sp, #12
 800cb88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cb8c:	f000 baae 	b.w	800d0ec <__malloc_unlock>
 800cb90:	42a3      	cmp	r3, r4
 800cb92:	d908      	bls.n	800cba6 <_free_r+0x46>
 800cb94:	6825      	ldr	r5, [r4, #0]
 800cb96:	1961      	adds	r1, r4, r5
 800cb98:	428b      	cmp	r3, r1
 800cb9a:	bf01      	itttt	eq
 800cb9c:	6819      	ldreq	r1, [r3, #0]
 800cb9e:	685b      	ldreq	r3, [r3, #4]
 800cba0:	1949      	addeq	r1, r1, r5
 800cba2:	6021      	streq	r1, [r4, #0]
 800cba4:	e7ed      	b.n	800cb82 <_free_r+0x22>
 800cba6:	461a      	mov	r2, r3
 800cba8:	685b      	ldr	r3, [r3, #4]
 800cbaa:	b10b      	cbz	r3, 800cbb0 <_free_r+0x50>
 800cbac:	42a3      	cmp	r3, r4
 800cbae:	d9fa      	bls.n	800cba6 <_free_r+0x46>
 800cbb0:	6811      	ldr	r1, [r2, #0]
 800cbb2:	1855      	adds	r5, r2, r1
 800cbb4:	42a5      	cmp	r5, r4
 800cbb6:	d10b      	bne.n	800cbd0 <_free_r+0x70>
 800cbb8:	6824      	ldr	r4, [r4, #0]
 800cbba:	4421      	add	r1, r4
 800cbbc:	1854      	adds	r4, r2, r1
 800cbbe:	42a3      	cmp	r3, r4
 800cbc0:	6011      	str	r1, [r2, #0]
 800cbc2:	d1e0      	bne.n	800cb86 <_free_r+0x26>
 800cbc4:	681c      	ldr	r4, [r3, #0]
 800cbc6:	685b      	ldr	r3, [r3, #4]
 800cbc8:	6053      	str	r3, [r2, #4]
 800cbca:	4421      	add	r1, r4
 800cbcc:	6011      	str	r1, [r2, #0]
 800cbce:	e7da      	b.n	800cb86 <_free_r+0x26>
 800cbd0:	d902      	bls.n	800cbd8 <_free_r+0x78>
 800cbd2:	230c      	movs	r3, #12
 800cbd4:	6003      	str	r3, [r0, #0]
 800cbd6:	e7d6      	b.n	800cb86 <_free_r+0x26>
 800cbd8:	6825      	ldr	r5, [r4, #0]
 800cbda:	1961      	adds	r1, r4, r5
 800cbdc:	428b      	cmp	r3, r1
 800cbde:	bf04      	itt	eq
 800cbe0:	6819      	ldreq	r1, [r3, #0]
 800cbe2:	685b      	ldreq	r3, [r3, #4]
 800cbe4:	6063      	str	r3, [r4, #4]
 800cbe6:	bf04      	itt	eq
 800cbe8:	1949      	addeq	r1, r1, r5
 800cbea:	6021      	streq	r1, [r4, #0]
 800cbec:	6054      	str	r4, [r2, #4]
 800cbee:	e7ca      	b.n	800cb86 <_free_r+0x26>
 800cbf0:	b003      	add	sp, #12
 800cbf2:	bd30      	pop	{r4, r5, pc}
 800cbf4:	20001e34 	.word	0x20001e34

0800cbf8 <sbrk_aligned>:
 800cbf8:	b570      	push	{r4, r5, r6, lr}
 800cbfa:	4e0e      	ldr	r6, [pc, #56]	; (800cc34 <sbrk_aligned+0x3c>)
 800cbfc:	460c      	mov	r4, r1
 800cbfe:	6831      	ldr	r1, [r6, #0]
 800cc00:	4605      	mov	r5, r0
 800cc02:	b911      	cbnz	r1, 800cc0a <sbrk_aligned+0x12>
 800cc04:	f000 f9f0 	bl	800cfe8 <_sbrk_r>
 800cc08:	6030      	str	r0, [r6, #0]
 800cc0a:	4621      	mov	r1, r4
 800cc0c:	4628      	mov	r0, r5
 800cc0e:	f000 f9eb 	bl	800cfe8 <_sbrk_r>
 800cc12:	1c43      	adds	r3, r0, #1
 800cc14:	d00a      	beq.n	800cc2c <sbrk_aligned+0x34>
 800cc16:	1cc4      	adds	r4, r0, #3
 800cc18:	f024 0403 	bic.w	r4, r4, #3
 800cc1c:	42a0      	cmp	r0, r4
 800cc1e:	d007      	beq.n	800cc30 <sbrk_aligned+0x38>
 800cc20:	1a21      	subs	r1, r4, r0
 800cc22:	4628      	mov	r0, r5
 800cc24:	f000 f9e0 	bl	800cfe8 <_sbrk_r>
 800cc28:	3001      	adds	r0, #1
 800cc2a:	d101      	bne.n	800cc30 <sbrk_aligned+0x38>
 800cc2c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800cc30:	4620      	mov	r0, r4
 800cc32:	bd70      	pop	{r4, r5, r6, pc}
 800cc34:	20001e38 	.word	0x20001e38

0800cc38 <_malloc_r>:
 800cc38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc3c:	1ccd      	adds	r5, r1, #3
 800cc3e:	f025 0503 	bic.w	r5, r5, #3
 800cc42:	3508      	adds	r5, #8
 800cc44:	2d0c      	cmp	r5, #12
 800cc46:	bf38      	it	cc
 800cc48:	250c      	movcc	r5, #12
 800cc4a:	2d00      	cmp	r5, #0
 800cc4c:	4607      	mov	r7, r0
 800cc4e:	db01      	blt.n	800cc54 <_malloc_r+0x1c>
 800cc50:	42a9      	cmp	r1, r5
 800cc52:	d905      	bls.n	800cc60 <_malloc_r+0x28>
 800cc54:	230c      	movs	r3, #12
 800cc56:	603b      	str	r3, [r7, #0]
 800cc58:	2600      	movs	r6, #0
 800cc5a:	4630      	mov	r0, r6
 800cc5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc60:	4e2e      	ldr	r6, [pc, #184]	; (800cd1c <_malloc_r+0xe4>)
 800cc62:	f000 fa3d 	bl	800d0e0 <__malloc_lock>
 800cc66:	6833      	ldr	r3, [r6, #0]
 800cc68:	461c      	mov	r4, r3
 800cc6a:	bb34      	cbnz	r4, 800ccba <_malloc_r+0x82>
 800cc6c:	4629      	mov	r1, r5
 800cc6e:	4638      	mov	r0, r7
 800cc70:	f7ff ffc2 	bl	800cbf8 <sbrk_aligned>
 800cc74:	1c43      	adds	r3, r0, #1
 800cc76:	4604      	mov	r4, r0
 800cc78:	d14d      	bne.n	800cd16 <_malloc_r+0xde>
 800cc7a:	6834      	ldr	r4, [r6, #0]
 800cc7c:	4626      	mov	r6, r4
 800cc7e:	2e00      	cmp	r6, #0
 800cc80:	d140      	bne.n	800cd04 <_malloc_r+0xcc>
 800cc82:	6823      	ldr	r3, [r4, #0]
 800cc84:	4631      	mov	r1, r6
 800cc86:	4638      	mov	r0, r7
 800cc88:	eb04 0803 	add.w	r8, r4, r3
 800cc8c:	f000 f9ac 	bl	800cfe8 <_sbrk_r>
 800cc90:	4580      	cmp	r8, r0
 800cc92:	d13a      	bne.n	800cd0a <_malloc_r+0xd2>
 800cc94:	6821      	ldr	r1, [r4, #0]
 800cc96:	3503      	adds	r5, #3
 800cc98:	1a6d      	subs	r5, r5, r1
 800cc9a:	f025 0503 	bic.w	r5, r5, #3
 800cc9e:	3508      	adds	r5, #8
 800cca0:	2d0c      	cmp	r5, #12
 800cca2:	bf38      	it	cc
 800cca4:	250c      	movcc	r5, #12
 800cca6:	4629      	mov	r1, r5
 800cca8:	4638      	mov	r0, r7
 800ccaa:	f7ff ffa5 	bl	800cbf8 <sbrk_aligned>
 800ccae:	3001      	adds	r0, #1
 800ccb0:	d02b      	beq.n	800cd0a <_malloc_r+0xd2>
 800ccb2:	6823      	ldr	r3, [r4, #0]
 800ccb4:	442b      	add	r3, r5
 800ccb6:	6023      	str	r3, [r4, #0]
 800ccb8:	e00e      	b.n	800ccd8 <_malloc_r+0xa0>
 800ccba:	6822      	ldr	r2, [r4, #0]
 800ccbc:	1b52      	subs	r2, r2, r5
 800ccbe:	d41e      	bmi.n	800ccfe <_malloc_r+0xc6>
 800ccc0:	2a0b      	cmp	r2, #11
 800ccc2:	d916      	bls.n	800ccf2 <_malloc_r+0xba>
 800ccc4:	1961      	adds	r1, r4, r5
 800ccc6:	42a3      	cmp	r3, r4
 800ccc8:	6025      	str	r5, [r4, #0]
 800ccca:	bf18      	it	ne
 800cccc:	6059      	strne	r1, [r3, #4]
 800ccce:	6863      	ldr	r3, [r4, #4]
 800ccd0:	bf08      	it	eq
 800ccd2:	6031      	streq	r1, [r6, #0]
 800ccd4:	5162      	str	r2, [r4, r5]
 800ccd6:	604b      	str	r3, [r1, #4]
 800ccd8:	4638      	mov	r0, r7
 800ccda:	f104 060b 	add.w	r6, r4, #11
 800ccde:	f000 fa05 	bl	800d0ec <__malloc_unlock>
 800cce2:	f026 0607 	bic.w	r6, r6, #7
 800cce6:	1d23      	adds	r3, r4, #4
 800cce8:	1af2      	subs	r2, r6, r3
 800ccea:	d0b6      	beq.n	800cc5a <_malloc_r+0x22>
 800ccec:	1b9b      	subs	r3, r3, r6
 800ccee:	50a3      	str	r3, [r4, r2]
 800ccf0:	e7b3      	b.n	800cc5a <_malloc_r+0x22>
 800ccf2:	6862      	ldr	r2, [r4, #4]
 800ccf4:	42a3      	cmp	r3, r4
 800ccf6:	bf0c      	ite	eq
 800ccf8:	6032      	streq	r2, [r6, #0]
 800ccfa:	605a      	strne	r2, [r3, #4]
 800ccfc:	e7ec      	b.n	800ccd8 <_malloc_r+0xa0>
 800ccfe:	4623      	mov	r3, r4
 800cd00:	6864      	ldr	r4, [r4, #4]
 800cd02:	e7b2      	b.n	800cc6a <_malloc_r+0x32>
 800cd04:	4634      	mov	r4, r6
 800cd06:	6876      	ldr	r6, [r6, #4]
 800cd08:	e7b9      	b.n	800cc7e <_malloc_r+0x46>
 800cd0a:	230c      	movs	r3, #12
 800cd0c:	603b      	str	r3, [r7, #0]
 800cd0e:	4638      	mov	r0, r7
 800cd10:	f000 f9ec 	bl	800d0ec <__malloc_unlock>
 800cd14:	e7a1      	b.n	800cc5a <_malloc_r+0x22>
 800cd16:	6025      	str	r5, [r4, #0]
 800cd18:	e7de      	b.n	800ccd8 <_malloc_r+0xa0>
 800cd1a:	bf00      	nop
 800cd1c:	20001e34 	.word	0x20001e34

0800cd20 <__ssputs_r>:
 800cd20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd24:	688e      	ldr	r6, [r1, #8]
 800cd26:	429e      	cmp	r6, r3
 800cd28:	4682      	mov	sl, r0
 800cd2a:	460c      	mov	r4, r1
 800cd2c:	4690      	mov	r8, r2
 800cd2e:	461f      	mov	r7, r3
 800cd30:	d838      	bhi.n	800cda4 <__ssputs_r+0x84>
 800cd32:	898a      	ldrh	r2, [r1, #12]
 800cd34:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cd38:	d032      	beq.n	800cda0 <__ssputs_r+0x80>
 800cd3a:	6825      	ldr	r5, [r4, #0]
 800cd3c:	6909      	ldr	r1, [r1, #16]
 800cd3e:	eba5 0901 	sub.w	r9, r5, r1
 800cd42:	6965      	ldr	r5, [r4, #20]
 800cd44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cd48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cd4c:	3301      	adds	r3, #1
 800cd4e:	444b      	add	r3, r9
 800cd50:	106d      	asrs	r5, r5, #1
 800cd52:	429d      	cmp	r5, r3
 800cd54:	bf38      	it	cc
 800cd56:	461d      	movcc	r5, r3
 800cd58:	0553      	lsls	r3, r2, #21
 800cd5a:	d531      	bpl.n	800cdc0 <__ssputs_r+0xa0>
 800cd5c:	4629      	mov	r1, r5
 800cd5e:	f7ff ff6b 	bl	800cc38 <_malloc_r>
 800cd62:	4606      	mov	r6, r0
 800cd64:	b950      	cbnz	r0, 800cd7c <__ssputs_r+0x5c>
 800cd66:	230c      	movs	r3, #12
 800cd68:	f8ca 3000 	str.w	r3, [sl]
 800cd6c:	89a3      	ldrh	r3, [r4, #12]
 800cd6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd72:	81a3      	strh	r3, [r4, #12]
 800cd74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd7c:	6921      	ldr	r1, [r4, #16]
 800cd7e:	464a      	mov	r2, r9
 800cd80:	f7fc fa9c 	bl	80092bc <memcpy>
 800cd84:	89a3      	ldrh	r3, [r4, #12]
 800cd86:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cd8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd8e:	81a3      	strh	r3, [r4, #12]
 800cd90:	6126      	str	r6, [r4, #16]
 800cd92:	6165      	str	r5, [r4, #20]
 800cd94:	444e      	add	r6, r9
 800cd96:	eba5 0509 	sub.w	r5, r5, r9
 800cd9a:	6026      	str	r6, [r4, #0]
 800cd9c:	60a5      	str	r5, [r4, #8]
 800cd9e:	463e      	mov	r6, r7
 800cda0:	42be      	cmp	r6, r7
 800cda2:	d900      	bls.n	800cda6 <__ssputs_r+0x86>
 800cda4:	463e      	mov	r6, r7
 800cda6:	6820      	ldr	r0, [r4, #0]
 800cda8:	4632      	mov	r2, r6
 800cdaa:	4641      	mov	r1, r8
 800cdac:	f000 f97e 	bl	800d0ac <memmove>
 800cdb0:	68a3      	ldr	r3, [r4, #8]
 800cdb2:	1b9b      	subs	r3, r3, r6
 800cdb4:	60a3      	str	r3, [r4, #8]
 800cdb6:	6823      	ldr	r3, [r4, #0]
 800cdb8:	4433      	add	r3, r6
 800cdba:	6023      	str	r3, [r4, #0]
 800cdbc:	2000      	movs	r0, #0
 800cdbe:	e7db      	b.n	800cd78 <__ssputs_r+0x58>
 800cdc0:	462a      	mov	r2, r5
 800cdc2:	f000 f999 	bl	800d0f8 <_realloc_r>
 800cdc6:	4606      	mov	r6, r0
 800cdc8:	2800      	cmp	r0, #0
 800cdca:	d1e1      	bne.n	800cd90 <__ssputs_r+0x70>
 800cdcc:	6921      	ldr	r1, [r4, #16]
 800cdce:	4650      	mov	r0, sl
 800cdd0:	f7ff fec6 	bl	800cb60 <_free_r>
 800cdd4:	e7c7      	b.n	800cd66 <__ssputs_r+0x46>
	...

0800cdd8 <_svfiprintf_r>:
 800cdd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cddc:	4698      	mov	r8, r3
 800cdde:	898b      	ldrh	r3, [r1, #12]
 800cde0:	061b      	lsls	r3, r3, #24
 800cde2:	b09d      	sub	sp, #116	; 0x74
 800cde4:	4607      	mov	r7, r0
 800cde6:	460d      	mov	r5, r1
 800cde8:	4614      	mov	r4, r2
 800cdea:	d50e      	bpl.n	800ce0a <_svfiprintf_r+0x32>
 800cdec:	690b      	ldr	r3, [r1, #16]
 800cdee:	b963      	cbnz	r3, 800ce0a <_svfiprintf_r+0x32>
 800cdf0:	2140      	movs	r1, #64	; 0x40
 800cdf2:	f7ff ff21 	bl	800cc38 <_malloc_r>
 800cdf6:	6028      	str	r0, [r5, #0]
 800cdf8:	6128      	str	r0, [r5, #16]
 800cdfa:	b920      	cbnz	r0, 800ce06 <_svfiprintf_r+0x2e>
 800cdfc:	230c      	movs	r3, #12
 800cdfe:	603b      	str	r3, [r7, #0]
 800ce00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ce04:	e0d1      	b.n	800cfaa <_svfiprintf_r+0x1d2>
 800ce06:	2340      	movs	r3, #64	; 0x40
 800ce08:	616b      	str	r3, [r5, #20]
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	9309      	str	r3, [sp, #36]	; 0x24
 800ce0e:	2320      	movs	r3, #32
 800ce10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ce14:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce18:	2330      	movs	r3, #48	; 0x30
 800ce1a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cfc4 <_svfiprintf_r+0x1ec>
 800ce1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ce22:	f04f 0901 	mov.w	r9, #1
 800ce26:	4623      	mov	r3, r4
 800ce28:	469a      	mov	sl, r3
 800ce2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce2e:	b10a      	cbz	r2, 800ce34 <_svfiprintf_r+0x5c>
 800ce30:	2a25      	cmp	r2, #37	; 0x25
 800ce32:	d1f9      	bne.n	800ce28 <_svfiprintf_r+0x50>
 800ce34:	ebba 0b04 	subs.w	fp, sl, r4
 800ce38:	d00b      	beq.n	800ce52 <_svfiprintf_r+0x7a>
 800ce3a:	465b      	mov	r3, fp
 800ce3c:	4622      	mov	r2, r4
 800ce3e:	4629      	mov	r1, r5
 800ce40:	4638      	mov	r0, r7
 800ce42:	f7ff ff6d 	bl	800cd20 <__ssputs_r>
 800ce46:	3001      	adds	r0, #1
 800ce48:	f000 80aa 	beq.w	800cfa0 <_svfiprintf_r+0x1c8>
 800ce4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce4e:	445a      	add	r2, fp
 800ce50:	9209      	str	r2, [sp, #36]	; 0x24
 800ce52:	f89a 3000 	ldrb.w	r3, [sl]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	f000 80a2 	beq.w	800cfa0 <_svfiprintf_r+0x1c8>
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ce62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce66:	f10a 0a01 	add.w	sl, sl, #1
 800ce6a:	9304      	str	r3, [sp, #16]
 800ce6c:	9307      	str	r3, [sp, #28]
 800ce6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ce72:	931a      	str	r3, [sp, #104]	; 0x68
 800ce74:	4654      	mov	r4, sl
 800ce76:	2205      	movs	r2, #5
 800ce78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce7c:	4851      	ldr	r0, [pc, #324]	; (800cfc4 <_svfiprintf_r+0x1ec>)
 800ce7e:	f7f3 f9b7 	bl	80001f0 <memchr>
 800ce82:	9a04      	ldr	r2, [sp, #16]
 800ce84:	b9d8      	cbnz	r0, 800cebe <_svfiprintf_r+0xe6>
 800ce86:	06d0      	lsls	r0, r2, #27
 800ce88:	bf44      	itt	mi
 800ce8a:	2320      	movmi	r3, #32
 800ce8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce90:	0711      	lsls	r1, r2, #28
 800ce92:	bf44      	itt	mi
 800ce94:	232b      	movmi	r3, #43	; 0x2b
 800ce96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce9a:	f89a 3000 	ldrb.w	r3, [sl]
 800ce9e:	2b2a      	cmp	r3, #42	; 0x2a
 800cea0:	d015      	beq.n	800cece <_svfiprintf_r+0xf6>
 800cea2:	9a07      	ldr	r2, [sp, #28]
 800cea4:	4654      	mov	r4, sl
 800cea6:	2000      	movs	r0, #0
 800cea8:	f04f 0c0a 	mov.w	ip, #10
 800ceac:	4621      	mov	r1, r4
 800ceae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ceb2:	3b30      	subs	r3, #48	; 0x30
 800ceb4:	2b09      	cmp	r3, #9
 800ceb6:	d94e      	bls.n	800cf56 <_svfiprintf_r+0x17e>
 800ceb8:	b1b0      	cbz	r0, 800cee8 <_svfiprintf_r+0x110>
 800ceba:	9207      	str	r2, [sp, #28]
 800cebc:	e014      	b.n	800cee8 <_svfiprintf_r+0x110>
 800cebe:	eba0 0308 	sub.w	r3, r0, r8
 800cec2:	fa09 f303 	lsl.w	r3, r9, r3
 800cec6:	4313      	orrs	r3, r2
 800cec8:	9304      	str	r3, [sp, #16]
 800ceca:	46a2      	mov	sl, r4
 800cecc:	e7d2      	b.n	800ce74 <_svfiprintf_r+0x9c>
 800cece:	9b03      	ldr	r3, [sp, #12]
 800ced0:	1d19      	adds	r1, r3, #4
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	9103      	str	r1, [sp, #12]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	bfbb      	ittet	lt
 800ceda:	425b      	neglt	r3, r3
 800cedc:	f042 0202 	orrlt.w	r2, r2, #2
 800cee0:	9307      	strge	r3, [sp, #28]
 800cee2:	9307      	strlt	r3, [sp, #28]
 800cee4:	bfb8      	it	lt
 800cee6:	9204      	strlt	r2, [sp, #16]
 800cee8:	7823      	ldrb	r3, [r4, #0]
 800ceea:	2b2e      	cmp	r3, #46	; 0x2e
 800ceec:	d10c      	bne.n	800cf08 <_svfiprintf_r+0x130>
 800ceee:	7863      	ldrb	r3, [r4, #1]
 800cef0:	2b2a      	cmp	r3, #42	; 0x2a
 800cef2:	d135      	bne.n	800cf60 <_svfiprintf_r+0x188>
 800cef4:	9b03      	ldr	r3, [sp, #12]
 800cef6:	1d1a      	adds	r2, r3, #4
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	9203      	str	r2, [sp, #12]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	bfb8      	it	lt
 800cf00:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cf04:	3402      	adds	r4, #2
 800cf06:	9305      	str	r3, [sp, #20]
 800cf08:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cfd4 <_svfiprintf_r+0x1fc>
 800cf0c:	7821      	ldrb	r1, [r4, #0]
 800cf0e:	2203      	movs	r2, #3
 800cf10:	4650      	mov	r0, sl
 800cf12:	f7f3 f96d 	bl	80001f0 <memchr>
 800cf16:	b140      	cbz	r0, 800cf2a <_svfiprintf_r+0x152>
 800cf18:	2340      	movs	r3, #64	; 0x40
 800cf1a:	eba0 000a 	sub.w	r0, r0, sl
 800cf1e:	fa03 f000 	lsl.w	r0, r3, r0
 800cf22:	9b04      	ldr	r3, [sp, #16]
 800cf24:	4303      	orrs	r3, r0
 800cf26:	3401      	adds	r4, #1
 800cf28:	9304      	str	r3, [sp, #16]
 800cf2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf2e:	4826      	ldr	r0, [pc, #152]	; (800cfc8 <_svfiprintf_r+0x1f0>)
 800cf30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cf34:	2206      	movs	r2, #6
 800cf36:	f7f3 f95b 	bl	80001f0 <memchr>
 800cf3a:	2800      	cmp	r0, #0
 800cf3c:	d038      	beq.n	800cfb0 <_svfiprintf_r+0x1d8>
 800cf3e:	4b23      	ldr	r3, [pc, #140]	; (800cfcc <_svfiprintf_r+0x1f4>)
 800cf40:	bb1b      	cbnz	r3, 800cf8a <_svfiprintf_r+0x1b2>
 800cf42:	9b03      	ldr	r3, [sp, #12]
 800cf44:	3307      	adds	r3, #7
 800cf46:	f023 0307 	bic.w	r3, r3, #7
 800cf4a:	3308      	adds	r3, #8
 800cf4c:	9303      	str	r3, [sp, #12]
 800cf4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf50:	4433      	add	r3, r6
 800cf52:	9309      	str	r3, [sp, #36]	; 0x24
 800cf54:	e767      	b.n	800ce26 <_svfiprintf_r+0x4e>
 800cf56:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf5a:	460c      	mov	r4, r1
 800cf5c:	2001      	movs	r0, #1
 800cf5e:	e7a5      	b.n	800ceac <_svfiprintf_r+0xd4>
 800cf60:	2300      	movs	r3, #0
 800cf62:	3401      	adds	r4, #1
 800cf64:	9305      	str	r3, [sp, #20]
 800cf66:	4619      	mov	r1, r3
 800cf68:	f04f 0c0a 	mov.w	ip, #10
 800cf6c:	4620      	mov	r0, r4
 800cf6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf72:	3a30      	subs	r2, #48	; 0x30
 800cf74:	2a09      	cmp	r2, #9
 800cf76:	d903      	bls.n	800cf80 <_svfiprintf_r+0x1a8>
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d0c5      	beq.n	800cf08 <_svfiprintf_r+0x130>
 800cf7c:	9105      	str	r1, [sp, #20]
 800cf7e:	e7c3      	b.n	800cf08 <_svfiprintf_r+0x130>
 800cf80:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf84:	4604      	mov	r4, r0
 800cf86:	2301      	movs	r3, #1
 800cf88:	e7f0      	b.n	800cf6c <_svfiprintf_r+0x194>
 800cf8a:	ab03      	add	r3, sp, #12
 800cf8c:	9300      	str	r3, [sp, #0]
 800cf8e:	462a      	mov	r2, r5
 800cf90:	4b0f      	ldr	r3, [pc, #60]	; (800cfd0 <_svfiprintf_r+0x1f8>)
 800cf92:	a904      	add	r1, sp, #16
 800cf94:	4638      	mov	r0, r7
 800cf96:	f7fc fa47 	bl	8009428 <_printf_float>
 800cf9a:	1c42      	adds	r2, r0, #1
 800cf9c:	4606      	mov	r6, r0
 800cf9e:	d1d6      	bne.n	800cf4e <_svfiprintf_r+0x176>
 800cfa0:	89ab      	ldrh	r3, [r5, #12]
 800cfa2:	065b      	lsls	r3, r3, #25
 800cfa4:	f53f af2c 	bmi.w	800ce00 <_svfiprintf_r+0x28>
 800cfa8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cfaa:	b01d      	add	sp, #116	; 0x74
 800cfac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfb0:	ab03      	add	r3, sp, #12
 800cfb2:	9300      	str	r3, [sp, #0]
 800cfb4:	462a      	mov	r2, r5
 800cfb6:	4b06      	ldr	r3, [pc, #24]	; (800cfd0 <_svfiprintf_r+0x1f8>)
 800cfb8:	a904      	add	r1, sp, #16
 800cfba:	4638      	mov	r0, r7
 800cfbc:	f7fc fcd8 	bl	8009970 <_printf_i>
 800cfc0:	e7eb      	b.n	800cf9a <_svfiprintf_r+0x1c2>
 800cfc2:	bf00      	nop
 800cfc4:	0800efb4 	.word	0x0800efb4
 800cfc8:	0800efbe 	.word	0x0800efbe
 800cfcc:	08009429 	.word	0x08009429
 800cfd0:	0800cd21 	.word	0x0800cd21
 800cfd4:	0800efba 	.word	0x0800efba

0800cfd8 <nan>:
 800cfd8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cfe0 <nan+0x8>
 800cfdc:	4770      	bx	lr
 800cfde:	bf00      	nop
 800cfe0:	00000000 	.word	0x00000000
 800cfe4:	7ff80000 	.word	0x7ff80000

0800cfe8 <_sbrk_r>:
 800cfe8:	b538      	push	{r3, r4, r5, lr}
 800cfea:	4d06      	ldr	r5, [pc, #24]	; (800d004 <_sbrk_r+0x1c>)
 800cfec:	2300      	movs	r3, #0
 800cfee:	4604      	mov	r4, r0
 800cff0:	4608      	mov	r0, r1
 800cff2:	602b      	str	r3, [r5, #0]
 800cff4:	f7f6 f8d2 	bl	800319c <_sbrk>
 800cff8:	1c43      	adds	r3, r0, #1
 800cffa:	d102      	bne.n	800d002 <_sbrk_r+0x1a>
 800cffc:	682b      	ldr	r3, [r5, #0]
 800cffe:	b103      	cbz	r3, 800d002 <_sbrk_r+0x1a>
 800d000:	6023      	str	r3, [r4, #0]
 800d002:	bd38      	pop	{r3, r4, r5, pc}
 800d004:	20001e3c 	.word	0x20001e3c

0800d008 <strncmp>:
 800d008:	b510      	push	{r4, lr}
 800d00a:	b17a      	cbz	r2, 800d02c <strncmp+0x24>
 800d00c:	4603      	mov	r3, r0
 800d00e:	3901      	subs	r1, #1
 800d010:	1884      	adds	r4, r0, r2
 800d012:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d016:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d01a:	4290      	cmp	r0, r2
 800d01c:	d101      	bne.n	800d022 <strncmp+0x1a>
 800d01e:	42a3      	cmp	r3, r4
 800d020:	d101      	bne.n	800d026 <strncmp+0x1e>
 800d022:	1a80      	subs	r0, r0, r2
 800d024:	bd10      	pop	{r4, pc}
 800d026:	2800      	cmp	r0, #0
 800d028:	d1f3      	bne.n	800d012 <strncmp+0xa>
 800d02a:	e7fa      	b.n	800d022 <strncmp+0x1a>
 800d02c:	4610      	mov	r0, r2
 800d02e:	e7f9      	b.n	800d024 <strncmp+0x1c>

0800d030 <__ascii_wctomb>:
 800d030:	b149      	cbz	r1, 800d046 <__ascii_wctomb+0x16>
 800d032:	2aff      	cmp	r2, #255	; 0xff
 800d034:	bf85      	ittet	hi
 800d036:	238a      	movhi	r3, #138	; 0x8a
 800d038:	6003      	strhi	r3, [r0, #0]
 800d03a:	700a      	strbls	r2, [r1, #0]
 800d03c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800d040:	bf98      	it	ls
 800d042:	2001      	movls	r0, #1
 800d044:	4770      	bx	lr
 800d046:	4608      	mov	r0, r1
 800d048:	4770      	bx	lr
	...

0800d04c <__assert_func>:
 800d04c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d04e:	4614      	mov	r4, r2
 800d050:	461a      	mov	r2, r3
 800d052:	4b09      	ldr	r3, [pc, #36]	; (800d078 <__assert_func+0x2c>)
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	4605      	mov	r5, r0
 800d058:	68d8      	ldr	r0, [r3, #12]
 800d05a:	b14c      	cbz	r4, 800d070 <__assert_func+0x24>
 800d05c:	4b07      	ldr	r3, [pc, #28]	; (800d07c <__assert_func+0x30>)
 800d05e:	9100      	str	r1, [sp, #0]
 800d060:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d064:	4906      	ldr	r1, [pc, #24]	; (800d080 <__assert_func+0x34>)
 800d066:	462b      	mov	r3, r5
 800d068:	f000 f80e 	bl	800d088 <fiprintf>
 800d06c:	f000 fa8c 	bl	800d588 <abort>
 800d070:	4b04      	ldr	r3, [pc, #16]	; (800d084 <__assert_func+0x38>)
 800d072:	461c      	mov	r4, r3
 800d074:	e7f3      	b.n	800d05e <__assert_func+0x12>
 800d076:	bf00      	nop
 800d078:	2000001c 	.word	0x2000001c
 800d07c:	0800efc5 	.word	0x0800efc5
 800d080:	0800efd2 	.word	0x0800efd2
 800d084:	0800f000 	.word	0x0800f000

0800d088 <fiprintf>:
 800d088:	b40e      	push	{r1, r2, r3}
 800d08a:	b503      	push	{r0, r1, lr}
 800d08c:	4601      	mov	r1, r0
 800d08e:	ab03      	add	r3, sp, #12
 800d090:	4805      	ldr	r0, [pc, #20]	; (800d0a8 <fiprintf+0x20>)
 800d092:	f853 2b04 	ldr.w	r2, [r3], #4
 800d096:	6800      	ldr	r0, [r0, #0]
 800d098:	9301      	str	r3, [sp, #4]
 800d09a:	f000 f885 	bl	800d1a8 <_vfiprintf_r>
 800d09e:	b002      	add	sp, #8
 800d0a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d0a4:	b003      	add	sp, #12
 800d0a6:	4770      	bx	lr
 800d0a8:	2000001c 	.word	0x2000001c

0800d0ac <memmove>:
 800d0ac:	4288      	cmp	r0, r1
 800d0ae:	b510      	push	{r4, lr}
 800d0b0:	eb01 0402 	add.w	r4, r1, r2
 800d0b4:	d902      	bls.n	800d0bc <memmove+0x10>
 800d0b6:	4284      	cmp	r4, r0
 800d0b8:	4623      	mov	r3, r4
 800d0ba:	d807      	bhi.n	800d0cc <memmove+0x20>
 800d0bc:	1e43      	subs	r3, r0, #1
 800d0be:	42a1      	cmp	r1, r4
 800d0c0:	d008      	beq.n	800d0d4 <memmove+0x28>
 800d0c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d0c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d0ca:	e7f8      	b.n	800d0be <memmove+0x12>
 800d0cc:	4402      	add	r2, r0
 800d0ce:	4601      	mov	r1, r0
 800d0d0:	428a      	cmp	r2, r1
 800d0d2:	d100      	bne.n	800d0d6 <memmove+0x2a>
 800d0d4:	bd10      	pop	{r4, pc}
 800d0d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d0da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d0de:	e7f7      	b.n	800d0d0 <memmove+0x24>

0800d0e0 <__malloc_lock>:
 800d0e0:	4801      	ldr	r0, [pc, #4]	; (800d0e8 <__malloc_lock+0x8>)
 800d0e2:	f000 bc11 	b.w	800d908 <__retarget_lock_acquire_recursive>
 800d0e6:	bf00      	nop
 800d0e8:	20001e40 	.word	0x20001e40

0800d0ec <__malloc_unlock>:
 800d0ec:	4801      	ldr	r0, [pc, #4]	; (800d0f4 <__malloc_unlock+0x8>)
 800d0ee:	f000 bc0c 	b.w	800d90a <__retarget_lock_release_recursive>
 800d0f2:	bf00      	nop
 800d0f4:	20001e40 	.word	0x20001e40

0800d0f8 <_realloc_r>:
 800d0f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0fc:	4680      	mov	r8, r0
 800d0fe:	4614      	mov	r4, r2
 800d100:	460e      	mov	r6, r1
 800d102:	b921      	cbnz	r1, 800d10e <_realloc_r+0x16>
 800d104:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d108:	4611      	mov	r1, r2
 800d10a:	f7ff bd95 	b.w	800cc38 <_malloc_r>
 800d10e:	b92a      	cbnz	r2, 800d11c <_realloc_r+0x24>
 800d110:	f7ff fd26 	bl	800cb60 <_free_r>
 800d114:	4625      	mov	r5, r4
 800d116:	4628      	mov	r0, r5
 800d118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d11c:	f000 fc5c 	bl	800d9d8 <_malloc_usable_size_r>
 800d120:	4284      	cmp	r4, r0
 800d122:	4607      	mov	r7, r0
 800d124:	d802      	bhi.n	800d12c <_realloc_r+0x34>
 800d126:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d12a:	d812      	bhi.n	800d152 <_realloc_r+0x5a>
 800d12c:	4621      	mov	r1, r4
 800d12e:	4640      	mov	r0, r8
 800d130:	f7ff fd82 	bl	800cc38 <_malloc_r>
 800d134:	4605      	mov	r5, r0
 800d136:	2800      	cmp	r0, #0
 800d138:	d0ed      	beq.n	800d116 <_realloc_r+0x1e>
 800d13a:	42bc      	cmp	r4, r7
 800d13c:	4622      	mov	r2, r4
 800d13e:	4631      	mov	r1, r6
 800d140:	bf28      	it	cs
 800d142:	463a      	movcs	r2, r7
 800d144:	f7fc f8ba 	bl	80092bc <memcpy>
 800d148:	4631      	mov	r1, r6
 800d14a:	4640      	mov	r0, r8
 800d14c:	f7ff fd08 	bl	800cb60 <_free_r>
 800d150:	e7e1      	b.n	800d116 <_realloc_r+0x1e>
 800d152:	4635      	mov	r5, r6
 800d154:	e7df      	b.n	800d116 <_realloc_r+0x1e>

0800d156 <__sfputc_r>:
 800d156:	6893      	ldr	r3, [r2, #8]
 800d158:	3b01      	subs	r3, #1
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	b410      	push	{r4}
 800d15e:	6093      	str	r3, [r2, #8]
 800d160:	da08      	bge.n	800d174 <__sfputc_r+0x1e>
 800d162:	6994      	ldr	r4, [r2, #24]
 800d164:	42a3      	cmp	r3, r4
 800d166:	db01      	blt.n	800d16c <__sfputc_r+0x16>
 800d168:	290a      	cmp	r1, #10
 800d16a:	d103      	bne.n	800d174 <__sfputc_r+0x1e>
 800d16c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d170:	f000 b94a 	b.w	800d408 <__swbuf_r>
 800d174:	6813      	ldr	r3, [r2, #0]
 800d176:	1c58      	adds	r0, r3, #1
 800d178:	6010      	str	r0, [r2, #0]
 800d17a:	7019      	strb	r1, [r3, #0]
 800d17c:	4608      	mov	r0, r1
 800d17e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d182:	4770      	bx	lr

0800d184 <__sfputs_r>:
 800d184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d186:	4606      	mov	r6, r0
 800d188:	460f      	mov	r7, r1
 800d18a:	4614      	mov	r4, r2
 800d18c:	18d5      	adds	r5, r2, r3
 800d18e:	42ac      	cmp	r4, r5
 800d190:	d101      	bne.n	800d196 <__sfputs_r+0x12>
 800d192:	2000      	movs	r0, #0
 800d194:	e007      	b.n	800d1a6 <__sfputs_r+0x22>
 800d196:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d19a:	463a      	mov	r2, r7
 800d19c:	4630      	mov	r0, r6
 800d19e:	f7ff ffda 	bl	800d156 <__sfputc_r>
 800d1a2:	1c43      	adds	r3, r0, #1
 800d1a4:	d1f3      	bne.n	800d18e <__sfputs_r+0xa>
 800d1a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d1a8 <_vfiprintf_r>:
 800d1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1ac:	460d      	mov	r5, r1
 800d1ae:	b09d      	sub	sp, #116	; 0x74
 800d1b0:	4614      	mov	r4, r2
 800d1b2:	4698      	mov	r8, r3
 800d1b4:	4606      	mov	r6, r0
 800d1b6:	b118      	cbz	r0, 800d1c0 <_vfiprintf_r+0x18>
 800d1b8:	6983      	ldr	r3, [r0, #24]
 800d1ba:	b90b      	cbnz	r3, 800d1c0 <_vfiprintf_r+0x18>
 800d1bc:	f000 fb06 	bl	800d7cc <__sinit>
 800d1c0:	4b89      	ldr	r3, [pc, #548]	; (800d3e8 <_vfiprintf_r+0x240>)
 800d1c2:	429d      	cmp	r5, r3
 800d1c4:	d11b      	bne.n	800d1fe <_vfiprintf_r+0x56>
 800d1c6:	6875      	ldr	r5, [r6, #4]
 800d1c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d1ca:	07d9      	lsls	r1, r3, #31
 800d1cc:	d405      	bmi.n	800d1da <_vfiprintf_r+0x32>
 800d1ce:	89ab      	ldrh	r3, [r5, #12]
 800d1d0:	059a      	lsls	r2, r3, #22
 800d1d2:	d402      	bmi.n	800d1da <_vfiprintf_r+0x32>
 800d1d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d1d6:	f000 fb97 	bl	800d908 <__retarget_lock_acquire_recursive>
 800d1da:	89ab      	ldrh	r3, [r5, #12]
 800d1dc:	071b      	lsls	r3, r3, #28
 800d1de:	d501      	bpl.n	800d1e4 <_vfiprintf_r+0x3c>
 800d1e0:	692b      	ldr	r3, [r5, #16]
 800d1e2:	b9eb      	cbnz	r3, 800d220 <_vfiprintf_r+0x78>
 800d1e4:	4629      	mov	r1, r5
 800d1e6:	4630      	mov	r0, r6
 800d1e8:	f000 f960 	bl	800d4ac <__swsetup_r>
 800d1ec:	b1c0      	cbz	r0, 800d220 <_vfiprintf_r+0x78>
 800d1ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d1f0:	07dc      	lsls	r4, r3, #31
 800d1f2:	d50e      	bpl.n	800d212 <_vfiprintf_r+0x6a>
 800d1f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d1f8:	b01d      	add	sp, #116	; 0x74
 800d1fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1fe:	4b7b      	ldr	r3, [pc, #492]	; (800d3ec <_vfiprintf_r+0x244>)
 800d200:	429d      	cmp	r5, r3
 800d202:	d101      	bne.n	800d208 <_vfiprintf_r+0x60>
 800d204:	68b5      	ldr	r5, [r6, #8]
 800d206:	e7df      	b.n	800d1c8 <_vfiprintf_r+0x20>
 800d208:	4b79      	ldr	r3, [pc, #484]	; (800d3f0 <_vfiprintf_r+0x248>)
 800d20a:	429d      	cmp	r5, r3
 800d20c:	bf08      	it	eq
 800d20e:	68f5      	ldreq	r5, [r6, #12]
 800d210:	e7da      	b.n	800d1c8 <_vfiprintf_r+0x20>
 800d212:	89ab      	ldrh	r3, [r5, #12]
 800d214:	0598      	lsls	r0, r3, #22
 800d216:	d4ed      	bmi.n	800d1f4 <_vfiprintf_r+0x4c>
 800d218:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d21a:	f000 fb76 	bl	800d90a <__retarget_lock_release_recursive>
 800d21e:	e7e9      	b.n	800d1f4 <_vfiprintf_r+0x4c>
 800d220:	2300      	movs	r3, #0
 800d222:	9309      	str	r3, [sp, #36]	; 0x24
 800d224:	2320      	movs	r3, #32
 800d226:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d22a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d22e:	2330      	movs	r3, #48	; 0x30
 800d230:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d3f4 <_vfiprintf_r+0x24c>
 800d234:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d238:	f04f 0901 	mov.w	r9, #1
 800d23c:	4623      	mov	r3, r4
 800d23e:	469a      	mov	sl, r3
 800d240:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d244:	b10a      	cbz	r2, 800d24a <_vfiprintf_r+0xa2>
 800d246:	2a25      	cmp	r2, #37	; 0x25
 800d248:	d1f9      	bne.n	800d23e <_vfiprintf_r+0x96>
 800d24a:	ebba 0b04 	subs.w	fp, sl, r4
 800d24e:	d00b      	beq.n	800d268 <_vfiprintf_r+0xc0>
 800d250:	465b      	mov	r3, fp
 800d252:	4622      	mov	r2, r4
 800d254:	4629      	mov	r1, r5
 800d256:	4630      	mov	r0, r6
 800d258:	f7ff ff94 	bl	800d184 <__sfputs_r>
 800d25c:	3001      	adds	r0, #1
 800d25e:	f000 80aa 	beq.w	800d3b6 <_vfiprintf_r+0x20e>
 800d262:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d264:	445a      	add	r2, fp
 800d266:	9209      	str	r2, [sp, #36]	; 0x24
 800d268:	f89a 3000 	ldrb.w	r3, [sl]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	f000 80a2 	beq.w	800d3b6 <_vfiprintf_r+0x20e>
 800d272:	2300      	movs	r3, #0
 800d274:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d278:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d27c:	f10a 0a01 	add.w	sl, sl, #1
 800d280:	9304      	str	r3, [sp, #16]
 800d282:	9307      	str	r3, [sp, #28]
 800d284:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d288:	931a      	str	r3, [sp, #104]	; 0x68
 800d28a:	4654      	mov	r4, sl
 800d28c:	2205      	movs	r2, #5
 800d28e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d292:	4858      	ldr	r0, [pc, #352]	; (800d3f4 <_vfiprintf_r+0x24c>)
 800d294:	f7f2 ffac 	bl	80001f0 <memchr>
 800d298:	9a04      	ldr	r2, [sp, #16]
 800d29a:	b9d8      	cbnz	r0, 800d2d4 <_vfiprintf_r+0x12c>
 800d29c:	06d1      	lsls	r1, r2, #27
 800d29e:	bf44      	itt	mi
 800d2a0:	2320      	movmi	r3, #32
 800d2a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d2a6:	0713      	lsls	r3, r2, #28
 800d2a8:	bf44      	itt	mi
 800d2aa:	232b      	movmi	r3, #43	; 0x2b
 800d2ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d2b0:	f89a 3000 	ldrb.w	r3, [sl]
 800d2b4:	2b2a      	cmp	r3, #42	; 0x2a
 800d2b6:	d015      	beq.n	800d2e4 <_vfiprintf_r+0x13c>
 800d2b8:	9a07      	ldr	r2, [sp, #28]
 800d2ba:	4654      	mov	r4, sl
 800d2bc:	2000      	movs	r0, #0
 800d2be:	f04f 0c0a 	mov.w	ip, #10
 800d2c2:	4621      	mov	r1, r4
 800d2c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d2c8:	3b30      	subs	r3, #48	; 0x30
 800d2ca:	2b09      	cmp	r3, #9
 800d2cc:	d94e      	bls.n	800d36c <_vfiprintf_r+0x1c4>
 800d2ce:	b1b0      	cbz	r0, 800d2fe <_vfiprintf_r+0x156>
 800d2d0:	9207      	str	r2, [sp, #28]
 800d2d2:	e014      	b.n	800d2fe <_vfiprintf_r+0x156>
 800d2d4:	eba0 0308 	sub.w	r3, r0, r8
 800d2d8:	fa09 f303 	lsl.w	r3, r9, r3
 800d2dc:	4313      	orrs	r3, r2
 800d2de:	9304      	str	r3, [sp, #16]
 800d2e0:	46a2      	mov	sl, r4
 800d2e2:	e7d2      	b.n	800d28a <_vfiprintf_r+0xe2>
 800d2e4:	9b03      	ldr	r3, [sp, #12]
 800d2e6:	1d19      	adds	r1, r3, #4
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	9103      	str	r1, [sp, #12]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	bfbb      	ittet	lt
 800d2f0:	425b      	neglt	r3, r3
 800d2f2:	f042 0202 	orrlt.w	r2, r2, #2
 800d2f6:	9307      	strge	r3, [sp, #28]
 800d2f8:	9307      	strlt	r3, [sp, #28]
 800d2fa:	bfb8      	it	lt
 800d2fc:	9204      	strlt	r2, [sp, #16]
 800d2fe:	7823      	ldrb	r3, [r4, #0]
 800d300:	2b2e      	cmp	r3, #46	; 0x2e
 800d302:	d10c      	bne.n	800d31e <_vfiprintf_r+0x176>
 800d304:	7863      	ldrb	r3, [r4, #1]
 800d306:	2b2a      	cmp	r3, #42	; 0x2a
 800d308:	d135      	bne.n	800d376 <_vfiprintf_r+0x1ce>
 800d30a:	9b03      	ldr	r3, [sp, #12]
 800d30c:	1d1a      	adds	r2, r3, #4
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	9203      	str	r2, [sp, #12]
 800d312:	2b00      	cmp	r3, #0
 800d314:	bfb8      	it	lt
 800d316:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d31a:	3402      	adds	r4, #2
 800d31c:	9305      	str	r3, [sp, #20]
 800d31e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d404 <_vfiprintf_r+0x25c>
 800d322:	7821      	ldrb	r1, [r4, #0]
 800d324:	2203      	movs	r2, #3
 800d326:	4650      	mov	r0, sl
 800d328:	f7f2 ff62 	bl	80001f0 <memchr>
 800d32c:	b140      	cbz	r0, 800d340 <_vfiprintf_r+0x198>
 800d32e:	2340      	movs	r3, #64	; 0x40
 800d330:	eba0 000a 	sub.w	r0, r0, sl
 800d334:	fa03 f000 	lsl.w	r0, r3, r0
 800d338:	9b04      	ldr	r3, [sp, #16]
 800d33a:	4303      	orrs	r3, r0
 800d33c:	3401      	adds	r4, #1
 800d33e:	9304      	str	r3, [sp, #16]
 800d340:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d344:	482c      	ldr	r0, [pc, #176]	; (800d3f8 <_vfiprintf_r+0x250>)
 800d346:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d34a:	2206      	movs	r2, #6
 800d34c:	f7f2 ff50 	bl	80001f0 <memchr>
 800d350:	2800      	cmp	r0, #0
 800d352:	d03f      	beq.n	800d3d4 <_vfiprintf_r+0x22c>
 800d354:	4b29      	ldr	r3, [pc, #164]	; (800d3fc <_vfiprintf_r+0x254>)
 800d356:	bb1b      	cbnz	r3, 800d3a0 <_vfiprintf_r+0x1f8>
 800d358:	9b03      	ldr	r3, [sp, #12]
 800d35a:	3307      	adds	r3, #7
 800d35c:	f023 0307 	bic.w	r3, r3, #7
 800d360:	3308      	adds	r3, #8
 800d362:	9303      	str	r3, [sp, #12]
 800d364:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d366:	443b      	add	r3, r7
 800d368:	9309      	str	r3, [sp, #36]	; 0x24
 800d36a:	e767      	b.n	800d23c <_vfiprintf_r+0x94>
 800d36c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d370:	460c      	mov	r4, r1
 800d372:	2001      	movs	r0, #1
 800d374:	e7a5      	b.n	800d2c2 <_vfiprintf_r+0x11a>
 800d376:	2300      	movs	r3, #0
 800d378:	3401      	adds	r4, #1
 800d37a:	9305      	str	r3, [sp, #20]
 800d37c:	4619      	mov	r1, r3
 800d37e:	f04f 0c0a 	mov.w	ip, #10
 800d382:	4620      	mov	r0, r4
 800d384:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d388:	3a30      	subs	r2, #48	; 0x30
 800d38a:	2a09      	cmp	r2, #9
 800d38c:	d903      	bls.n	800d396 <_vfiprintf_r+0x1ee>
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d0c5      	beq.n	800d31e <_vfiprintf_r+0x176>
 800d392:	9105      	str	r1, [sp, #20]
 800d394:	e7c3      	b.n	800d31e <_vfiprintf_r+0x176>
 800d396:	fb0c 2101 	mla	r1, ip, r1, r2
 800d39a:	4604      	mov	r4, r0
 800d39c:	2301      	movs	r3, #1
 800d39e:	e7f0      	b.n	800d382 <_vfiprintf_r+0x1da>
 800d3a0:	ab03      	add	r3, sp, #12
 800d3a2:	9300      	str	r3, [sp, #0]
 800d3a4:	462a      	mov	r2, r5
 800d3a6:	4b16      	ldr	r3, [pc, #88]	; (800d400 <_vfiprintf_r+0x258>)
 800d3a8:	a904      	add	r1, sp, #16
 800d3aa:	4630      	mov	r0, r6
 800d3ac:	f7fc f83c 	bl	8009428 <_printf_float>
 800d3b0:	4607      	mov	r7, r0
 800d3b2:	1c78      	adds	r0, r7, #1
 800d3b4:	d1d6      	bne.n	800d364 <_vfiprintf_r+0x1bc>
 800d3b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d3b8:	07d9      	lsls	r1, r3, #31
 800d3ba:	d405      	bmi.n	800d3c8 <_vfiprintf_r+0x220>
 800d3bc:	89ab      	ldrh	r3, [r5, #12]
 800d3be:	059a      	lsls	r2, r3, #22
 800d3c0:	d402      	bmi.n	800d3c8 <_vfiprintf_r+0x220>
 800d3c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d3c4:	f000 faa1 	bl	800d90a <__retarget_lock_release_recursive>
 800d3c8:	89ab      	ldrh	r3, [r5, #12]
 800d3ca:	065b      	lsls	r3, r3, #25
 800d3cc:	f53f af12 	bmi.w	800d1f4 <_vfiprintf_r+0x4c>
 800d3d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d3d2:	e711      	b.n	800d1f8 <_vfiprintf_r+0x50>
 800d3d4:	ab03      	add	r3, sp, #12
 800d3d6:	9300      	str	r3, [sp, #0]
 800d3d8:	462a      	mov	r2, r5
 800d3da:	4b09      	ldr	r3, [pc, #36]	; (800d400 <_vfiprintf_r+0x258>)
 800d3dc:	a904      	add	r1, sp, #16
 800d3de:	4630      	mov	r0, r6
 800d3e0:	f7fc fac6 	bl	8009970 <_printf_i>
 800d3e4:	e7e4      	b.n	800d3b0 <_vfiprintf_r+0x208>
 800d3e6:	bf00      	nop
 800d3e8:	0800f024 	.word	0x0800f024
 800d3ec:	0800f044 	.word	0x0800f044
 800d3f0:	0800f004 	.word	0x0800f004
 800d3f4:	0800efb4 	.word	0x0800efb4
 800d3f8:	0800efbe 	.word	0x0800efbe
 800d3fc:	08009429 	.word	0x08009429
 800d400:	0800d185 	.word	0x0800d185
 800d404:	0800efba 	.word	0x0800efba

0800d408 <__swbuf_r>:
 800d408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d40a:	460e      	mov	r6, r1
 800d40c:	4614      	mov	r4, r2
 800d40e:	4605      	mov	r5, r0
 800d410:	b118      	cbz	r0, 800d41a <__swbuf_r+0x12>
 800d412:	6983      	ldr	r3, [r0, #24]
 800d414:	b90b      	cbnz	r3, 800d41a <__swbuf_r+0x12>
 800d416:	f000 f9d9 	bl	800d7cc <__sinit>
 800d41a:	4b21      	ldr	r3, [pc, #132]	; (800d4a0 <__swbuf_r+0x98>)
 800d41c:	429c      	cmp	r4, r3
 800d41e:	d12b      	bne.n	800d478 <__swbuf_r+0x70>
 800d420:	686c      	ldr	r4, [r5, #4]
 800d422:	69a3      	ldr	r3, [r4, #24]
 800d424:	60a3      	str	r3, [r4, #8]
 800d426:	89a3      	ldrh	r3, [r4, #12]
 800d428:	071a      	lsls	r2, r3, #28
 800d42a:	d52f      	bpl.n	800d48c <__swbuf_r+0x84>
 800d42c:	6923      	ldr	r3, [r4, #16]
 800d42e:	b36b      	cbz	r3, 800d48c <__swbuf_r+0x84>
 800d430:	6923      	ldr	r3, [r4, #16]
 800d432:	6820      	ldr	r0, [r4, #0]
 800d434:	1ac0      	subs	r0, r0, r3
 800d436:	6963      	ldr	r3, [r4, #20]
 800d438:	b2f6      	uxtb	r6, r6
 800d43a:	4283      	cmp	r3, r0
 800d43c:	4637      	mov	r7, r6
 800d43e:	dc04      	bgt.n	800d44a <__swbuf_r+0x42>
 800d440:	4621      	mov	r1, r4
 800d442:	4628      	mov	r0, r5
 800d444:	f000 f92e 	bl	800d6a4 <_fflush_r>
 800d448:	bb30      	cbnz	r0, 800d498 <__swbuf_r+0x90>
 800d44a:	68a3      	ldr	r3, [r4, #8]
 800d44c:	3b01      	subs	r3, #1
 800d44e:	60a3      	str	r3, [r4, #8]
 800d450:	6823      	ldr	r3, [r4, #0]
 800d452:	1c5a      	adds	r2, r3, #1
 800d454:	6022      	str	r2, [r4, #0]
 800d456:	701e      	strb	r6, [r3, #0]
 800d458:	6963      	ldr	r3, [r4, #20]
 800d45a:	3001      	adds	r0, #1
 800d45c:	4283      	cmp	r3, r0
 800d45e:	d004      	beq.n	800d46a <__swbuf_r+0x62>
 800d460:	89a3      	ldrh	r3, [r4, #12]
 800d462:	07db      	lsls	r3, r3, #31
 800d464:	d506      	bpl.n	800d474 <__swbuf_r+0x6c>
 800d466:	2e0a      	cmp	r6, #10
 800d468:	d104      	bne.n	800d474 <__swbuf_r+0x6c>
 800d46a:	4621      	mov	r1, r4
 800d46c:	4628      	mov	r0, r5
 800d46e:	f000 f919 	bl	800d6a4 <_fflush_r>
 800d472:	b988      	cbnz	r0, 800d498 <__swbuf_r+0x90>
 800d474:	4638      	mov	r0, r7
 800d476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d478:	4b0a      	ldr	r3, [pc, #40]	; (800d4a4 <__swbuf_r+0x9c>)
 800d47a:	429c      	cmp	r4, r3
 800d47c:	d101      	bne.n	800d482 <__swbuf_r+0x7a>
 800d47e:	68ac      	ldr	r4, [r5, #8]
 800d480:	e7cf      	b.n	800d422 <__swbuf_r+0x1a>
 800d482:	4b09      	ldr	r3, [pc, #36]	; (800d4a8 <__swbuf_r+0xa0>)
 800d484:	429c      	cmp	r4, r3
 800d486:	bf08      	it	eq
 800d488:	68ec      	ldreq	r4, [r5, #12]
 800d48a:	e7ca      	b.n	800d422 <__swbuf_r+0x1a>
 800d48c:	4621      	mov	r1, r4
 800d48e:	4628      	mov	r0, r5
 800d490:	f000 f80c 	bl	800d4ac <__swsetup_r>
 800d494:	2800      	cmp	r0, #0
 800d496:	d0cb      	beq.n	800d430 <__swbuf_r+0x28>
 800d498:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d49c:	e7ea      	b.n	800d474 <__swbuf_r+0x6c>
 800d49e:	bf00      	nop
 800d4a0:	0800f024 	.word	0x0800f024
 800d4a4:	0800f044 	.word	0x0800f044
 800d4a8:	0800f004 	.word	0x0800f004

0800d4ac <__swsetup_r>:
 800d4ac:	4b32      	ldr	r3, [pc, #200]	; (800d578 <__swsetup_r+0xcc>)
 800d4ae:	b570      	push	{r4, r5, r6, lr}
 800d4b0:	681d      	ldr	r5, [r3, #0]
 800d4b2:	4606      	mov	r6, r0
 800d4b4:	460c      	mov	r4, r1
 800d4b6:	b125      	cbz	r5, 800d4c2 <__swsetup_r+0x16>
 800d4b8:	69ab      	ldr	r3, [r5, #24]
 800d4ba:	b913      	cbnz	r3, 800d4c2 <__swsetup_r+0x16>
 800d4bc:	4628      	mov	r0, r5
 800d4be:	f000 f985 	bl	800d7cc <__sinit>
 800d4c2:	4b2e      	ldr	r3, [pc, #184]	; (800d57c <__swsetup_r+0xd0>)
 800d4c4:	429c      	cmp	r4, r3
 800d4c6:	d10f      	bne.n	800d4e8 <__swsetup_r+0x3c>
 800d4c8:	686c      	ldr	r4, [r5, #4]
 800d4ca:	89a3      	ldrh	r3, [r4, #12]
 800d4cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d4d0:	0719      	lsls	r1, r3, #28
 800d4d2:	d42c      	bmi.n	800d52e <__swsetup_r+0x82>
 800d4d4:	06dd      	lsls	r5, r3, #27
 800d4d6:	d411      	bmi.n	800d4fc <__swsetup_r+0x50>
 800d4d8:	2309      	movs	r3, #9
 800d4da:	6033      	str	r3, [r6, #0]
 800d4dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d4e0:	81a3      	strh	r3, [r4, #12]
 800d4e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d4e6:	e03e      	b.n	800d566 <__swsetup_r+0xba>
 800d4e8:	4b25      	ldr	r3, [pc, #148]	; (800d580 <__swsetup_r+0xd4>)
 800d4ea:	429c      	cmp	r4, r3
 800d4ec:	d101      	bne.n	800d4f2 <__swsetup_r+0x46>
 800d4ee:	68ac      	ldr	r4, [r5, #8]
 800d4f0:	e7eb      	b.n	800d4ca <__swsetup_r+0x1e>
 800d4f2:	4b24      	ldr	r3, [pc, #144]	; (800d584 <__swsetup_r+0xd8>)
 800d4f4:	429c      	cmp	r4, r3
 800d4f6:	bf08      	it	eq
 800d4f8:	68ec      	ldreq	r4, [r5, #12]
 800d4fa:	e7e6      	b.n	800d4ca <__swsetup_r+0x1e>
 800d4fc:	0758      	lsls	r0, r3, #29
 800d4fe:	d512      	bpl.n	800d526 <__swsetup_r+0x7a>
 800d500:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d502:	b141      	cbz	r1, 800d516 <__swsetup_r+0x6a>
 800d504:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d508:	4299      	cmp	r1, r3
 800d50a:	d002      	beq.n	800d512 <__swsetup_r+0x66>
 800d50c:	4630      	mov	r0, r6
 800d50e:	f7ff fb27 	bl	800cb60 <_free_r>
 800d512:	2300      	movs	r3, #0
 800d514:	6363      	str	r3, [r4, #52]	; 0x34
 800d516:	89a3      	ldrh	r3, [r4, #12]
 800d518:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d51c:	81a3      	strh	r3, [r4, #12]
 800d51e:	2300      	movs	r3, #0
 800d520:	6063      	str	r3, [r4, #4]
 800d522:	6923      	ldr	r3, [r4, #16]
 800d524:	6023      	str	r3, [r4, #0]
 800d526:	89a3      	ldrh	r3, [r4, #12]
 800d528:	f043 0308 	orr.w	r3, r3, #8
 800d52c:	81a3      	strh	r3, [r4, #12]
 800d52e:	6923      	ldr	r3, [r4, #16]
 800d530:	b94b      	cbnz	r3, 800d546 <__swsetup_r+0x9a>
 800d532:	89a3      	ldrh	r3, [r4, #12]
 800d534:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d538:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d53c:	d003      	beq.n	800d546 <__swsetup_r+0x9a>
 800d53e:	4621      	mov	r1, r4
 800d540:	4630      	mov	r0, r6
 800d542:	f000 fa09 	bl	800d958 <__smakebuf_r>
 800d546:	89a0      	ldrh	r0, [r4, #12]
 800d548:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d54c:	f010 0301 	ands.w	r3, r0, #1
 800d550:	d00a      	beq.n	800d568 <__swsetup_r+0xbc>
 800d552:	2300      	movs	r3, #0
 800d554:	60a3      	str	r3, [r4, #8]
 800d556:	6963      	ldr	r3, [r4, #20]
 800d558:	425b      	negs	r3, r3
 800d55a:	61a3      	str	r3, [r4, #24]
 800d55c:	6923      	ldr	r3, [r4, #16]
 800d55e:	b943      	cbnz	r3, 800d572 <__swsetup_r+0xc6>
 800d560:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d564:	d1ba      	bne.n	800d4dc <__swsetup_r+0x30>
 800d566:	bd70      	pop	{r4, r5, r6, pc}
 800d568:	0781      	lsls	r1, r0, #30
 800d56a:	bf58      	it	pl
 800d56c:	6963      	ldrpl	r3, [r4, #20]
 800d56e:	60a3      	str	r3, [r4, #8]
 800d570:	e7f4      	b.n	800d55c <__swsetup_r+0xb0>
 800d572:	2000      	movs	r0, #0
 800d574:	e7f7      	b.n	800d566 <__swsetup_r+0xba>
 800d576:	bf00      	nop
 800d578:	2000001c 	.word	0x2000001c
 800d57c:	0800f024 	.word	0x0800f024
 800d580:	0800f044 	.word	0x0800f044
 800d584:	0800f004 	.word	0x0800f004

0800d588 <abort>:
 800d588:	b508      	push	{r3, lr}
 800d58a:	2006      	movs	r0, #6
 800d58c:	f000 fa54 	bl	800da38 <raise>
 800d590:	2001      	movs	r0, #1
 800d592:	f7f5 fd8b 	bl	80030ac <_exit>
	...

0800d598 <__sflush_r>:
 800d598:	898a      	ldrh	r2, [r1, #12]
 800d59a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d59e:	4605      	mov	r5, r0
 800d5a0:	0710      	lsls	r0, r2, #28
 800d5a2:	460c      	mov	r4, r1
 800d5a4:	d458      	bmi.n	800d658 <__sflush_r+0xc0>
 800d5a6:	684b      	ldr	r3, [r1, #4]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	dc05      	bgt.n	800d5b8 <__sflush_r+0x20>
 800d5ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	dc02      	bgt.n	800d5b8 <__sflush_r+0x20>
 800d5b2:	2000      	movs	r0, #0
 800d5b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d5ba:	2e00      	cmp	r6, #0
 800d5bc:	d0f9      	beq.n	800d5b2 <__sflush_r+0x1a>
 800d5be:	2300      	movs	r3, #0
 800d5c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d5c4:	682f      	ldr	r7, [r5, #0]
 800d5c6:	602b      	str	r3, [r5, #0]
 800d5c8:	d032      	beq.n	800d630 <__sflush_r+0x98>
 800d5ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d5cc:	89a3      	ldrh	r3, [r4, #12]
 800d5ce:	075a      	lsls	r2, r3, #29
 800d5d0:	d505      	bpl.n	800d5de <__sflush_r+0x46>
 800d5d2:	6863      	ldr	r3, [r4, #4]
 800d5d4:	1ac0      	subs	r0, r0, r3
 800d5d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d5d8:	b10b      	cbz	r3, 800d5de <__sflush_r+0x46>
 800d5da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d5dc:	1ac0      	subs	r0, r0, r3
 800d5de:	2300      	movs	r3, #0
 800d5e0:	4602      	mov	r2, r0
 800d5e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d5e4:	6a21      	ldr	r1, [r4, #32]
 800d5e6:	4628      	mov	r0, r5
 800d5e8:	47b0      	blx	r6
 800d5ea:	1c43      	adds	r3, r0, #1
 800d5ec:	89a3      	ldrh	r3, [r4, #12]
 800d5ee:	d106      	bne.n	800d5fe <__sflush_r+0x66>
 800d5f0:	6829      	ldr	r1, [r5, #0]
 800d5f2:	291d      	cmp	r1, #29
 800d5f4:	d82c      	bhi.n	800d650 <__sflush_r+0xb8>
 800d5f6:	4a2a      	ldr	r2, [pc, #168]	; (800d6a0 <__sflush_r+0x108>)
 800d5f8:	40ca      	lsrs	r2, r1
 800d5fa:	07d6      	lsls	r6, r2, #31
 800d5fc:	d528      	bpl.n	800d650 <__sflush_r+0xb8>
 800d5fe:	2200      	movs	r2, #0
 800d600:	6062      	str	r2, [r4, #4]
 800d602:	04d9      	lsls	r1, r3, #19
 800d604:	6922      	ldr	r2, [r4, #16]
 800d606:	6022      	str	r2, [r4, #0]
 800d608:	d504      	bpl.n	800d614 <__sflush_r+0x7c>
 800d60a:	1c42      	adds	r2, r0, #1
 800d60c:	d101      	bne.n	800d612 <__sflush_r+0x7a>
 800d60e:	682b      	ldr	r3, [r5, #0]
 800d610:	b903      	cbnz	r3, 800d614 <__sflush_r+0x7c>
 800d612:	6560      	str	r0, [r4, #84]	; 0x54
 800d614:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d616:	602f      	str	r7, [r5, #0]
 800d618:	2900      	cmp	r1, #0
 800d61a:	d0ca      	beq.n	800d5b2 <__sflush_r+0x1a>
 800d61c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d620:	4299      	cmp	r1, r3
 800d622:	d002      	beq.n	800d62a <__sflush_r+0x92>
 800d624:	4628      	mov	r0, r5
 800d626:	f7ff fa9b 	bl	800cb60 <_free_r>
 800d62a:	2000      	movs	r0, #0
 800d62c:	6360      	str	r0, [r4, #52]	; 0x34
 800d62e:	e7c1      	b.n	800d5b4 <__sflush_r+0x1c>
 800d630:	6a21      	ldr	r1, [r4, #32]
 800d632:	2301      	movs	r3, #1
 800d634:	4628      	mov	r0, r5
 800d636:	47b0      	blx	r6
 800d638:	1c41      	adds	r1, r0, #1
 800d63a:	d1c7      	bne.n	800d5cc <__sflush_r+0x34>
 800d63c:	682b      	ldr	r3, [r5, #0]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d0c4      	beq.n	800d5cc <__sflush_r+0x34>
 800d642:	2b1d      	cmp	r3, #29
 800d644:	d001      	beq.n	800d64a <__sflush_r+0xb2>
 800d646:	2b16      	cmp	r3, #22
 800d648:	d101      	bne.n	800d64e <__sflush_r+0xb6>
 800d64a:	602f      	str	r7, [r5, #0]
 800d64c:	e7b1      	b.n	800d5b2 <__sflush_r+0x1a>
 800d64e:	89a3      	ldrh	r3, [r4, #12]
 800d650:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d654:	81a3      	strh	r3, [r4, #12]
 800d656:	e7ad      	b.n	800d5b4 <__sflush_r+0x1c>
 800d658:	690f      	ldr	r7, [r1, #16]
 800d65a:	2f00      	cmp	r7, #0
 800d65c:	d0a9      	beq.n	800d5b2 <__sflush_r+0x1a>
 800d65e:	0793      	lsls	r3, r2, #30
 800d660:	680e      	ldr	r6, [r1, #0]
 800d662:	bf08      	it	eq
 800d664:	694b      	ldreq	r3, [r1, #20]
 800d666:	600f      	str	r7, [r1, #0]
 800d668:	bf18      	it	ne
 800d66a:	2300      	movne	r3, #0
 800d66c:	eba6 0807 	sub.w	r8, r6, r7
 800d670:	608b      	str	r3, [r1, #8]
 800d672:	f1b8 0f00 	cmp.w	r8, #0
 800d676:	dd9c      	ble.n	800d5b2 <__sflush_r+0x1a>
 800d678:	6a21      	ldr	r1, [r4, #32]
 800d67a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d67c:	4643      	mov	r3, r8
 800d67e:	463a      	mov	r2, r7
 800d680:	4628      	mov	r0, r5
 800d682:	47b0      	blx	r6
 800d684:	2800      	cmp	r0, #0
 800d686:	dc06      	bgt.n	800d696 <__sflush_r+0xfe>
 800d688:	89a3      	ldrh	r3, [r4, #12]
 800d68a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d68e:	81a3      	strh	r3, [r4, #12]
 800d690:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d694:	e78e      	b.n	800d5b4 <__sflush_r+0x1c>
 800d696:	4407      	add	r7, r0
 800d698:	eba8 0800 	sub.w	r8, r8, r0
 800d69c:	e7e9      	b.n	800d672 <__sflush_r+0xda>
 800d69e:	bf00      	nop
 800d6a0:	20400001 	.word	0x20400001

0800d6a4 <_fflush_r>:
 800d6a4:	b538      	push	{r3, r4, r5, lr}
 800d6a6:	690b      	ldr	r3, [r1, #16]
 800d6a8:	4605      	mov	r5, r0
 800d6aa:	460c      	mov	r4, r1
 800d6ac:	b913      	cbnz	r3, 800d6b4 <_fflush_r+0x10>
 800d6ae:	2500      	movs	r5, #0
 800d6b0:	4628      	mov	r0, r5
 800d6b2:	bd38      	pop	{r3, r4, r5, pc}
 800d6b4:	b118      	cbz	r0, 800d6be <_fflush_r+0x1a>
 800d6b6:	6983      	ldr	r3, [r0, #24]
 800d6b8:	b90b      	cbnz	r3, 800d6be <_fflush_r+0x1a>
 800d6ba:	f000 f887 	bl	800d7cc <__sinit>
 800d6be:	4b14      	ldr	r3, [pc, #80]	; (800d710 <_fflush_r+0x6c>)
 800d6c0:	429c      	cmp	r4, r3
 800d6c2:	d11b      	bne.n	800d6fc <_fflush_r+0x58>
 800d6c4:	686c      	ldr	r4, [r5, #4]
 800d6c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d0ef      	beq.n	800d6ae <_fflush_r+0xa>
 800d6ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d6d0:	07d0      	lsls	r0, r2, #31
 800d6d2:	d404      	bmi.n	800d6de <_fflush_r+0x3a>
 800d6d4:	0599      	lsls	r1, r3, #22
 800d6d6:	d402      	bmi.n	800d6de <_fflush_r+0x3a>
 800d6d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d6da:	f000 f915 	bl	800d908 <__retarget_lock_acquire_recursive>
 800d6de:	4628      	mov	r0, r5
 800d6e0:	4621      	mov	r1, r4
 800d6e2:	f7ff ff59 	bl	800d598 <__sflush_r>
 800d6e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d6e8:	07da      	lsls	r2, r3, #31
 800d6ea:	4605      	mov	r5, r0
 800d6ec:	d4e0      	bmi.n	800d6b0 <_fflush_r+0xc>
 800d6ee:	89a3      	ldrh	r3, [r4, #12]
 800d6f0:	059b      	lsls	r3, r3, #22
 800d6f2:	d4dd      	bmi.n	800d6b0 <_fflush_r+0xc>
 800d6f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d6f6:	f000 f908 	bl	800d90a <__retarget_lock_release_recursive>
 800d6fa:	e7d9      	b.n	800d6b0 <_fflush_r+0xc>
 800d6fc:	4b05      	ldr	r3, [pc, #20]	; (800d714 <_fflush_r+0x70>)
 800d6fe:	429c      	cmp	r4, r3
 800d700:	d101      	bne.n	800d706 <_fflush_r+0x62>
 800d702:	68ac      	ldr	r4, [r5, #8]
 800d704:	e7df      	b.n	800d6c6 <_fflush_r+0x22>
 800d706:	4b04      	ldr	r3, [pc, #16]	; (800d718 <_fflush_r+0x74>)
 800d708:	429c      	cmp	r4, r3
 800d70a:	bf08      	it	eq
 800d70c:	68ec      	ldreq	r4, [r5, #12]
 800d70e:	e7da      	b.n	800d6c6 <_fflush_r+0x22>
 800d710:	0800f024 	.word	0x0800f024
 800d714:	0800f044 	.word	0x0800f044
 800d718:	0800f004 	.word	0x0800f004

0800d71c <std>:
 800d71c:	2300      	movs	r3, #0
 800d71e:	b510      	push	{r4, lr}
 800d720:	4604      	mov	r4, r0
 800d722:	e9c0 3300 	strd	r3, r3, [r0]
 800d726:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d72a:	6083      	str	r3, [r0, #8]
 800d72c:	8181      	strh	r1, [r0, #12]
 800d72e:	6643      	str	r3, [r0, #100]	; 0x64
 800d730:	81c2      	strh	r2, [r0, #14]
 800d732:	6183      	str	r3, [r0, #24]
 800d734:	4619      	mov	r1, r3
 800d736:	2208      	movs	r2, #8
 800d738:	305c      	adds	r0, #92	; 0x5c
 800d73a:	f7fb fdcd 	bl	80092d8 <memset>
 800d73e:	4b05      	ldr	r3, [pc, #20]	; (800d754 <std+0x38>)
 800d740:	6263      	str	r3, [r4, #36]	; 0x24
 800d742:	4b05      	ldr	r3, [pc, #20]	; (800d758 <std+0x3c>)
 800d744:	62a3      	str	r3, [r4, #40]	; 0x28
 800d746:	4b05      	ldr	r3, [pc, #20]	; (800d75c <std+0x40>)
 800d748:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d74a:	4b05      	ldr	r3, [pc, #20]	; (800d760 <std+0x44>)
 800d74c:	6224      	str	r4, [r4, #32]
 800d74e:	6323      	str	r3, [r4, #48]	; 0x30
 800d750:	bd10      	pop	{r4, pc}
 800d752:	bf00      	nop
 800d754:	0800da71 	.word	0x0800da71
 800d758:	0800da93 	.word	0x0800da93
 800d75c:	0800dacb 	.word	0x0800dacb
 800d760:	0800daef 	.word	0x0800daef

0800d764 <_cleanup_r>:
 800d764:	4901      	ldr	r1, [pc, #4]	; (800d76c <_cleanup_r+0x8>)
 800d766:	f000 b8af 	b.w	800d8c8 <_fwalk_reent>
 800d76a:	bf00      	nop
 800d76c:	0800d6a5 	.word	0x0800d6a5

0800d770 <__sfmoreglue>:
 800d770:	b570      	push	{r4, r5, r6, lr}
 800d772:	2268      	movs	r2, #104	; 0x68
 800d774:	1e4d      	subs	r5, r1, #1
 800d776:	4355      	muls	r5, r2
 800d778:	460e      	mov	r6, r1
 800d77a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d77e:	f7ff fa5b 	bl	800cc38 <_malloc_r>
 800d782:	4604      	mov	r4, r0
 800d784:	b140      	cbz	r0, 800d798 <__sfmoreglue+0x28>
 800d786:	2100      	movs	r1, #0
 800d788:	e9c0 1600 	strd	r1, r6, [r0]
 800d78c:	300c      	adds	r0, #12
 800d78e:	60a0      	str	r0, [r4, #8]
 800d790:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d794:	f7fb fda0 	bl	80092d8 <memset>
 800d798:	4620      	mov	r0, r4
 800d79a:	bd70      	pop	{r4, r5, r6, pc}

0800d79c <__sfp_lock_acquire>:
 800d79c:	4801      	ldr	r0, [pc, #4]	; (800d7a4 <__sfp_lock_acquire+0x8>)
 800d79e:	f000 b8b3 	b.w	800d908 <__retarget_lock_acquire_recursive>
 800d7a2:	bf00      	nop
 800d7a4:	20001e41 	.word	0x20001e41

0800d7a8 <__sfp_lock_release>:
 800d7a8:	4801      	ldr	r0, [pc, #4]	; (800d7b0 <__sfp_lock_release+0x8>)
 800d7aa:	f000 b8ae 	b.w	800d90a <__retarget_lock_release_recursive>
 800d7ae:	bf00      	nop
 800d7b0:	20001e41 	.word	0x20001e41

0800d7b4 <__sinit_lock_acquire>:
 800d7b4:	4801      	ldr	r0, [pc, #4]	; (800d7bc <__sinit_lock_acquire+0x8>)
 800d7b6:	f000 b8a7 	b.w	800d908 <__retarget_lock_acquire_recursive>
 800d7ba:	bf00      	nop
 800d7bc:	20001e42 	.word	0x20001e42

0800d7c0 <__sinit_lock_release>:
 800d7c0:	4801      	ldr	r0, [pc, #4]	; (800d7c8 <__sinit_lock_release+0x8>)
 800d7c2:	f000 b8a2 	b.w	800d90a <__retarget_lock_release_recursive>
 800d7c6:	bf00      	nop
 800d7c8:	20001e42 	.word	0x20001e42

0800d7cc <__sinit>:
 800d7cc:	b510      	push	{r4, lr}
 800d7ce:	4604      	mov	r4, r0
 800d7d0:	f7ff fff0 	bl	800d7b4 <__sinit_lock_acquire>
 800d7d4:	69a3      	ldr	r3, [r4, #24]
 800d7d6:	b11b      	cbz	r3, 800d7e0 <__sinit+0x14>
 800d7d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7dc:	f7ff bff0 	b.w	800d7c0 <__sinit_lock_release>
 800d7e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d7e4:	6523      	str	r3, [r4, #80]	; 0x50
 800d7e6:	4b13      	ldr	r3, [pc, #76]	; (800d834 <__sinit+0x68>)
 800d7e8:	4a13      	ldr	r2, [pc, #76]	; (800d838 <__sinit+0x6c>)
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	62a2      	str	r2, [r4, #40]	; 0x28
 800d7ee:	42a3      	cmp	r3, r4
 800d7f0:	bf04      	itt	eq
 800d7f2:	2301      	moveq	r3, #1
 800d7f4:	61a3      	streq	r3, [r4, #24]
 800d7f6:	4620      	mov	r0, r4
 800d7f8:	f000 f820 	bl	800d83c <__sfp>
 800d7fc:	6060      	str	r0, [r4, #4]
 800d7fe:	4620      	mov	r0, r4
 800d800:	f000 f81c 	bl	800d83c <__sfp>
 800d804:	60a0      	str	r0, [r4, #8]
 800d806:	4620      	mov	r0, r4
 800d808:	f000 f818 	bl	800d83c <__sfp>
 800d80c:	2200      	movs	r2, #0
 800d80e:	60e0      	str	r0, [r4, #12]
 800d810:	2104      	movs	r1, #4
 800d812:	6860      	ldr	r0, [r4, #4]
 800d814:	f7ff ff82 	bl	800d71c <std>
 800d818:	68a0      	ldr	r0, [r4, #8]
 800d81a:	2201      	movs	r2, #1
 800d81c:	2109      	movs	r1, #9
 800d81e:	f7ff ff7d 	bl	800d71c <std>
 800d822:	68e0      	ldr	r0, [r4, #12]
 800d824:	2202      	movs	r2, #2
 800d826:	2112      	movs	r1, #18
 800d828:	f7ff ff78 	bl	800d71c <std>
 800d82c:	2301      	movs	r3, #1
 800d82e:	61a3      	str	r3, [r4, #24]
 800d830:	e7d2      	b.n	800d7d8 <__sinit+0xc>
 800d832:	bf00      	nop
 800d834:	0800ebbc 	.word	0x0800ebbc
 800d838:	0800d765 	.word	0x0800d765

0800d83c <__sfp>:
 800d83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d83e:	4607      	mov	r7, r0
 800d840:	f7ff ffac 	bl	800d79c <__sfp_lock_acquire>
 800d844:	4b1e      	ldr	r3, [pc, #120]	; (800d8c0 <__sfp+0x84>)
 800d846:	681e      	ldr	r6, [r3, #0]
 800d848:	69b3      	ldr	r3, [r6, #24]
 800d84a:	b913      	cbnz	r3, 800d852 <__sfp+0x16>
 800d84c:	4630      	mov	r0, r6
 800d84e:	f7ff ffbd 	bl	800d7cc <__sinit>
 800d852:	3648      	adds	r6, #72	; 0x48
 800d854:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d858:	3b01      	subs	r3, #1
 800d85a:	d503      	bpl.n	800d864 <__sfp+0x28>
 800d85c:	6833      	ldr	r3, [r6, #0]
 800d85e:	b30b      	cbz	r3, 800d8a4 <__sfp+0x68>
 800d860:	6836      	ldr	r6, [r6, #0]
 800d862:	e7f7      	b.n	800d854 <__sfp+0x18>
 800d864:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d868:	b9d5      	cbnz	r5, 800d8a0 <__sfp+0x64>
 800d86a:	4b16      	ldr	r3, [pc, #88]	; (800d8c4 <__sfp+0x88>)
 800d86c:	60e3      	str	r3, [r4, #12]
 800d86e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d872:	6665      	str	r5, [r4, #100]	; 0x64
 800d874:	f000 f847 	bl	800d906 <__retarget_lock_init_recursive>
 800d878:	f7ff ff96 	bl	800d7a8 <__sfp_lock_release>
 800d87c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d880:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d884:	6025      	str	r5, [r4, #0]
 800d886:	61a5      	str	r5, [r4, #24]
 800d888:	2208      	movs	r2, #8
 800d88a:	4629      	mov	r1, r5
 800d88c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d890:	f7fb fd22 	bl	80092d8 <memset>
 800d894:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d898:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d89c:	4620      	mov	r0, r4
 800d89e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8a0:	3468      	adds	r4, #104	; 0x68
 800d8a2:	e7d9      	b.n	800d858 <__sfp+0x1c>
 800d8a4:	2104      	movs	r1, #4
 800d8a6:	4638      	mov	r0, r7
 800d8a8:	f7ff ff62 	bl	800d770 <__sfmoreglue>
 800d8ac:	4604      	mov	r4, r0
 800d8ae:	6030      	str	r0, [r6, #0]
 800d8b0:	2800      	cmp	r0, #0
 800d8b2:	d1d5      	bne.n	800d860 <__sfp+0x24>
 800d8b4:	f7ff ff78 	bl	800d7a8 <__sfp_lock_release>
 800d8b8:	230c      	movs	r3, #12
 800d8ba:	603b      	str	r3, [r7, #0]
 800d8bc:	e7ee      	b.n	800d89c <__sfp+0x60>
 800d8be:	bf00      	nop
 800d8c0:	0800ebbc 	.word	0x0800ebbc
 800d8c4:	ffff0001 	.word	0xffff0001

0800d8c8 <_fwalk_reent>:
 800d8c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d8cc:	4606      	mov	r6, r0
 800d8ce:	4688      	mov	r8, r1
 800d8d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d8d4:	2700      	movs	r7, #0
 800d8d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d8da:	f1b9 0901 	subs.w	r9, r9, #1
 800d8de:	d505      	bpl.n	800d8ec <_fwalk_reent+0x24>
 800d8e0:	6824      	ldr	r4, [r4, #0]
 800d8e2:	2c00      	cmp	r4, #0
 800d8e4:	d1f7      	bne.n	800d8d6 <_fwalk_reent+0xe>
 800d8e6:	4638      	mov	r0, r7
 800d8e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8ec:	89ab      	ldrh	r3, [r5, #12]
 800d8ee:	2b01      	cmp	r3, #1
 800d8f0:	d907      	bls.n	800d902 <_fwalk_reent+0x3a>
 800d8f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d8f6:	3301      	adds	r3, #1
 800d8f8:	d003      	beq.n	800d902 <_fwalk_reent+0x3a>
 800d8fa:	4629      	mov	r1, r5
 800d8fc:	4630      	mov	r0, r6
 800d8fe:	47c0      	blx	r8
 800d900:	4307      	orrs	r7, r0
 800d902:	3568      	adds	r5, #104	; 0x68
 800d904:	e7e9      	b.n	800d8da <_fwalk_reent+0x12>

0800d906 <__retarget_lock_init_recursive>:
 800d906:	4770      	bx	lr

0800d908 <__retarget_lock_acquire_recursive>:
 800d908:	4770      	bx	lr

0800d90a <__retarget_lock_release_recursive>:
 800d90a:	4770      	bx	lr

0800d90c <__swhatbuf_r>:
 800d90c:	b570      	push	{r4, r5, r6, lr}
 800d90e:	460e      	mov	r6, r1
 800d910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d914:	2900      	cmp	r1, #0
 800d916:	b096      	sub	sp, #88	; 0x58
 800d918:	4614      	mov	r4, r2
 800d91a:	461d      	mov	r5, r3
 800d91c:	da08      	bge.n	800d930 <__swhatbuf_r+0x24>
 800d91e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d922:	2200      	movs	r2, #0
 800d924:	602a      	str	r2, [r5, #0]
 800d926:	061a      	lsls	r2, r3, #24
 800d928:	d410      	bmi.n	800d94c <__swhatbuf_r+0x40>
 800d92a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d92e:	e00e      	b.n	800d94e <__swhatbuf_r+0x42>
 800d930:	466a      	mov	r2, sp
 800d932:	f000 f903 	bl	800db3c <_fstat_r>
 800d936:	2800      	cmp	r0, #0
 800d938:	dbf1      	blt.n	800d91e <__swhatbuf_r+0x12>
 800d93a:	9a01      	ldr	r2, [sp, #4]
 800d93c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d940:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d944:	425a      	negs	r2, r3
 800d946:	415a      	adcs	r2, r3
 800d948:	602a      	str	r2, [r5, #0]
 800d94a:	e7ee      	b.n	800d92a <__swhatbuf_r+0x1e>
 800d94c:	2340      	movs	r3, #64	; 0x40
 800d94e:	2000      	movs	r0, #0
 800d950:	6023      	str	r3, [r4, #0]
 800d952:	b016      	add	sp, #88	; 0x58
 800d954:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d958 <__smakebuf_r>:
 800d958:	898b      	ldrh	r3, [r1, #12]
 800d95a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d95c:	079d      	lsls	r5, r3, #30
 800d95e:	4606      	mov	r6, r0
 800d960:	460c      	mov	r4, r1
 800d962:	d507      	bpl.n	800d974 <__smakebuf_r+0x1c>
 800d964:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d968:	6023      	str	r3, [r4, #0]
 800d96a:	6123      	str	r3, [r4, #16]
 800d96c:	2301      	movs	r3, #1
 800d96e:	6163      	str	r3, [r4, #20]
 800d970:	b002      	add	sp, #8
 800d972:	bd70      	pop	{r4, r5, r6, pc}
 800d974:	ab01      	add	r3, sp, #4
 800d976:	466a      	mov	r2, sp
 800d978:	f7ff ffc8 	bl	800d90c <__swhatbuf_r>
 800d97c:	9900      	ldr	r1, [sp, #0]
 800d97e:	4605      	mov	r5, r0
 800d980:	4630      	mov	r0, r6
 800d982:	f7ff f959 	bl	800cc38 <_malloc_r>
 800d986:	b948      	cbnz	r0, 800d99c <__smakebuf_r+0x44>
 800d988:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d98c:	059a      	lsls	r2, r3, #22
 800d98e:	d4ef      	bmi.n	800d970 <__smakebuf_r+0x18>
 800d990:	f023 0303 	bic.w	r3, r3, #3
 800d994:	f043 0302 	orr.w	r3, r3, #2
 800d998:	81a3      	strh	r3, [r4, #12]
 800d99a:	e7e3      	b.n	800d964 <__smakebuf_r+0xc>
 800d99c:	4b0d      	ldr	r3, [pc, #52]	; (800d9d4 <__smakebuf_r+0x7c>)
 800d99e:	62b3      	str	r3, [r6, #40]	; 0x28
 800d9a0:	89a3      	ldrh	r3, [r4, #12]
 800d9a2:	6020      	str	r0, [r4, #0]
 800d9a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9a8:	81a3      	strh	r3, [r4, #12]
 800d9aa:	9b00      	ldr	r3, [sp, #0]
 800d9ac:	6163      	str	r3, [r4, #20]
 800d9ae:	9b01      	ldr	r3, [sp, #4]
 800d9b0:	6120      	str	r0, [r4, #16]
 800d9b2:	b15b      	cbz	r3, 800d9cc <__smakebuf_r+0x74>
 800d9b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d9b8:	4630      	mov	r0, r6
 800d9ba:	f000 f8d1 	bl	800db60 <_isatty_r>
 800d9be:	b128      	cbz	r0, 800d9cc <__smakebuf_r+0x74>
 800d9c0:	89a3      	ldrh	r3, [r4, #12]
 800d9c2:	f023 0303 	bic.w	r3, r3, #3
 800d9c6:	f043 0301 	orr.w	r3, r3, #1
 800d9ca:	81a3      	strh	r3, [r4, #12]
 800d9cc:	89a0      	ldrh	r0, [r4, #12]
 800d9ce:	4305      	orrs	r5, r0
 800d9d0:	81a5      	strh	r5, [r4, #12]
 800d9d2:	e7cd      	b.n	800d970 <__smakebuf_r+0x18>
 800d9d4:	0800d765 	.word	0x0800d765

0800d9d8 <_malloc_usable_size_r>:
 800d9d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d9dc:	1f18      	subs	r0, r3, #4
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	bfbc      	itt	lt
 800d9e2:	580b      	ldrlt	r3, [r1, r0]
 800d9e4:	18c0      	addlt	r0, r0, r3
 800d9e6:	4770      	bx	lr

0800d9e8 <_raise_r>:
 800d9e8:	291f      	cmp	r1, #31
 800d9ea:	b538      	push	{r3, r4, r5, lr}
 800d9ec:	4604      	mov	r4, r0
 800d9ee:	460d      	mov	r5, r1
 800d9f0:	d904      	bls.n	800d9fc <_raise_r+0x14>
 800d9f2:	2316      	movs	r3, #22
 800d9f4:	6003      	str	r3, [r0, #0]
 800d9f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d9fa:	bd38      	pop	{r3, r4, r5, pc}
 800d9fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d9fe:	b112      	cbz	r2, 800da06 <_raise_r+0x1e>
 800da00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800da04:	b94b      	cbnz	r3, 800da1a <_raise_r+0x32>
 800da06:	4620      	mov	r0, r4
 800da08:	f000 f830 	bl	800da6c <_getpid_r>
 800da0c:	462a      	mov	r2, r5
 800da0e:	4601      	mov	r1, r0
 800da10:	4620      	mov	r0, r4
 800da12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da16:	f000 b817 	b.w	800da48 <_kill_r>
 800da1a:	2b01      	cmp	r3, #1
 800da1c:	d00a      	beq.n	800da34 <_raise_r+0x4c>
 800da1e:	1c59      	adds	r1, r3, #1
 800da20:	d103      	bne.n	800da2a <_raise_r+0x42>
 800da22:	2316      	movs	r3, #22
 800da24:	6003      	str	r3, [r0, #0]
 800da26:	2001      	movs	r0, #1
 800da28:	e7e7      	b.n	800d9fa <_raise_r+0x12>
 800da2a:	2400      	movs	r4, #0
 800da2c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800da30:	4628      	mov	r0, r5
 800da32:	4798      	blx	r3
 800da34:	2000      	movs	r0, #0
 800da36:	e7e0      	b.n	800d9fa <_raise_r+0x12>

0800da38 <raise>:
 800da38:	4b02      	ldr	r3, [pc, #8]	; (800da44 <raise+0xc>)
 800da3a:	4601      	mov	r1, r0
 800da3c:	6818      	ldr	r0, [r3, #0]
 800da3e:	f7ff bfd3 	b.w	800d9e8 <_raise_r>
 800da42:	bf00      	nop
 800da44:	2000001c 	.word	0x2000001c

0800da48 <_kill_r>:
 800da48:	b538      	push	{r3, r4, r5, lr}
 800da4a:	4d07      	ldr	r5, [pc, #28]	; (800da68 <_kill_r+0x20>)
 800da4c:	2300      	movs	r3, #0
 800da4e:	4604      	mov	r4, r0
 800da50:	4608      	mov	r0, r1
 800da52:	4611      	mov	r1, r2
 800da54:	602b      	str	r3, [r5, #0]
 800da56:	f7f5 fb19 	bl	800308c <_kill>
 800da5a:	1c43      	adds	r3, r0, #1
 800da5c:	d102      	bne.n	800da64 <_kill_r+0x1c>
 800da5e:	682b      	ldr	r3, [r5, #0]
 800da60:	b103      	cbz	r3, 800da64 <_kill_r+0x1c>
 800da62:	6023      	str	r3, [r4, #0]
 800da64:	bd38      	pop	{r3, r4, r5, pc}
 800da66:	bf00      	nop
 800da68:	20001e3c 	.word	0x20001e3c

0800da6c <_getpid_r>:
 800da6c:	f7f5 bb06 	b.w	800307c <_getpid>

0800da70 <__sread>:
 800da70:	b510      	push	{r4, lr}
 800da72:	460c      	mov	r4, r1
 800da74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da78:	f000 f894 	bl	800dba4 <_read_r>
 800da7c:	2800      	cmp	r0, #0
 800da7e:	bfab      	itete	ge
 800da80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800da82:	89a3      	ldrhlt	r3, [r4, #12]
 800da84:	181b      	addge	r3, r3, r0
 800da86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800da8a:	bfac      	ite	ge
 800da8c:	6563      	strge	r3, [r4, #84]	; 0x54
 800da8e:	81a3      	strhlt	r3, [r4, #12]
 800da90:	bd10      	pop	{r4, pc}

0800da92 <__swrite>:
 800da92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da96:	461f      	mov	r7, r3
 800da98:	898b      	ldrh	r3, [r1, #12]
 800da9a:	05db      	lsls	r3, r3, #23
 800da9c:	4605      	mov	r5, r0
 800da9e:	460c      	mov	r4, r1
 800daa0:	4616      	mov	r6, r2
 800daa2:	d505      	bpl.n	800dab0 <__swrite+0x1e>
 800daa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800daa8:	2302      	movs	r3, #2
 800daaa:	2200      	movs	r2, #0
 800daac:	f000 f868 	bl	800db80 <_lseek_r>
 800dab0:	89a3      	ldrh	r3, [r4, #12]
 800dab2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dab6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800daba:	81a3      	strh	r3, [r4, #12]
 800dabc:	4632      	mov	r2, r6
 800dabe:	463b      	mov	r3, r7
 800dac0:	4628      	mov	r0, r5
 800dac2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dac6:	f000 b817 	b.w	800daf8 <_write_r>

0800daca <__sseek>:
 800daca:	b510      	push	{r4, lr}
 800dacc:	460c      	mov	r4, r1
 800dace:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dad2:	f000 f855 	bl	800db80 <_lseek_r>
 800dad6:	1c43      	adds	r3, r0, #1
 800dad8:	89a3      	ldrh	r3, [r4, #12]
 800dada:	bf15      	itete	ne
 800dadc:	6560      	strne	r0, [r4, #84]	; 0x54
 800dade:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dae2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dae6:	81a3      	strheq	r3, [r4, #12]
 800dae8:	bf18      	it	ne
 800daea:	81a3      	strhne	r3, [r4, #12]
 800daec:	bd10      	pop	{r4, pc}

0800daee <__sclose>:
 800daee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800daf2:	f000 b813 	b.w	800db1c <_close_r>
	...

0800daf8 <_write_r>:
 800daf8:	b538      	push	{r3, r4, r5, lr}
 800dafa:	4d07      	ldr	r5, [pc, #28]	; (800db18 <_write_r+0x20>)
 800dafc:	4604      	mov	r4, r0
 800dafe:	4608      	mov	r0, r1
 800db00:	4611      	mov	r1, r2
 800db02:	2200      	movs	r2, #0
 800db04:	602a      	str	r2, [r5, #0]
 800db06:	461a      	mov	r2, r3
 800db08:	f7f5 faf7 	bl	80030fa <_write>
 800db0c:	1c43      	adds	r3, r0, #1
 800db0e:	d102      	bne.n	800db16 <_write_r+0x1e>
 800db10:	682b      	ldr	r3, [r5, #0]
 800db12:	b103      	cbz	r3, 800db16 <_write_r+0x1e>
 800db14:	6023      	str	r3, [r4, #0]
 800db16:	bd38      	pop	{r3, r4, r5, pc}
 800db18:	20001e3c 	.word	0x20001e3c

0800db1c <_close_r>:
 800db1c:	b538      	push	{r3, r4, r5, lr}
 800db1e:	4d06      	ldr	r5, [pc, #24]	; (800db38 <_close_r+0x1c>)
 800db20:	2300      	movs	r3, #0
 800db22:	4604      	mov	r4, r0
 800db24:	4608      	mov	r0, r1
 800db26:	602b      	str	r3, [r5, #0]
 800db28:	f7f5 fb03 	bl	8003132 <_close>
 800db2c:	1c43      	adds	r3, r0, #1
 800db2e:	d102      	bne.n	800db36 <_close_r+0x1a>
 800db30:	682b      	ldr	r3, [r5, #0]
 800db32:	b103      	cbz	r3, 800db36 <_close_r+0x1a>
 800db34:	6023      	str	r3, [r4, #0]
 800db36:	bd38      	pop	{r3, r4, r5, pc}
 800db38:	20001e3c 	.word	0x20001e3c

0800db3c <_fstat_r>:
 800db3c:	b538      	push	{r3, r4, r5, lr}
 800db3e:	4d07      	ldr	r5, [pc, #28]	; (800db5c <_fstat_r+0x20>)
 800db40:	2300      	movs	r3, #0
 800db42:	4604      	mov	r4, r0
 800db44:	4608      	mov	r0, r1
 800db46:	4611      	mov	r1, r2
 800db48:	602b      	str	r3, [r5, #0]
 800db4a:	f7f5 fafe 	bl	800314a <_fstat>
 800db4e:	1c43      	adds	r3, r0, #1
 800db50:	d102      	bne.n	800db58 <_fstat_r+0x1c>
 800db52:	682b      	ldr	r3, [r5, #0]
 800db54:	b103      	cbz	r3, 800db58 <_fstat_r+0x1c>
 800db56:	6023      	str	r3, [r4, #0]
 800db58:	bd38      	pop	{r3, r4, r5, pc}
 800db5a:	bf00      	nop
 800db5c:	20001e3c 	.word	0x20001e3c

0800db60 <_isatty_r>:
 800db60:	b538      	push	{r3, r4, r5, lr}
 800db62:	4d06      	ldr	r5, [pc, #24]	; (800db7c <_isatty_r+0x1c>)
 800db64:	2300      	movs	r3, #0
 800db66:	4604      	mov	r4, r0
 800db68:	4608      	mov	r0, r1
 800db6a:	602b      	str	r3, [r5, #0]
 800db6c:	f7f5 fafd 	bl	800316a <_isatty>
 800db70:	1c43      	adds	r3, r0, #1
 800db72:	d102      	bne.n	800db7a <_isatty_r+0x1a>
 800db74:	682b      	ldr	r3, [r5, #0]
 800db76:	b103      	cbz	r3, 800db7a <_isatty_r+0x1a>
 800db78:	6023      	str	r3, [r4, #0]
 800db7a:	bd38      	pop	{r3, r4, r5, pc}
 800db7c:	20001e3c 	.word	0x20001e3c

0800db80 <_lseek_r>:
 800db80:	b538      	push	{r3, r4, r5, lr}
 800db82:	4d07      	ldr	r5, [pc, #28]	; (800dba0 <_lseek_r+0x20>)
 800db84:	4604      	mov	r4, r0
 800db86:	4608      	mov	r0, r1
 800db88:	4611      	mov	r1, r2
 800db8a:	2200      	movs	r2, #0
 800db8c:	602a      	str	r2, [r5, #0]
 800db8e:	461a      	mov	r2, r3
 800db90:	f7f5 faf6 	bl	8003180 <_lseek>
 800db94:	1c43      	adds	r3, r0, #1
 800db96:	d102      	bne.n	800db9e <_lseek_r+0x1e>
 800db98:	682b      	ldr	r3, [r5, #0]
 800db9a:	b103      	cbz	r3, 800db9e <_lseek_r+0x1e>
 800db9c:	6023      	str	r3, [r4, #0]
 800db9e:	bd38      	pop	{r3, r4, r5, pc}
 800dba0:	20001e3c 	.word	0x20001e3c

0800dba4 <_read_r>:
 800dba4:	b538      	push	{r3, r4, r5, lr}
 800dba6:	4d07      	ldr	r5, [pc, #28]	; (800dbc4 <_read_r+0x20>)
 800dba8:	4604      	mov	r4, r0
 800dbaa:	4608      	mov	r0, r1
 800dbac:	4611      	mov	r1, r2
 800dbae:	2200      	movs	r2, #0
 800dbb0:	602a      	str	r2, [r5, #0]
 800dbb2:	461a      	mov	r2, r3
 800dbb4:	f7f5 fa84 	bl	80030c0 <_read>
 800dbb8:	1c43      	adds	r3, r0, #1
 800dbba:	d102      	bne.n	800dbc2 <_read_r+0x1e>
 800dbbc:	682b      	ldr	r3, [r5, #0]
 800dbbe:	b103      	cbz	r3, 800dbc2 <_read_r+0x1e>
 800dbc0:	6023      	str	r3, [r4, #0]
 800dbc2:	bd38      	pop	{r3, r4, r5, pc}
 800dbc4:	20001e3c 	.word	0x20001e3c

0800dbc8 <log>:
 800dbc8:	b538      	push	{r3, r4, r5, lr}
 800dbca:	ed2d 8b02 	vpush	{d8}
 800dbce:	ec55 4b10 	vmov	r4, r5, d0
 800dbd2:	f000 f839 	bl	800dc48 <__ieee754_log>
 800dbd6:	4622      	mov	r2, r4
 800dbd8:	462b      	mov	r3, r5
 800dbda:	4620      	mov	r0, r4
 800dbdc:	4629      	mov	r1, r5
 800dbde:	eeb0 8a40 	vmov.f32	s16, s0
 800dbe2:	eef0 8a60 	vmov.f32	s17, s1
 800dbe6:	f7f2 ffa9 	bl	8000b3c <__aeabi_dcmpun>
 800dbea:	b998      	cbnz	r0, 800dc14 <log+0x4c>
 800dbec:	2200      	movs	r2, #0
 800dbee:	2300      	movs	r3, #0
 800dbf0:	4620      	mov	r0, r4
 800dbf2:	4629      	mov	r1, r5
 800dbf4:	f7f2 ff98 	bl	8000b28 <__aeabi_dcmpgt>
 800dbf8:	b960      	cbnz	r0, 800dc14 <log+0x4c>
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	4620      	mov	r0, r4
 800dc00:	4629      	mov	r1, r5
 800dc02:	f7f2 ff69 	bl	8000ad8 <__aeabi_dcmpeq>
 800dc06:	b160      	cbz	r0, 800dc22 <log+0x5a>
 800dc08:	f7fb fb2e 	bl	8009268 <__errno>
 800dc0c:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 800dc38 <log+0x70>
 800dc10:	2322      	movs	r3, #34	; 0x22
 800dc12:	6003      	str	r3, [r0, #0]
 800dc14:	eeb0 0a48 	vmov.f32	s0, s16
 800dc18:	eef0 0a68 	vmov.f32	s1, s17
 800dc1c:	ecbd 8b02 	vpop	{d8}
 800dc20:	bd38      	pop	{r3, r4, r5, pc}
 800dc22:	f7fb fb21 	bl	8009268 <__errno>
 800dc26:	ecbd 8b02 	vpop	{d8}
 800dc2a:	2321      	movs	r3, #33	; 0x21
 800dc2c:	6003      	str	r3, [r0, #0]
 800dc2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc32:	4803      	ldr	r0, [pc, #12]	; (800dc40 <log+0x78>)
 800dc34:	f7ff b9d0 	b.w	800cfd8 <nan>
 800dc38:	00000000 	.word	0x00000000
 800dc3c:	fff00000 	.word	0xfff00000
 800dc40:	0800f000 	.word	0x0800f000
 800dc44:	00000000 	.word	0x00000000

0800dc48 <__ieee754_log>:
 800dc48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc4c:	ec51 0b10 	vmov	r0, r1, d0
 800dc50:	ed2d 8b04 	vpush	{d8-d9}
 800dc54:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800dc58:	b083      	sub	sp, #12
 800dc5a:	460d      	mov	r5, r1
 800dc5c:	da29      	bge.n	800dcb2 <__ieee754_log+0x6a>
 800dc5e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800dc62:	4303      	orrs	r3, r0
 800dc64:	ee10 2a10 	vmov	r2, s0
 800dc68:	d10c      	bne.n	800dc84 <__ieee754_log+0x3c>
 800dc6a:	49cf      	ldr	r1, [pc, #828]	; (800dfa8 <__ieee754_log+0x360>)
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	2300      	movs	r3, #0
 800dc70:	2000      	movs	r0, #0
 800dc72:	f7f2 fdf3 	bl	800085c <__aeabi_ddiv>
 800dc76:	ec41 0b10 	vmov	d0, r0, r1
 800dc7a:	b003      	add	sp, #12
 800dc7c:	ecbd 8b04 	vpop	{d8-d9}
 800dc80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc84:	2900      	cmp	r1, #0
 800dc86:	da05      	bge.n	800dc94 <__ieee754_log+0x4c>
 800dc88:	460b      	mov	r3, r1
 800dc8a:	f7f2 fb05 	bl	8000298 <__aeabi_dsub>
 800dc8e:	2200      	movs	r2, #0
 800dc90:	2300      	movs	r3, #0
 800dc92:	e7ee      	b.n	800dc72 <__ieee754_log+0x2a>
 800dc94:	4bc5      	ldr	r3, [pc, #788]	; (800dfac <__ieee754_log+0x364>)
 800dc96:	2200      	movs	r2, #0
 800dc98:	f7f2 fcb6 	bl	8000608 <__aeabi_dmul>
 800dc9c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800dca0:	460d      	mov	r5, r1
 800dca2:	4ac3      	ldr	r2, [pc, #780]	; (800dfb0 <__ieee754_log+0x368>)
 800dca4:	4295      	cmp	r5, r2
 800dca6:	dd06      	ble.n	800dcb6 <__ieee754_log+0x6e>
 800dca8:	4602      	mov	r2, r0
 800dcaa:	460b      	mov	r3, r1
 800dcac:	f7f2 faf6 	bl	800029c <__adddf3>
 800dcb0:	e7e1      	b.n	800dc76 <__ieee754_log+0x2e>
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	e7f5      	b.n	800dca2 <__ieee754_log+0x5a>
 800dcb6:	152c      	asrs	r4, r5, #20
 800dcb8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800dcbc:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800dcc0:	441c      	add	r4, r3
 800dcc2:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800dcc6:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800dcca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dcce:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800dcd2:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800dcd6:	ea42 0105 	orr.w	r1, r2, r5
 800dcda:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800dcde:	2200      	movs	r2, #0
 800dce0:	4bb4      	ldr	r3, [pc, #720]	; (800dfb4 <__ieee754_log+0x36c>)
 800dce2:	f7f2 fad9 	bl	8000298 <__aeabi_dsub>
 800dce6:	1cab      	adds	r3, r5, #2
 800dce8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dcec:	2b02      	cmp	r3, #2
 800dcee:	4682      	mov	sl, r0
 800dcf0:	468b      	mov	fp, r1
 800dcf2:	f04f 0200 	mov.w	r2, #0
 800dcf6:	dc53      	bgt.n	800dda0 <__ieee754_log+0x158>
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	f7f2 feed 	bl	8000ad8 <__aeabi_dcmpeq>
 800dcfe:	b1d0      	cbz	r0, 800dd36 <__ieee754_log+0xee>
 800dd00:	2c00      	cmp	r4, #0
 800dd02:	f000 8122 	beq.w	800df4a <__ieee754_log+0x302>
 800dd06:	4620      	mov	r0, r4
 800dd08:	f7f2 fc14 	bl	8000534 <__aeabi_i2d>
 800dd0c:	a390      	add	r3, pc, #576	; (adr r3, 800df50 <__ieee754_log+0x308>)
 800dd0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd12:	4606      	mov	r6, r0
 800dd14:	460f      	mov	r7, r1
 800dd16:	f7f2 fc77 	bl	8000608 <__aeabi_dmul>
 800dd1a:	a38f      	add	r3, pc, #572	; (adr r3, 800df58 <__ieee754_log+0x310>)
 800dd1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd20:	4604      	mov	r4, r0
 800dd22:	460d      	mov	r5, r1
 800dd24:	4630      	mov	r0, r6
 800dd26:	4639      	mov	r1, r7
 800dd28:	f7f2 fc6e 	bl	8000608 <__aeabi_dmul>
 800dd2c:	4602      	mov	r2, r0
 800dd2e:	460b      	mov	r3, r1
 800dd30:	4620      	mov	r0, r4
 800dd32:	4629      	mov	r1, r5
 800dd34:	e7ba      	b.n	800dcac <__ieee754_log+0x64>
 800dd36:	a38a      	add	r3, pc, #552	; (adr r3, 800df60 <__ieee754_log+0x318>)
 800dd38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd3c:	4650      	mov	r0, sl
 800dd3e:	4659      	mov	r1, fp
 800dd40:	f7f2 fc62 	bl	8000608 <__aeabi_dmul>
 800dd44:	4602      	mov	r2, r0
 800dd46:	460b      	mov	r3, r1
 800dd48:	2000      	movs	r0, #0
 800dd4a:	499b      	ldr	r1, [pc, #620]	; (800dfb8 <__ieee754_log+0x370>)
 800dd4c:	f7f2 faa4 	bl	8000298 <__aeabi_dsub>
 800dd50:	4652      	mov	r2, sl
 800dd52:	4606      	mov	r6, r0
 800dd54:	460f      	mov	r7, r1
 800dd56:	465b      	mov	r3, fp
 800dd58:	4650      	mov	r0, sl
 800dd5a:	4659      	mov	r1, fp
 800dd5c:	f7f2 fc54 	bl	8000608 <__aeabi_dmul>
 800dd60:	4602      	mov	r2, r0
 800dd62:	460b      	mov	r3, r1
 800dd64:	4630      	mov	r0, r6
 800dd66:	4639      	mov	r1, r7
 800dd68:	f7f2 fc4e 	bl	8000608 <__aeabi_dmul>
 800dd6c:	4606      	mov	r6, r0
 800dd6e:	460f      	mov	r7, r1
 800dd70:	b914      	cbnz	r4, 800dd78 <__ieee754_log+0x130>
 800dd72:	4632      	mov	r2, r6
 800dd74:	463b      	mov	r3, r7
 800dd76:	e0a2      	b.n	800debe <__ieee754_log+0x276>
 800dd78:	4620      	mov	r0, r4
 800dd7a:	f7f2 fbdb 	bl	8000534 <__aeabi_i2d>
 800dd7e:	a374      	add	r3, pc, #464	; (adr r3, 800df50 <__ieee754_log+0x308>)
 800dd80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd84:	4680      	mov	r8, r0
 800dd86:	4689      	mov	r9, r1
 800dd88:	f7f2 fc3e 	bl	8000608 <__aeabi_dmul>
 800dd8c:	a372      	add	r3, pc, #456	; (adr r3, 800df58 <__ieee754_log+0x310>)
 800dd8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd92:	4604      	mov	r4, r0
 800dd94:	460d      	mov	r5, r1
 800dd96:	4640      	mov	r0, r8
 800dd98:	4649      	mov	r1, r9
 800dd9a:	f7f2 fc35 	bl	8000608 <__aeabi_dmul>
 800dd9e:	e0a7      	b.n	800def0 <__ieee754_log+0x2a8>
 800dda0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dda4:	f7f2 fa7a 	bl	800029c <__adddf3>
 800dda8:	4602      	mov	r2, r0
 800ddaa:	460b      	mov	r3, r1
 800ddac:	4650      	mov	r0, sl
 800ddae:	4659      	mov	r1, fp
 800ddb0:	f7f2 fd54 	bl	800085c <__aeabi_ddiv>
 800ddb4:	ec41 0b18 	vmov	d8, r0, r1
 800ddb8:	4620      	mov	r0, r4
 800ddba:	f7f2 fbbb 	bl	8000534 <__aeabi_i2d>
 800ddbe:	ec53 2b18 	vmov	r2, r3, d8
 800ddc2:	ec41 0b19 	vmov	d9, r0, r1
 800ddc6:	ec51 0b18 	vmov	r0, r1, d8
 800ddca:	f7f2 fc1d 	bl	8000608 <__aeabi_dmul>
 800ddce:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800ddd2:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800ddd6:	9301      	str	r3, [sp, #4]
 800ddd8:	4602      	mov	r2, r0
 800ddda:	460b      	mov	r3, r1
 800dddc:	4680      	mov	r8, r0
 800ddde:	4689      	mov	r9, r1
 800dde0:	f7f2 fc12 	bl	8000608 <__aeabi_dmul>
 800dde4:	a360      	add	r3, pc, #384	; (adr r3, 800df68 <__ieee754_log+0x320>)
 800dde6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddea:	4606      	mov	r6, r0
 800ddec:	460f      	mov	r7, r1
 800ddee:	f7f2 fc0b 	bl	8000608 <__aeabi_dmul>
 800ddf2:	a35f      	add	r3, pc, #380	; (adr r3, 800df70 <__ieee754_log+0x328>)
 800ddf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddf8:	f7f2 fa50 	bl	800029c <__adddf3>
 800ddfc:	4632      	mov	r2, r6
 800ddfe:	463b      	mov	r3, r7
 800de00:	f7f2 fc02 	bl	8000608 <__aeabi_dmul>
 800de04:	a35c      	add	r3, pc, #368	; (adr r3, 800df78 <__ieee754_log+0x330>)
 800de06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de0a:	f7f2 fa47 	bl	800029c <__adddf3>
 800de0e:	4632      	mov	r2, r6
 800de10:	463b      	mov	r3, r7
 800de12:	f7f2 fbf9 	bl	8000608 <__aeabi_dmul>
 800de16:	a35a      	add	r3, pc, #360	; (adr r3, 800df80 <__ieee754_log+0x338>)
 800de18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de1c:	f7f2 fa3e 	bl	800029c <__adddf3>
 800de20:	4642      	mov	r2, r8
 800de22:	464b      	mov	r3, r9
 800de24:	f7f2 fbf0 	bl	8000608 <__aeabi_dmul>
 800de28:	a357      	add	r3, pc, #348	; (adr r3, 800df88 <__ieee754_log+0x340>)
 800de2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de2e:	4680      	mov	r8, r0
 800de30:	4689      	mov	r9, r1
 800de32:	4630      	mov	r0, r6
 800de34:	4639      	mov	r1, r7
 800de36:	f7f2 fbe7 	bl	8000608 <__aeabi_dmul>
 800de3a:	a355      	add	r3, pc, #340	; (adr r3, 800df90 <__ieee754_log+0x348>)
 800de3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de40:	f7f2 fa2c 	bl	800029c <__adddf3>
 800de44:	4632      	mov	r2, r6
 800de46:	463b      	mov	r3, r7
 800de48:	f7f2 fbde 	bl	8000608 <__aeabi_dmul>
 800de4c:	a352      	add	r3, pc, #328	; (adr r3, 800df98 <__ieee754_log+0x350>)
 800de4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de52:	f7f2 fa23 	bl	800029c <__adddf3>
 800de56:	4632      	mov	r2, r6
 800de58:	463b      	mov	r3, r7
 800de5a:	f7f2 fbd5 	bl	8000608 <__aeabi_dmul>
 800de5e:	460b      	mov	r3, r1
 800de60:	4602      	mov	r2, r0
 800de62:	4649      	mov	r1, r9
 800de64:	4640      	mov	r0, r8
 800de66:	f7f2 fa19 	bl	800029c <__adddf3>
 800de6a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800de6e:	9b01      	ldr	r3, [sp, #4]
 800de70:	3551      	adds	r5, #81	; 0x51
 800de72:	431d      	orrs	r5, r3
 800de74:	2d00      	cmp	r5, #0
 800de76:	4680      	mov	r8, r0
 800de78:	4689      	mov	r9, r1
 800de7a:	dd48      	ble.n	800df0e <__ieee754_log+0x2c6>
 800de7c:	4b4e      	ldr	r3, [pc, #312]	; (800dfb8 <__ieee754_log+0x370>)
 800de7e:	2200      	movs	r2, #0
 800de80:	4650      	mov	r0, sl
 800de82:	4659      	mov	r1, fp
 800de84:	f7f2 fbc0 	bl	8000608 <__aeabi_dmul>
 800de88:	4652      	mov	r2, sl
 800de8a:	465b      	mov	r3, fp
 800de8c:	f7f2 fbbc 	bl	8000608 <__aeabi_dmul>
 800de90:	4602      	mov	r2, r0
 800de92:	460b      	mov	r3, r1
 800de94:	4606      	mov	r6, r0
 800de96:	460f      	mov	r7, r1
 800de98:	4640      	mov	r0, r8
 800de9a:	4649      	mov	r1, r9
 800de9c:	f7f2 f9fe 	bl	800029c <__adddf3>
 800dea0:	ec53 2b18 	vmov	r2, r3, d8
 800dea4:	f7f2 fbb0 	bl	8000608 <__aeabi_dmul>
 800dea8:	4680      	mov	r8, r0
 800deaa:	4689      	mov	r9, r1
 800deac:	b964      	cbnz	r4, 800dec8 <__ieee754_log+0x280>
 800deae:	4602      	mov	r2, r0
 800deb0:	460b      	mov	r3, r1
 800deb2:	4630      	mov	r0, r6
 800deb4:	4639      	mov	r1, r7
 800deb6:	f7f2 f9ef 	bl	8000298 <__aeabi_dsub>
 800deba:	4602      	mov	r2, r0
 800debc:	460b      	mov	r3, r1
 800debe:	4650      	mov	r0, sl
 800dec0:	4659      	mov	r1, fp
 800dec2:	f7f2 f9e9 	bl	8000298 <__aeabi_dsub>
 800dec6:	e6d6      	b.n	800dc76 <__ieee754_log+0x2e>
 800dec8:	a321      	add	r3, pc, #132	; (adr r3, 800df50 <__ieee754_log+0x308>)
 800deca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dece:	ec51 0b19 	vmov	r0, r1, d9
 800ded2:	f7f2 fb99 	bl	8000608 <__aeabi_dmul>
 800ded6:	a320      	add	r3, pc, #128	; (adr r3, 800df58 <__ieee754_log+0x310>)
 800ded8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dedc:	4604      	mov	r4, r0
 800dede:	460d      	mov	r5, r1
 800dee0:	ec51 0b19 	vmov	r0, r1, d9
 800dee4:	f7f2 fb90 	bl	8000608 <__aeabi_dmul>
 800dee8:	4642      	mov	r2, r8
 800deea:	464b      	mov	r3, r9
 800deec:	f7f2 f9d6 	bl	800029c <__adddf3>
 800def0:	4602      	mov	r2, r0
 800def2:	460b      	mov	r3, r1
 800def4:	4630      	mov	r0, r6
 800def6:	4639      	mov	r1, r7
 800def8:	f7f2 f9ce 	bl	8000298 <__aeabi_dsub>
 800defc:	4652      	mov	r2, sl
 800defe:	465b      	mov	r3, fp
 800df00:	f7f2 f9ca 	bl	8000298 <__aeabi_dsub>
 800df04:	4602      	mov	r2, r0
 800df06:	460b      	mov	r3, r1
 800df08:	4620      	mov	r0, r4
 800df0a:	4629      	mov	r1, r5
 800df0c:	e7d9      	b.n	800dec2 <__ieee754_log+0x27a>
 800df0e:	4602      	mov	r2, r0
 800df10:	460b      	mov	r3, r1
 800df12:	4650      	mov	r0, sl
 800df14:	4659      	mov	r1, fp
 800df16:	f7f2 f9bf 	bl	8000298 <__aeabi_dsub>
 800df1a:	ec53 2b18 	vmov	r2, r3, d8
 800df1e:	f7f2 fb73 	bl	8000608 <__aeabi_dmul>
 800df22:	4606      	mov	r6, r0
 800df24:	460f      	mov	r7, r1
 800df26:	2c00      	cmp	r4, #0
 800df28:	f43f af23 	beq.w	800dd72 <__ieee754_log+0x12a>
 800df2c:	a308      	add	r3, pc, #32	; (adr r3, 800df50 <__ieee754_log+0x308>)
 800df2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df32:	ec51 0b19 	vmov	r0, r1, d9
 800df36:	f7f2 fb67 	bl	8000608 <__aeabi_dmul>
 800df3a:	a307      	add	r3, pc, #28	; (adr r3, 800df58 <__ieee754_log+0x310>)
 800df3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df40:	4604      	mov	r4, r0
 800df42:	460d      	mov	r5, r1
 800df44:	ec51 0b19 	vmov	r0, r1, d9
 800df48:	e727      	b.n	800dd9a <__ieee754_log+0x152>
 800df4a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800dfa0 <__ieee754_log+0x358>
 800df4e:	e694      	b.n	800dc7a <__ieee754_log+0x32>
 800df50:	fee00000 	.word	0xfee00000
 800df54:	3fe62e42 	.word	0x3fe62e42
 800df58:	35793c76 	.word	0x35793c76
 800df5c:	3dea39ef 	.word	0x3dea39ef
 800df60:	55555555 	.word	0x55555555
 800df64:	3fd55555 	.word	0x3fd55555
 800df68:	df3e5244 	.word	0xdf3e5244
 800df6c:	3fc2f112 	.word	0x3fc2f112
 800df70:	96cb03de 	.word	0x96cb03de
 800df74:	3fc74664 	.word	0x3fc74664
 800df78:	94229359 	.word	0x94229359
 800df7c:	3fd24924 	.word	0x3fd24924
 800df80:	55555593 	.word	0x55555593
 800df84:	3fe55555 	.word	0x3fe55555
 800df88:	d078c69f 	.word	0xd078c69f
 800df8c:	3fc39a09 	.word	0x3fc39a09
 800df90:	1d8e78af 	.word	0x1d8e78af
 800df94:	3fcc71c5 	.word	0x3fcc71c5
 800df98:	9997fa04 	.word	0x9997fa04
 800df9c:	3fd99999 	.word	0x3fd99999
	...
 800dfa8:	c3500000 	.word	0xc3500000
 800dfac:	43500000 	.word	0x43500000
 800dfb0:	7fefffff 	.word	0x7fefffff
 800dfb4:	3ff00000 	.word	0x3ff00000
 800dfb8:	3fe00000 	.word	0x3fe00000

0800dfbc <_init>:
 800dfbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfbe:	bf00      	nop
 800dfc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dfc2:	bc08      	pop	{r3}
 800dfc4:	469e      	mov	lr, r3
 800dfc6:	4770      	bx	lr

0800dfc8 <_fini>:
 800dfc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfca:	bf00      	nop
 800dfcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dfce:	bc08      	pop	{r3}
 800dfd0:	469e      	mov	lr, r3
 800dfd2:	4770      	bx	lr
